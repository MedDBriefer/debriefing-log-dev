{"version":3,"sources":["../../../libs/mdb-firebase/index.js","../../../libs/scenario-data/constants.js","../../../libs/scenario-data/traumaScenarioV2MetaData.js","../../../libs/scenario-data/utils.js","../../../libs/scenario-data/traumaScenarioV2.js","../../../libs/scenario-data/index.js","routes/LogList.js","scripts/connect-firebase.js","components/MDBNavBar.js","components/debriefingUtils.js","utils.js","components/Debriefing.js","routes/Log.js","components/UnauthedLayout.js","App.js","reportWebVitals.js","index.js"],"names":["firebaseApp","firebase","apps","length","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","auth","firestore","ANSWER","ASSESS","ASSESS_OPTION","CL_PROMPT","HEADING","INTERV","NONE","ONE","OOM","PROMPT","REQUIRED","MDB_TYPES","Object","freeze","PHASE","SUB_PHASE","AWO","ASSESSO","DECISION","DECISION_OPTION","REQURED","PROMPT_SET","SELECTION_TYPES","PREFIXES","SYSTEMS","AW","BR","BL","SH","CHECKLIST_META_DATA","id","type","TYPES","label","abbrLabel","promptID","verboseLabel","INTV_META_DATA","selectionType","ST","promptSetID","system","SYS","MEDS","MED_PROMPT_TYPES","MED_OPTIONS","MED_ADMINISTRATIVE_ROUTES","titleCase","txt","charAt","toUpperCase","slice","createRec","data","push","forEach","med","medID","rec","prompt","option","answerID","routeID","mkMedPromptSet","deepCopy","object","JSON","parse","stringify","getRecsOfType","arr","filter","INTV_FORMS","PROMPTS","getChecklistData","retVal","metaData","find","undefined","includes","items","getLabel","getIntvData","getSystemIntvs","getIntervention","intvID","depth","obj","assign","createInterventionForm","intv","prompts","constraints","dataEntry","map","showConstraints","expandPromptSetToPromptList","mkPhase","phaseType","phase","subPhases","interventionsMenu","headingID","PFX","Error","sp","cld","it","createPhase","createSubPhase","INTV_MENUS","PHASE_DATA","SYSTEM_INTVS","airway","intvs","breathing","bleeding","shock","mergeData","scenData","scenario","collection","where","name","limit","get","then","snapShot","size","doc","docs","criticalActions","associations","getRequiredActions","intvMetaData","interventionMenus","phaseData","systemInterventions","interventionForms","checkListMetaData","subPhasePhases","addFlattenedItem","item","subphase","subPhase","phaseID","phaseObj","subPhaseObject","reconstructChecklistMetaData","LogList","useState","logs","setLogs","logsLoaded","setLogsLoaded","useEffect","querySnapshot","scenarioName","userName","timestamp","result","catch","error","console","log","Table","striped","borderless","hover","to","MDBNavBar","title","leftNav","rightNav","useContext","AuthContext","isAuthenticated","signOutUser","Navbar","color","dark","NavbarBrand","href","Nav","NavbarText","tag","Button","onClick","colorTypes","iconTypes","getAssessmentIcon","currentEntry","status","getColor","getFeedback","contraindicatedWhy","minimalWhy","requiredWhy","protocol","getTimestamp","seconds","Date","toISOString","substr","Debriefing","showCommentColumn","setShowCommentColumn","events","formattedActions","setFormattedActions","insertInPhaseInOrder","phaseNames","phases","objIndex","phaseIndex","lastIndexOf","phaseObjects","splice","getCorrectAnswerLabel","answers","answerLabels","Array","isArray","answer","j","entry","i","getPhaseLabel","processEvents","window","tempFormattedActions","tempConfirmedActions","requiredPhaseNames","findRequiredPhases","priorPhase","event","tempObject","finding","vital","value","intervention","tempType","processingState","priortempObject","wrongAnswer","ansId","evalForIncorrectAnswer","pop","answerCorrect","actionDescription","ca","standards","standard","contrasAll","meta","contraReqOrder","contra","contras","contraindicated","contraWhys","contrasReq","contraIndex","k","required","caLabel","indexOf","indexCounter","md","cls","phaseObject","when","during","orderedArrayObjects","objectsBefore","objectBefore","requiredObjectBefore","reverse","objectAfter","requiredObjectAfter","indexBefore","indexAfter","indexRequiredBefore","indexRequiredAfter","insertionIndex","findIndex","insertInPhaseRelativeToSuggestedOrder","displayObjects","entryIndex","criticalActionHeaderColor","numericalID","tempHeaderObject","concat","organizeLogDisplay","priorCA","finalLog","caActions","caNames","caIndex","caActIndex","action","actions","processedIds","caIds","caEntry","standardNeeded","minimalNeeded","minimal","found","allStandardFound","allMinimalFound","numericalIDsChanged","foundId","paIndex","header","z","candidateHeader","foundHeader","findHeaderFor","description","dispDataRow","className","style","overflowY","maxHeight","index","colSpan","Log","logID","useParams","setLog","setScenario","loaded","setLoaded","getLog","logData","schemaVersion","UnauthedLayout","props","children","App","exact","path","authFlowLayout","component","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76b655f7.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport \"firebase/auth\";\nimport \"firebase/firestore\"\n\nexport const firebaseCfg = {\n    apiKey: \"AIzaSyBOgWAbXUGckpad2sk0IUo00hZsV4WxG0E\",\n    authDomain: \"meddbriefer-68cd4.firebaseapp.com\",\n    projectId: \"meddbriefer-68cd4\",\n    storageBucket: \"meddbriefer-68cd4.appspot.com\",\n    messagingSenderId: \"1087114796018\",\n    appId: \"1:1087114796018:web:679fbab38dbf78af0ce96b\",\n    measurementId: \"G-Q7QZKC9KHW\"\n}\n\n// don't reinitialize app if it already exists\nconst firebaseApp = !firebase.apps.length ? firebase.initializeApp(firebaseCfg) : firebase.app()\n\nexport const auth = firebaseApp.auth()\nexport const db = firebaseApp.firestore()\n","// the following constants are deprecated (need to figure out how to handle this)\n// use MDB_TYPES, SELECTION_TYPES, PREFIXES, and SYSTEMS instead\nexport const ANSWER = \"answer\"\nexport const ASSESS = \"assessment\"\nexport const ASSESSO = \"assessment-option\"\nexport const ASSESS_OPTION = \"assessment-option\"\nexport const AWO = \"assessment-with-options\"\nexport const CB = \"checkbox\"\nexport const CL_PROMPT = \"checklist-prompt\"\nexport const CRIT_FAIL = \"critical-criteria\"\nexport const DECISION = \"decision\"\nexport const DECISION_OPTION = \"decision-option\"\nexport const HEADING = \"heading\" //not a leaf node, simply a step which has child steps\nexport const INTERV = \"intervention\" // an action performed on the patient\nexport const INTV_FORM = \"intervention-form\"\nexport const NONE = \"none\"\nexport const ONE = \"one\"\nexport const OOM = \"one-or-more\"\nexport const OPTION = \"option\"\nexport const PHASE = \"phase\"\nexport const PROMPT = \"prompt\"\nexport const PROMPT_SET = \"prompt-set\"\nexport const REQUIRED = \"required-action\"   // an action the EMT performs, but not on the patient\n// keeping as I had a typo. need to deprecate somehow\nexport const REQURED = REQUIRED\nexport const SUB_PHASE = \"sub-phase\"\n\nexport const MDB_TYPES = Object.freeze({\n    PHASE: PHASE,\n    SUB_PHASE: SUB_PHASE,\n    ASSESS: ASSESS,\n    AWO: AWO,\n    ASSESS_OPTION: ASSESS_OPTION,\n    ASSESSO: ASSESS_OPTION,\n    CL_PROMPT: CL_PROMPT,\n    DECISION: DECISION,\n    DECISION_OPTION: DECISION_OPTION,\n    REQUIRED: REQUIRED,\n    REQURED: REQUIRED,\n    INTERV: INTERV,\n    PROMPT_SET: PROMPT_SET,\n    PROMPT: PROMPT,\n    ANSWER: ANSWER,\n})\nexport const SELECTION_TYPES = Object.freeze({\n    ONE: ONE,\n    OOM: OOM,\n    NONE: NONE\n})\n\nexport const PREFIXES = Object.freeze({\n    PHASE: \"\",\n    SUB_PHASE: \"\",\n    ANSWER: \"answer-\",\n    ASSESS: \"assess-\",\n    AWO: \"assessment-with-options-\",\n    ASSESS_OPTION: \"assess-option-\",\n    CL_PROMPT: \"cl-prompt-\",\n    DECISION: \"decision-\",\n    DECISION_OPTION: \"decision-option-\",\n    INTERV: \"intv-\",\n    PROMPT_SET: \"prompt-set-\",\n    PROMPT: \"prompt-\",\n    REQUIRED: \"required-action-\",\n})\n\nexport const SYSTEMS = Object.freeze({\n    AW: \"airway\",\n    BR: \"breathing\",\n    BL: \"bleeding\",\n    SH: \"shock\",\n})\n","\nimport {\n    MDB_TYPES as TYPES,\n    // PREFIXES as PFX,\n    SELECTION_TYPES as ST,\n    SYSTEMS as SYS\n} from \"./constants.js\"\n\nexport const CHECKLIST_META_DATA = [\n    { id: \"bsi\", type: TYPES.PHASE, label: \"BSI\" },\n        { id: \"required-action-apply-ppe\", type: TYPES.REQUIRED, label: \"Takes or verbalizes appropriate PPE precautions.\" },\n\n    { id: \"scene-size-up\", type: TYPES.PHASE, label: \"Scene Size-Up\" },\n        { id: \"assess-scene-safety\", type: TYPES.ASSESS, abbrLabel: \"Scene Safety\", label: \"Determines the scene/situation is safe\"  },\n        { id: \"assess-injury-mechanism\", type: TYPES.ASSESS, abbrLabel: \"Mechanism of Injury\", label: \"Determines the mechanism of injury/nature of illness\" },\n        { id: \"assess-num-patients\", type: TYPES.ASSESS, abbrLabel: \"Num Patients\", label: \"Determines the number of patients\" },\n        { id: \"assess-need-additional-help\", type: TYPES.ASSESS, abbrLabel: \"Additional Help\", label: \"Requests additional help if necessary\" },\n        { id: \"required-action-considers-stabilize-spine\", type: TYPES.REQUIRED, label: \"Considers stabilization of spine\" },\n\n    { id: \"primary-survey\", type: TYPES.PHASE, label: \"Primary Survey\" },\n        { id: \"general-impression\", type: TYPES.SUB_PHASE, label: \"General Impression\" },\n            { id: \"assess-patient-condition\", type: TYPES.ASSESS, abbrLabel: \"General Impression\", label: \"States or requests general impression\" },\n            { id: \"assess-loc\", type: TYPES.ASSESS, abbrLabel: \"LOC\", label: \"Assesses responsiveness/level of consciousness\" },\n            { id: \"assess-life-threats\", type: TYPES.ASSESS, abbrLabel: \"Life Threats\", label: \"Determines chief complaint/apparent life-threats\" },\n        { id: \"airway\", type: TYPES.SUB_PHASE, label: \"Airway\" },\n            { id: \"assess-airway\", type: TYPES.ASSESS, abbrLabel: \"Airway\", label: \"Assesses airway\" },\n            // { id: \"assess-response-airway-mgmt\", type: TYPES.ASSESS, label: \"Assesses patient's response to airway management\", abbrLabel: \"Airway Mgmt Response\" },\n        { id: \"breathing\", type: TYPES.SUB_PHASE, label: \"Breathing\" },\n            { id: \"assess-breathing\", type: TYPES.ASSESS, abbrLabel: \"Breathing\", label: \"Assesses breathing\" },\n            // { id: \"assess-response-breathing-mgmt\", type: TYPES.ASSESS, label: \"Assesses patient’s response to breathing management\", abbrLabel: \"Breathing Mgmt Response\" },\n        { id: \"circulation\", type: TYPES.SUB_PHASE, label: \"Circulation\" },\n            { id: \"assess-pulse\", type: TYPES.ASSESS, abbrLabel: \"Pulse\", label: \"Checks pulse\" },\n            { id: \"assess-skin\", type: TYPES.ASSESS, abbrLabel: \"Skin\", label: \"Assesses skin (color, temperature, condition)\" },\n            { id: \"assess-major-bleeding\", type: TYPES.ASSESS, abbrLabel: \"Major Bleeding\", label: \"Checks for major bleeding\" },\n            // { id: \"assess-response-bleeding-mgmt\", type: TYPES.ASSESS, label: \"Assesses patient's response to managing severe bleeding\", abbrLabel: \"Major Bleeding Mgmt Response\" },\n            // { id: \"assess-response-shock-mgmt\", type: TYPES.ASSESS, label: \"Assesses patient's response to managing shock\", abbrLabel: \"Shock Mgmt Response\" },\n\n        { id: \"transport-decision\", type: TYPES.SUB_PHASE, label: \"Transport Decision\" },\n            { id: \"decision-is-load-and-go\", type: TYPES.DECISION, label: \"Is this a critical patient?\" },\n                { id: \"decision-option-is-load-and-go\",   type: TYPES.DECISION_OPTION, abbrLabel: \"Yes\", label: \"Is load-and-go\",   promptID: \"decision-is-load-and-go\" },\n                { id: \"decision-option-is-stay-and-play\", type: TYPES.DECISION_OPTION, abbrLabel: \"No\",  label: \"Is stay-and-play\", promptID: \"decision-is-load-and-go\" },\n\n    { id: \"history-taking\", type: TYPES.PHASE, label: \"History Taking\" },\n        { id: \"required-action-obtains-vitals\", type: TYPES.REQUIRED, abbrLabel: \"Obtains vitals\", label: \"Obtains (or directs assistant to obtain) baseline vital signs\" },\n        { id: \"required-action-attempt-obtain-sample\", type: TYPES.REQUIRED, abbrLabel: \"Obtains SAMPLE\", label: \"Attempts to obtain SAMPLE history\" },\n        { id: \"assess-opqrst-info\", type: TYPES.ASSESS, abbrLabel: \"Obtains OPQRST\", label: \"Attempts to obtain OPQRST\" },\n\n    { id: \"secondary-assessment\", type: TYPES.PHASE, label: \"Secondary Survey\" },\n    // { id: \"cl-prompt-general-state-looking-listening-feeling\", type: CL_PROMPT, label: \"Prompt students to state what they are looking/listening/feeling for throughout.\" },\n        { id: \"trauma-expose\", type: TYPES.SUB_PHASE, label: \"Trauma Expose\" },\n            { id: \"required-action-remove-patient-clothing-as-needed\", type: TYPES.REQUIRED, label: \"Exposes (and recovers) anatomical areas as necessary\" },\n        { id: \"head\", type: TYPES.SUB_PHASE, label: \"Head\" },\n            { id: \"assess-inspects-head\", type: TYPES.ASSESS, abbrLabel: \"Inspect Head\", label: \"Inspects the head\" },\n            { id: \"assess-palpate-skull\", type: TYPES.ASSESS, abbrLabel: \"Palpate Skull\", label: \"Palpates the skull\" },\n            { id: \"assess-eyes-reactiveness\", type: TYPES.ASSESS, abbrLabel: \"PERRL\", label: \"Assesses eyes for reactiveness\" },\n            { id: \"assess-eyes-ears-nose-mouth\", type: TYPES.ASSESS, abbrLabel: \"Head Fluids\", label: \"Assesses eyes, ears, nose, mouth\" },\n        { id: \"neck\", type: TYPES.SUB_PHASE, label: \"Neck\" },\n            { id: \"assess-inspects-neck\", type: TYPES.ASSESS, abbrLabel: \"Neck\", label: \"Inspects the neck\" },\n            { id: \"assess-trachea\", type: TYPES.ASSESS, abbrLabel: \"Trachea\", label: \"Inspects position of trachea\" },\n            { id: \"assess-jugular\", type: TYPES.ASSESS, abbrLabel: \"Jugular\", label: \"Inspects jugular veins\" },\n            { id: \"assess-palpate-cervical-spine\", type: TYPES.ASSESS, abbrLabel: \"Palpate C-Spine\", label: \"Palpates cervical spine\" },\n        { id: \"shoulders\", type: TYPES.SUB_PHASE, label: \"Shoulders\" },\n            { id: \"assess-check-shoulders\", type: TYPES.ASSESS, abbrLabel: \"Check Shoulders\", label: \"Checks if stable and intact\" },\n        { id: \"clavicle\", type: TYPES.SUB_PHASE, label: \"Clavicle\" },\n            { id: \"assess-inspect-clavicle\", type: TYPES.ASSESS, abbrLabel: \"Checks Clavicle\", label: \"Checks if stable and intact\" },\n        { id: \"chest\", type: TYPES.SUB_PHASE, label: \"Chest\" },\n            { id: \"assess-inspect-chest\", type: TYPES.ASSESS, abbrLabel: \"Inspects Chest\", label: \"Inspects Chest\" },\n            { id: \"assess-palpate-chest\", type: TYPES.ASSESS, abbrLabel: \"Palpate Chest\", label: \"Palpates chest\" },\n            { id: \"assess-auscultate-chest\", type: TYPES.ASSESS, abbrLabel: \"Auscultate Chest\", label: \"Auscultates chest\" },\n        { id: \"abdomen-pelvis\", type: TYPES.SUB_PHASE, label: \"Abdomen/pelvis\" },\n            { id: \"assess-inspects-abdomen\", type: TYPES.ASSESS, abbrLabel: \"Inspects Abdomen\", label: \"Inspects abdomen\" },\n            { id: \"assess-palpate-abdomen\", type: TYPES.ASSESS, abbrLabel: \"Palpate Abdomen\", label: \"Palpates abdomen\" },\n            { id: \"assess-pelvis\", type: TYPES.ASSESS, abbrLabel: \"Pelvis\", label: \"Assesses pelvis\" },\n            { id: \"assess-genitalia-perineum\", type: TYPES.ASSESS, abbrLabel: \"Genitalia/Perineum\", label: \"Assesses genitalia/perineum\" },\n        { id: \"lower-extremities\", type: TYPES.SUB_PHASE, label: \"Lower extremities\" },\n            { id: \"assessment-with-options-legs-inspects\", type: TYPES.AWO, label: \"Inspects lower extremities\", abbrLabel: \"Inspect Legs\" },\n                { id: \"assess-option-legs-inspects-bilaterally\", type: TYPES.ASSESS_OPTION, abbrLabel: \"Bilaterally\",     label: \"Inspects lower extremities bilaterally\",        promptID: \"assessment-with-options-legs-inspects\" },\n                { id: \"assess-option-legs-inspects-left-only\",   type: TYPES.ASSESS_OPTION, abbrLabel: \"Left side only\",  label: \"Inspects lower extremities on left side only\",  promptID: \"assessment-with-options-legs-inspects\" },\n                { id: \"assess-option-legs-inspects-right-only\",  type: TYPES.ASSESS_OPTION, abbrLabel: \"Right side only\", label: \"Inspects lower extremities on right side only\", promptID: \"assessment-with-options-legs-inspects\" },\n            { id: \"assessment-with-options-legs-motor-function\", type: TYPES.AWO, label: \"Assesses motor function\", abbrLabel: \"Legs Motor Func.\" },\n                { id: \"assess-option-legs-motor-function-bilaterally\", type: TYPES.ASSESS_OPTION, abbrLabel: \"Bilaterally\",     label: \"Assesses lower extremities motor function bilaterally\",        promptID: \"assessment-with-options-legs-motor-function\" },\n                { id: \"assess-option-legs-motor-function-left-only\",   type: TYPES.ASSESS_OPTION, abbrLabel: \"Left side only\",  label: \"Asessess lower extremities motor function on left side only\",  promptID: \"assessment-with-options-legs-motor-function\" },\n                { id: \"assess-option-legs-motor-function-right-only\",  type: TYPES.ASSESS_OPTION, abbrLabel: \"Right side only\", label: \"Asessess lower extremities motor function on right side only\", promptID: \"assessment-with-options-legs-motor-function\" },\n            { id: \"assessment-with-options-legs-sensory-function\", type: TYPES.AWO, abbrLabel: \"Legs Sensory Func.\", label: \"Assesses sensory function\" },\n                { id: \"assess-option-legs-sensory-function-bilaterally\", type: TYPES.ASSESS_OPTION, abbrLabel: \"Bilaterally\",     label: \"Assesses lower extremities sensory function bilaterally\",        promptID: \"assessment-with-options-legs-sensory-function\" },\n                { id: \"assess-option-legs-sensory-function-left-only\",   type: TYPES.ASSESS_OPTION, abbrLabel: \"Left side only\",  label: \"Asessess lower extremities sensory function on left side only\",  promptID: \"assessment-with-options-legs-sensory-function\" },\n                { id: \"assess-option-legs-sensory-function-right-only\",  type: TYPES.ASSESS_OPTION, abbrLabel: \"Right side only\", label: \"Asessess lower extremities sensory function on right side only\", promptID: \"assessment-with-options-legs-sensory-function\" },\n            { id: \"assessment-with-options-legs-pulse\", type: TYPES.AWO, label: \"Checks pulse\", abbrLabel: \"Legs Pulse\" },\n                { id: \"assess-option-legs-pulse-bilaterally\", type: TYPES.ASSESS_OPTION, abbrLabel: \"Bilaterally\",     label: \"Assesses lower extremities pulse bilaterally\",        promptID: \"assessment-with-options-legs-pulse\" },\n                { id: \"assess-option-legs-pulse-left-only\",   type: TYPES.ASSESS_OPTION, abbrLabel: \"Left side only\",  label: \"Asessess lower extremities pulse on left side only\",  promptID: \"assessment-with-options-legs-pulse\" },\n                { id: \"assess-option-legs-pulse-right-only\",  type: TYPES.ASSESS_OPTION, abbrLabel: \"Right side only\", label: \"Asessess lower extremities pulse on right side only\", promptID: \"assessment-with-options-legs-pulse\" },\n        { id: \"upper-extremities\", type: TYPES.SUB_PHASE, label: \"Upper extremities\" },\n            { id: \"assessment-with-options-arms-inspects\", type: TYPES.AWO, abbrLabel: \"Inspects Arms\", label: \"Inspects upper extremities\" },\n                { id: \"assess-option-arms-inspects-bilaterally\", type: TYPES.ASSESS_OPTION, abbrLabel: \"Bilaterally\",     label: \"Inspects upper extremities bilaterally\",        promptID: \"assessment-with-options-arms-inspects\" },\n                { id: \"assess-option-arms-inspects-left-only\",   type: TYPES.ASSESS_OPTION, abbrLabel: \"Left side only\",  label: \"Inspects upper extremities on left side only\",  promptID: \"assessment-with-options-arms-inspects\" },\n                { id: \"assess-option-arms-inspects-right-only\",  type: TYPES.ASSESS_OPTION, abbrLabel: \"Right side only\", label: \"Inspects upper extremities on right side only\", promptID: \"assessment-with-options-arms-inspects\" },\n            { id: \"assessment-with-options-arms-motor-function\", type: TYPES.AWO, abbrLabel: \"Arms Motor Func.\", label: \"Assesses motor function\" },\n                { id: \"assess-option-arms-motor-function-bilaterally\", type: TYPES.ASSESS_OPTION, abbrLabel: \"Bilaterally\",     label: \"Assesses upper extremities motor function bilaterally\",        promptID: \"assessment-with-options-arms-motor-function\" },\n                { id: \"assess-option-arms-motor-function-left-only\",   type: TYPES.ASSESS_OPTION, abbrLabel: \"Left side only\",  label:  \"Asessess upper extremities motor function on left side only\", promptID: \"assessment-with-options-arms-motor-function\" },\n                { id: \"assess-option-arms-motor-function-right-only\",  type: TYPES.ASSESS_OPTION, abbrLabel: \"Right side only\", label: \"Asessess upper extremities motor function on right side only\", promptID: \"assessment-with-options-arms-motor-function\" },\n            { id: \"assessment-with-options-arms-sensory-function\", type: TYPES.AWO, abbrLabel: \"Arms Sensory Func.\", label: \"Assesses sensory function\" },\n                { id: \"assess-option-arms-sensory-function-bilaterally\", type: TYPES.ASSESS_OPTION, abbrLabel: \"Bilaterally\",     label: \"Assesses upper extremities sensory function bilaterally\",        promptID: \"assessment-with-options-arms-sensory-function\" },\n                { id: \"assess-option-arms-sensory-function-left-only\",   type: TYPES.ASSESS_OPTION, abbrLabel: \"Left side only\",  label: \"Asessess upper extremities sensory function on left side only\",  promptID: \"assessment-with-options-arms-sensory-function\" },\n                { id: \"assess-option-arms-sensory-function-right-only\",  type: TYPES.ASSESS_OPTION, abbrLabel: \"Right side only\", label: \"Asessess upper extremities sensory function on right side only\", promptID: \"assessment-with-options-arms-sensory-function\" },\n            { id: \"assessment-with-options-arms-pulse\", type: TYPES.AWO, abbrLabel: \"Arms Pulse\", label: \"Checks pulse\" },\n                { id: \"assess-option-arms-pulse-bilaterally\", type: TYPES.ASSESS_OPTION, abbrLabel: \"Bilaterally\",     label: \"Assesses upper extremities pulse bilaterally\",        promptID: \"assessment-with-options-arms-pulse\" },\n                { id: \"assess-option-arms-pulse-left-only\",   type: TYPES.ASSESS_OPTION, abbrLabel: \"Left side only\",  label: \"Asessess upper extremities pulse on left side only\",  promptID: \"assessment-with-options-arms-pulse\" },\n                { id: \"assess-option-arms-pulse-right-only\",  type: TYPES.ASSESS_OPTION, abbrLabel: \"Right side only\", label: \"Asessess upper extremities pulse on right side only\", promptID: \"assessment-with-options-arms-pulse\" },\n\n        { id: \"posterior\", type: TYPES.SUB_PHASE, label: \"Posterior\", verboseLabel: \"Posterior thorax, lumbar, and buttocks\" },\n            { id: \"assess-posterior-inspects\", type: TYPES.ASSESS, label: \"Inspects posterior thorax, lumbar, buttocks\", abbrLabel: \"Inspects Posterior\" },\n            { id: \"assess-palpate-posterior-thorax\", type: TYPES.ASSESS, label: \"Palpates posterior thorax/lumbar/buttocks\", abbrLabel: \"Palpate Posterior/Thorax\" },\n\n        { id: \"cardiac-monitoring\", type: TYPES.SUB_PHASE, label: \"Cardiac Monitoring\" },\n            { id: \"assess-cardiac-monitoring\", type: TYPES.ASSESS, label: \"Performs cardiac monitoring\", abbrLabel: \"Cardiac Monitoring\" },\n\n    // { id: \"heading-transfer-patient\", type: TYPES.PHASE, label: \"Transfer Patient\" },\n\n        { id: \"ongoing-mgmt-plan\", type: TYPES.PHASE, label: \"Ongoing Reassessment\" },\n            { id: \"repeat-primary-survey\", type: TYPES.SUB_PHASE, label: \"Repeat Primary Survey\" },\n                { id: \"required-action-reassess-loc\", type: TYPES.REQUIRED, label: \"Reassess level of conciousness\" },\n                { id: \"required-action-reassess-airway\", type: TYPES.REQUIRED, label: \"Reassess airway\" },\n                { id: \"required-action-reassess-breathing\", type: TYPES.REQUIRED, label: \"Reassess breathing\" },\n                { id: \"required-action-reassess-circulation\", type: TYPES.REQUIRED, label: \"Reassess circulation\" },\n\n            { id: \"repeat-secondary-survey\", type: TYPES.SUB_PHASE, label: \"Repeat Secondary Survey\" },\n                { id: \"required-action-reassess-vital-signs\", type: TYPES.REQUIRED, label: \"Reassess vital signs\" },\n                { id: \"required-action-reassess-head-to-toe\", type: TYPES.REQUIRED, label: \"Repeat rapid head-to-toe assessment\" },\n            { id: \"contact-facility\", type: TYPES.SUB_PHASE, label: \"Contact facility\" },\n                { id: \"required-action-radio-receiving-facility\", type: TYPES.REQUIRED, label: \"Radio report to receiving facility\" },\n]\n\n\nexport const INTV_META_DATA = [\n\n    { id: \"prompt-set-iv-details\", type: TYPES.PROMPT_SET},\n        { id: \"prompt-num-ivs\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"How many IVs would you establish?\", promptSetID: \"prompt-set-iv-details\"},\n            { id: \"answer-num-ivs-one\", type: TYPES.ANSWER, label: \"one\", promptID: \"prompt-num-ivs\"},\n            { id: \"answer-num-ivs-two\", type: TYPES.ANSWER, label: \"two\", promptID: \"prompt-num-ivs\" },\n            { id: \"answer-num-ivs-other\", type: TYPES.ANSWER, label: \"Other\", promptID: \"prompt-num-ivs\" },\n        { id: \"prompt-iv-size\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"What size IV?\", promptSetID: \"prompt-set-iv-details\" },\n            { id: \"answer-iv-size-large-as-possible\", type: TYPES.ANSWER, label: \"As large as possible\", promptID: \"prompt-iv-size\" },\n            { id: \"answer-iv-size-other\", type: TYPES.ANSWER, label: \"Other\", promptID: \"prompt-iv-size\" },\n\n    { id: \"prompt-set-orotracheal-intubation-details\", type: TYPES.PROMPT_SET },\n        { id: \"prompt-intubation-tube-size\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"What size tube would you use?\", promptSetID: \"prompt-set-orotracheal-intubation-details\" },\n            { id: \"answer-intubation-tube-size-option-1\", type: TYPES.ANSWER, label: \"scenario-specific-option\", promptID: \"prompt-intubation-tube-size\" },\n            { id: \"answer-intubation-tube-size-other\", type: TYPES.ANSWER, label: \"Other\", promptID: \"prompt-intubation-tube-size\" },\n        { id: \"prompt-intubation-confirm-correct-tube-placement\", type: TYPES.PROMPT, selectionType: ST.OOM, label: \"What techniques will you use to confirm correct tube placement?\", promptSetID: \"prompt-set-orotracheal-intubation-details\" },\n            { id: \"answer-inspect-tube-location\", type: TYPES.ANSWER, label: \"Inspect tube location\", promptID: \"prompt-intubation-confirm-correct-tube-placement\" },\n            { id: \"answer-co2-capnography\", type: TYPES.ANSWER, label: \"CO2 capnography\", promptID: \"prompt-intubation-confirm-correct-tube-placement\" },\n            { id: \"answer-auscultate-epigastrium\", type: TYPES.ANSWER, label: \"Auscultate bilaterally and over epigastrium\", promptID: \"prompt-intubation-confirm-correct-tube-placement\" },\n            { id: \"answer-check-oxygen-saturation\", type: TYPES.ANSWER, label: \"Check oxygen saturation\", promptID: \"prompt-intubation-confirm-correct-tube-placement\" },\n\n    { id: \"intv-open-airway-method-head-tilt\", type: TYPES.INTERV, system: SYS.AW, label: \"Head tilt\"  },\n    { id: \"intv-open-airway-method-jaw-thrust\", type: TYPES.INTERV, system: SYS.AW, label: \"Jaw thrust\" },\n    { id: \"intv-open-airway-method-modified-jaw-thrust\", type: TYPES.INTERV, system: SYS.AW, label: \"Modified jaw thrust\" },\n    { id: \"intv-open-airway-method-other\", type: TYPES.INTERV, system: SYS.AW, label: \"Other\" },\n\n    { id: \"intv-airway-patency-technique-suction-airway\", type: TYPES.INTERV, system: SYS.AW, label: \"Suction airway\" },\n\n        { id: \"prompt-set-airway-patency-suction\", type: TYPES.PROMPT_SET },\n            { id: \"prompt-airway-patency-suction-device\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"What kind of suction catheter will you use?\", promptSetID: \"prompt-set-airway-patency-suction\" },\n                { id: \"answer-airway-patency-suction-yankauer\", type: TYPES.ANSWER, label: \"Yankauer\", promptID: \"prompt-airway-patency-suction-device\" },\n                { id: \"answer-airway-patency-suction-long-multiuse\", type: TYPES.ANSWER, label: \"Long, multiuse\", promptID: \"prompt-airway-patency-suction-device\" },\n                { id: \"answer-airway-patency-suction-other\", type: TYPES.ANSWER, label: \"Other\", promptID: \"prompt-airway-patency-suction-device\" },\n\n{ id: \"intv-airway-patency-technique-remove-foreign-body-obstructions\", type: TYPES.INTERV, system: SYS.AW, label: \"Remove foreign body obstructions\" },\n    { id: \"prompt-set-airway-patency-remove-foreign-body-obstructions\", type: TYPES.PROMPT_SET },\n        { id: \"prompt-airway-patency-remove-foreign-body-obstructions-technique\", type: TYPES.PROMPT, selectionType: ST.OOM, label: \"What technique(s) will you try, and in what order?\", promptSetID: \"prompt-set-airway-patency-remove-foreign-body-obstructions\" },\n            { id: \"answer-airway-patency-remove-foreign-body-obstructions-technique-manual\", type: TYPES.ANSWER, label: \"Manual (finger sweep)\", promptID: \"prompt-airway-patency-remove-foreign-body-obstructions-technique\" },\n            { id: \"answer-airway-patency-remove-foreign-body-obstructions-technique-magill-forceps\", type: TYPES.ANSWER, label: \"Magill forceps assisted\", promptID: \"prompt-airway-patency-remove-foreign-body-obstructions-technique\" },\n            { id: \"answer-airway-patency-remove-foreign-body-obstructions-technique-slat\", type: TYPES.ANSWER, label: \"SLAT\", promptID: \"prompt-airway-patency-remove-foreign-body-obstructions-technique\" },\n\n    { id: \"intv-oropharyngeal\", type: TYPES.INTERV, system: SYS.AW, label: \"Oropharyngeal adjunct\" },\n            { id: \"prompt-set-when-naso-vs-oro\", type: TYPES.PROMPT_SET },\n                { id: \"prompt-when-naso-vs-oro\", type: TYPES.PROMPT, selectionType: ST.OOM, label: \"When would you use a nasopharyngeal airway instead of an oropharyngeal airway?\", promptSetID: \"prompt-set-when-naso-vs-oro\" },\n                    { id: \"answer-use-naso-when-gag-reflex\", type: TYPES.ANSWER, label: \"When patient has a gag reflex\", promptID: \"prompt-when-naso-vs-oro\" },\n                    { id: \"answer-use-naso-when-no-gag-reflex-but-no-opa\", type: TYPES.ANSWER, label: \"When patient doesn't have a gag reflex but doesn't accept OPA\", promptID: \"prompt-when-naso-vs-oro\" },\n                    { id: \"answer-use-naso-when-no-facial-trauma\", type: TYPES.ANSWER, label: \"When patient does not have facial trauma\", promptID: \"prompt-when-naso-vs-oro\" },\n                    { id: \"answer-use-naso-when-other\", type: TYPES.ANSWER, label: \"Other\", promptID: \"prompt-when-naso-vs-oro\" },\n\n    { id: \"intv-nasopharyngeal\", type: TYPES.INTERV, system: SYS.AW, label: \"Nasopharyngeal adjunct\" },\n        { id: \"prompt-set-when-oro-vs-naso\", type: TYPES.PROMPT_SET },\n            { id: \"prompt-when-oro-vs-naso\", type: TYPES.PROMPT, selectionType: ST.OOM, label: \"When would you use a oropharyngeal airway instead of an nasopharyngeal airway?\", promptSetID: \"prompt-set-when-oro-vs-naso\" },\n                { id: \"answer-use-oro-when-no-gag-reflex\", type: TYPES.ANSWER, label: \"When patient does not have a gag reflex\", promptID: \"prompt-when-oro-vs-naso\" },\n                { id: \"answer-use-oro-when-other\", type: TYPES.ANSWER, label: \"Other\", promptID: \"prompt-when-oro-vs-naso\" },\n\n    // als patency interventions\n    { id: \"intv-airway-patency-technique-cricothyrotomy\", type: TYPES.INTERV, system: SYS.AW, label: \"Perform cricothyrotomy\" },\n        { id: \"prompt-set-airway-patency-cricothyrotomy\", type: TYPES.PROMPT_SET },\n            { id: \"prompt-cricothyrotomy-type\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"Which type?\", promptSetID: \"prompt-set-airway-patency-cricothyrotomy\" },\n                { id: \"answer-cricothyrotomy-type-percutaneous\", type: TYPES.ANSWER, label: \"Percutaneous\", promptID: \"prompt-cricothyrotomy-type\" },\n                { id: \"answer-cricothyrotomy-type-surgical\", type: TYPES.ANSWER, label: \"Surgical\", promptID: \"prompt-cricothyrotomy-type\" },\n\n    { id: \"intv-supraglottic\", type: TYPES.INTERV, system: SYS.AW, label: \"Supraglottic\" },\n    // als intubation\n    { id: \"intv-orotracheal-intubation-type-direct\", type: TYPES.INTERV, system: SYS.AW, label: \"Direct\" },\n    // { id: \"intv-orotracheal-intubation-type-gum-elastic-bougie-assisted\", type: TYPES.INTERV, system: SYS.AW, label: \"Gum elastic bougie-assisted\" },\n    // { id: \"intv-orotracheal-intubation-type-video-laryngoscopy\", type: TYPES.INTERV, system: SYS.AW, label: \"Video laryngoscopy\"  },\n    { id: \"intv-orotracheal-intubation-type-medication-facilitated\", type: TYPES.INTERV, system: SYS.AW, label: \"Medication Facilitated\"  },\n        { id: \"prompt-set-orotracheal-intubation-type-medication-facilitated\", type: TYPES.PROMPT_SET },\n            { id: \"prompt-sedated-intubation-medication\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"What medication would you administer?\", promptSetID: \"prompt-set-orotracheal-intubation-type-medication-facilitated\" },\n                { id: \"answer-sedated-intubation-medication-etomidate\", type: TYPES.ANSWER, label: \"Etomidate\", promptID: \"prompt-sedated-intubation-medication\" },\n                { id: \"answer-sedated-intubation-medication-other\", type: TYPES.ANSWER, label: \"Other\", promptID: \"prompt-sedated-intubation-medication\" },\n        // { id: \"prompt-sedated-intubation-dosage\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"What dose?\", promptSetID: \"prompt-set-orotracheal-intubation-type-medication-facilitated\" },\n        //     { id: \"answer-sedated-intubation-dosage-less\", type: TYPES.ANSWER, label: \"less\", promptID: \"prompt-sedated-intubation-dosage\" },\n        //     { id: \"answer-sedated-intubation-dosage-correct\", type: TYPES.ANSWER, label: \"correct dosage\", promptID: \"prompt-sedated-intubation-dosage\" },\n        //     { id: \"answer-sedated-intubation-dosage-more\", type: TYPES.ANSWER, label: \"more\", promptID: \"prompt-sedated-intubation-dosage\" },\n\n\n\n    { id: \"intv-ventilation-technique-bag-valve-mask\", type: TYPES.INTERV, system: SYS.BR, label: \"Bag-valve mask\" },\n    { id: \"intv-ventilation-technique-automatic-transport-ventilator\", type: TYPES.INTERV, system: SYS.BR, label: \"Automatic transport ventilator\" },\n\n\n    { id: \"prompt-set-ventilation-rate\", type: TYPES.PROMPT_SET },\n        { id: \"prompt-ventilation-rate\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"At what rate will you ventilate the patient?\", promptSetID: \"prompt-set-ventilation-rate\" },\n            { id: \"answer-ventilation-rate-10-12-bpm\", type: TYPES.ANSWER, label: \"10-12 breaths/minute\", promptID: \"prompt-ventilation-rate\" },\n            { id: \"answer-ventilation-rate-other\", type: TYPES.ANSWER, label: \"Other\", promptID: \"prompt-ventilation-rate\" },\n\n    { id: \"intv-oxygen-therapy-device-non-rebreather-mask\", type: TYPES.INTERV, system: SYS.BR, label: \"Non-rebreather mask\" },\n    { id: \"intv-oxygen-therapy-device-nasal-cannula\", type: TYPES.INTERV, system: SYS.BR, label: \"Nasal cannula\" },\n\n    { id: \"prompt-set-oxygen-therapy-details\", type: TYPES.PROMPT_SET },\n        { id: \"prompt-oxygen-therapy-flow-rate\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"Oxygen flow rate?\", promptSetID: \"prompt-set-oxygen-therapy-details\" },\n            { id: \"answer-oxygen-therapy-flow-rate-2-6-lpm\", type: TYPES.ANSWER, label: \"2-6 liters/min\", promptID: \"prompt-oxygen-therapy-flow-rate\" },\n            { id: \"answer-oxygen-therapy-flow-rate-15-lpm\", type: TYPES.ANSWER, label: \"15 liters/min\", promptID: \"prompt-oxygen-therapy-flow-rate\" },\n            { id: \"answer-oxygen-therapy-flow-rate-other\", type: TYPES.ANSWER, label: \"Other\", promptID: \"prompt-oxygen-therapy-flow-rate\" },\n        { id: \"prompt-oxygen-therapy-target-saturation\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"What is your target oxygen saturation range?\", promptSetID: \"prompt-set-oxygen-therapy-details\" },\n            { id: \"answer-oxygen-therapy-target-saturation-94-or-greater\", type: TYPES.ANSWER, label: \"94 or greater\", promptID: \"prompt-oxygen-therapy-target-saturation\" },\n            { id: \"answer-oxygen-therapy-target-saturation-other\", type: TYPES.ANSWER, label: \"Other\", promptID: \"prompt-oxygen-therapy-target-saturation\" },\n\n\n    { id: \"intv-occlusive-dressing\", type: TYPES.INTERV, system: SYS.BR, label: \"Occlusive dressing\" },\n        { id: \"prompt-set-occlusive-dressing\", type: TYPES.PROMPT_SET },\n            { id: \"prompt-occlusive-dressing-method\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"How would you create a release valve on an occlusive dressing?\", promptSetID: \"prompt-set-occlusive-dressing\" },\n                { id: \"answer-occulative-dressing-method-leave-one-side-untaped\", type: TYPES.ANSWER, label: \"Leave one side untaped\", promptID: \"prompt-occlusive-dressing-method\" },\n                { id: \"answer-occulative-dressing-method-other\", type: TYPES.ANSWER, label: \"Other\", promptID: \"prompt-occlusive-dressing-method\" },\n\n    { id: \"intv-pleural-decompression\", type: TYPES.INTERV, system: SYS.BR, label: \"Pleural decompression\" },\n        { id: \"prompt-set-pleural-decompression\", type: TYPES.PROMPT_SET, label: \"Pleural decompression\" },\n            { id: \"prompt-pleural-decompression-needle-placement-side-of-the-body\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"On which side of the body would you place the needle?\", promptSetID: \"prompt-set-pleural-decompression\" },\n                { id: \"answer-pleural-decompression-needle-placement-side-of-the-body-right\", type: TYPES.ANSWER, label: \"Right\", promptID: \"prompt-pleural-decompression-needle-placement-side-of-the-body\" },\n                { id: \"answer-pleural-decompression-needle-placement-side-of-the-body-left\", type: TYPES.ANSWER, label: \"Left\", promptID: \"prompt-pleural-decompression-needle-placement-side-of-the-body\" },\n            { id: \"prompt-pleural-decompression-needle-placement-anatomical-landmark\", type: TYPES.PROMPT, selectionType: ST.OOM, label: \"At what anatomical landmark?\", promptSetID: \"prompt-set-pleural-decompression\" },\n                { id: \"answer-pleural-decompression-needle-placement-anatomical-landmark-2nd-intercostal-space-mid-clavicular\", type: TYPES.ANSWER, label: \"Second intercostal space mid-clavicular\", promptID: \"prompt-pleural-decompression-needle-placement-anatomical-landmark\" },\n                { id: \"answer-pleural-decompression-needle-placement-anatomical-landmark-4th-5th-intercostal-space\", type: TYPES.ANSWER, label: \"Fourth/fifth intercostal space\", promptID: \"prompt-pleural-decompression-needle-placement-anatomical-landmark\" },\n                { id: \"answer-pleural-decompression-needle-placement-anatomical-landmark-other\", type: TYPES.ANSWER, label: \"Other\", promptID: \"prompt-pleural-decompression-needle-placement-anatomical-landmark\" },\n            { id: \"prompt-pleural-decompression-needle-size\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"What size needle do you want to use?\", promptSetID: \"prompt-set-pleural-decompression\" },\n                { id: \"answer-pleural-decompression-needle-size-correct\", type: TYPES.ANSWER, label: \"Correct answer\", promptID: \"prompt-pleural-decompression-needle-size\" },\n                { id: \"answer-pleural-decompression-needle-size-other\", type: TYPES.ANSWER, label: \"Other\", promptID: \"prompt-pleural-decompression-needle-size\" },\n\n\n    { id: \"intv-control-severe-bleeding-technique-direct-pressure\", type: TYPES.INTERV, system: SYS.BL, label: \"Apply direct pressure\" },\n    { id: \"intv-control-severe-bleeding-technique-tourniquet\", type: TYPES.INTERV, system: SYS.BL, label: \"Apply tourniquet\" },\n    { id: \"intv-control-severe-bleeding-technique-2nd-tourniquet\", type: TYPES.INTERV, system: SYS.BL, label: \"Apply second tourniquet\" },\n    { id: \"intv-control-severe-bleeding-technique-pressure-bandage\", type: TYPES.INTERV, system: SYS.BL, label: \"Apply pressure bandage\" },\n    { id: \"intv-control-severe-bleeding-technique-hemostatic-gauze\", type: TYPES.INTERV, system: SYS.BL, label: \"Apply hemostatic gauze\" },\n    { id: \"intv-control-severe-bleeding-technique-pack-wound-with-gauze\", type: TYPES.INTERV, system: SYS.BL, label: \"Pack wound with gauze\" },\n    { id: \"intv-control-severe-bleeding-technique-load-and-go\", type: TYPES.INTERV, system: SYS.BL, label: \"Load and go (if uncontrolled)\" },\n\n    { id: \"prompt-set-tourniquet\", type: TYPES.PROMPT_SET },\n        { id: \"prompt-tourniquet-placement\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"Where would you place the tourniquet?\", promptSetID: \"prompt-set-tourniquet\" },\n            { id: \"answer-tourniquet-placement-close-to-core-far-from-wound\", type: TYPES.ANSWER, label: \"As far from wound and close to the core as possible\", promptID: \"prompt-tourniquet-placement\" },\n            { id: \"answer-tourniquet-placement-other\", type: TYPES.ANSWER, label: \"Other\", promptID: \"prompt-tourniquet-placement\" },\n        { id: \"prompt-tourniquet-stop-tightening-when\", type: TYPES.PROMPT, selectionType: ST.OOM, label: \"When do you know when to stop tightening the tourniquet?\", promptSetID: \"prompt-set-tourniquet\" },\n            { id: \"answer-tourniquet-stop-tightening-when-bleeding-has-stopped\", type: TYPES.ANSWER, label: \"When bleeding has stopped\", promptID: \"prompt-tourniquet-stop-tightening-when\" },\n            { id: \"answer-tourniquet-stop-tightening-when-distal-pulse-is-absent\", type: TYPES.ANSWER, label: \"When distal pulse is absent\", promptID: \"prompt-tourniquet-stop-tightening-when\" },\n            { id: \"answer-tourniquet-stop-tightening-when-other\", type: TYPES.ANSWER, label: \"Other\", promptID: \"prompt-tourniquet-stop-tightening-when\" },\n\n    { id: \"prompt-set-2nd-tourniquet\", type: TYPES.PROMPT_SET },\n        { id: \"prompt-2nd-tourniquet-placement\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"Where would you place the 2nd tourniquet?\", promptSetID: \"prompt-set-2nd-tourniquet\" },\n            { id: \"answer-2nd-tourniquet-placement-adjacent-to-initial-tourniquet\", type: TYPES.ANSWER, label: \"Adjacent to initial tourniquet\", promptID: \"prompt-2nd-tourniquet-placement\" },\n            { id: \"answer-2nd-tourniquet-placement-other\", type: TYPES.ANSWER, label: \"Other\", promptID: \"prompt-2nd-tourniquet-placement\" },\n\n\n    { id: \"intv-control-shock-technique-keep-patient-warm\", type: TYPES.INTERV, system: SYS.SH, label: \"Keep patient warm (e.g., apply blankets)\" },\n    { id: \"intv-control-shock-technique-administer-high-concentration-o2\", type: TYPES.INTERV, system: SYS.SH, label: \"Administer high concentration of oxygen\" },\n    { id: \"intv-control-shock-technique-place-patient-supine-position\", type: TYPES.INTERV, system: SYS.SH, label: \"Place or maintain patient in supine position\" },\n    { id: \"intv-control-shock-technique-administer-iv-boluses\", type: TYPES.INTERV, system: SYS.SH, label: \"Administer IV fluid resuscitation\" },\n\n    { id: \"prompt-set-control-shock-technique-administer-iv-boluses\", type: TYPES.PROMPT_SET },\n        { id: \"prompt-control-shock-iv-fluid\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"What type of fluid?\", promptSetID: \"prompt-set-control-shock-technique-administer-iv-boluses\" },\n            { id: \"answer-control-shock-iv-fluid-saline\", type: TYPES.ANSWER, label: \"Normal saline\", promptID: \"prompt-control-shock-iv-fluid\" },\n            { id: \"answer-control-shock-iv-fluid-other\", type: TYPES.ANSWER, label: \"Other\", promptID: \"prompt-control-shock-iv-fluid\" },\n        { id: \"prompt-control-shock-iv-volume\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"At what volume?\", promptSetID: \"prompt-set-control-shock-technique-administer-iv-boluses\" },\n            { id: \"answer-control-shock-iv-volume-20-cc-per-kilo\", type: TYPES.ANSWER, label: \"20 cc/kilo\", promptID: \"prompt-control-shock-iv-volume\" },\n            { id: \"answer-control-shock-iv-volume-other\", type: TYPES.ANSWER, label: \"Other\", promptID: \"prompt-control-shock-iv-volume\" },\n        { id: \"prompt-control-shock-iv-target-bp\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"What is your target BP?\", promptSetID: \"prompt-set-control-shock-technique-administer-iv-boluses\" },\n            { id: \"answer-control-shock-iv-target-bp-80-90\", type: TYPES.ANSWER, label: \"SBP 80-90, if bleeding is controlled\", promptID: \"prompt-control-shock-iv-target-bp\" },\n            { id: \"answer-control-shock-iv-target-bp-other\", type: TYPES.ANSWER, label: \"Other\", promptID: \"prompt-control-shock-iv-target-bp\" },\n\n    { id: \"intv-transport-is-load-and-go\", type: TYPES.INTERV, label: \"determines whether this is a load and go patient\" },\n    { id: \"prompt-set-transport-decisions\", type: TYPES.PROMPT_SET },\n        { id: \"prompt-transport-is-load-and-go\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"Is this a “load and go” patient?\", promptSetID: \"prompt-set-transport-decisions\" },\n            { id: \"answer-transport-is-load-and-go-yes\", type: TYPES.ANSWER, label: \"Yes\", promptID: \"prompt-transport-is-load-and-go\" },\n            { id: \"answer-transport-is-load-and-go-no\", type: TYPES.ANSWER, label: \"No\", promptID: \"prompt-transport-is-load-and-go\" },\n        { id: \"prompt-transport-facility-choice\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"What care facility will you transport the patient to?\", promptSetID: \"prompt-set-transport-decisions\" },\n            { id: \"answer-transport-facility-choice-trauma-center\", type: TYPES.ANSWER, label: \"Trauma center\", promptID: \"prompt-transport-facility-choice\" },\n            { id: \"answer-transport-facility-choice-closest\", type: TYPES.ANSWER, label: \"Closest receiving facility\", promptID: \"prompt-transport-facility-choice\" },\n            { id: \"answer-transport-facility-choice-other\", type: TYPES.ANSWER, label: \"Other\", promptID: \"prompt-transport-facility-choice\" },\n        { id: \"prompt-transport-method\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"Would you transport this patient by air or ground?\", promptSetID: \"prompt-set-transport-decisions\" },\n            { id: \"answer-transport-method-ambulance\", type: TYPES.ANSWER, label: \"Ambulance\", promptID: \"prompt-transport-method\" },\n            { id: \"answer-transport-method-helicopter\", type: TYPES.ANSWER, label: \"Helicopter\", promptID: \"prompt-transport-method\" },\n        { id: \"prompt-transport-lights-siren-decision\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"Would you use lights and sirens with this patient?\", promptSetID: \"prompt-set-transport-decisions\" },\n            { id: \"answer-transport-lights-sirens-yes\", type: TYPES.ANSWER, label: \"Yes\", promptID: \"prompt-transport-lights-siren-decision\" },\n            { id: \"answer-transport-lights-sirens-no\", type: TYPES.ANSWER, label: \"No\", promptID: \"prompt-transport-lights-siren-decision\" },\n\n    { id: \"intv-spinal-immobilization-technique-manual-c-spine\", type: TYPES.INTERV, label: \"Manual c-spine stabilization\" },\n    { id: \"intv-spinal-immobilization-technique-ked\", type: TYPES.INTERV, label: \"Seated spinal motion restriction (KED)\" },\n    { id: \"intv-spinal-immobilization-technique-lbb\", type: TYPES.INTERV, label: \"Supine long back board (LBB)\" },\n    { id: \"intv-spinal-immobilization-technique-cervical-collar\", type: TYPES.INTERV, label: \"Cervical collar\" },\n    { id: \"intv-spinal-immobilization-technique-blocks\", type: TYPES.INTERV, label: \"Cervical immobilization device (blocks)\" },\n\n    { id: \"intv-manage-secondary-injuries-technique-apply-dressings\", type: TYPES.INTERV, label: \"Apply dressings\" },\n    { id: \"intv-manage-secondary-injuries-technique-splint-fractures\", type: TYPES.INTERV, label: \"Splint fractures\" },\n    { id: \"intv-manage-secondary-injuries-technique-other\", type: TYPES.INTERV, label: \"Other\" },\n\n    { id: \"intv-transfers-patient-method-walk-patient\", type: TYPES.INTERV, label: \"Walk patient to ambulance\" },\n    { id: \"intv-transfers-patient-method-scoop-stretcher\", type: TYPES.INTERV, label: \"Use scoop stretcher\" },\n    { id: \"intv-transfers-patient-method-transfer-to-stretcher-on-long-backboard\", type: TYPES.INTERV, label: \"Transfer to stretcher on long backboard\" },\n    { id: \"intv-transfers-patient-method-other\", type: TYPES.INTERV, label: \"Other\" },\n\n\n\n    { id: \"intv-reassess-vital-signs\", type: TYPES.INTERV, label: \"Reassess vital signs\" },\n    { id: \"intv-replace-basic-airway-with-advanced-or-intubate\", type: TYPES.INTERV, label: \"Replace basic airway with advanced airway, or intubate\" },\n    { id: \"intv-replace-bandages\", type: TYPES.INTERV, label: \"Replace bandages\" },\n    { id: \"intv-replace-oxygen-tank\", type: TYPES.INTERV, label: \"Replace oxygen tank\" },\n    { id: \"intv-adjust-iv-replace-bolus\", type: TYPES.INTERV, label: \"Adjust IV, hang second bag\" },\n    { id: \"intv-turn-on-heat-in-ambulance\", type: TYPES.INTERV, label: \"Turn on heat in ambulance\" },\n    // { id: \"intv-reassess-modify-interventions-other-options\", type: TYPES.INTERV, label: \"other-options\" },\n\n    { id: \"prompt-set-reassess-vital-signs\", type: TYPES.PROMPT_SET },\n        { id: \"prompt-reassess-vital-signs-frequency\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"How often will you reassess vitals?\", promptSetID: \"prompt-set-reassess-vital-signs\" },\n            { id: \"answer-reassess-vital-signs-frequency-5-min\", type: TYPES.ANSWER, label: \"Every 5 minutes\", promptID: \"prompt-reassess-vital-signs-frequency\" },\n            { id: \"answer-reassess-vital-signs-frequency-15-min\", type: TYPES.ANSWER, label: \"Every 15 minutes\", promptID: \"prompt-reassess-vital-signs-frequency\" },\n            { id: \"answer-reassess-vital-signs-frequency-other\", type: TYPES.ANSWER, label: \"Other\", promptID: \"prompt-reassess-vital-signs-frequency\" },\n        { id: \"prompt-reassess-vital-signs-which-vitals\", type: TYPES.PROMPT, selectionType: ST.NONE, label: \"Which vitals would you like to reassess?\", promptSetID: \"prompt-set-reassess-vital-signs\" },\n\n    { id: \"intv-establish-ivs\", type: TYPES.INTERV, label: \"Establish IVs\" },\n    { id: \"intv-apply-bandages\", type: TYPES.INTERV, label: \"Apply bandages\" },\n\n    // { id: \"intv-pain-management-medication-fentanyl\", type: TYPES.INTERV, label: \"Fentanyl\" },\n    // { id: \"intv-pain-management-medication-morphine\", type: TYPES.INTERV, label: \"Morphine\" },\n    // { id: \"intv-pain-management-medication-other\", type: TYPES.INTERV, label: \"Other\" },\n\n    // { id: \"prompt-set-pain-management-fentanyl-details\", type: TYPES.PROMPT_SET },\n    //     { id: \"prompt-pain-management-medication-fentanyl-dosage\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"What dosage?\", promptSetID: \"prompt-set-pain-management-fentanyl-details\" },\n    //         { id: \"answer-pain-management-fentanyl-dosage-less\", type: TYPES.ANSWER, label: \"Lower dosage\", promptID: \"prompt-pain-management-medication-fentanyl-dosage\" },\n    //         { id: \"answer-pain-management-fentanyl-dosage-correct\", type: TYPES.ANSWER, label: \"scenario.fentanylDosage\", promptID: \"prompt-pain-management-medication-fentanyl-dosage\" },\n    //         { id: \"answer-pain-management-fentanyl-dosage-more\", type: TYPES.ANSWER, label: \"Higher dosage\", promptID: \"prompt-pain-management-medication-fentanyl-dosage\" },\n\n    // { id: \"prompt-set-pain-management-morphine-details\", type: TYPES.PROMPT_SET },\n    //     { id: \"prompt-pain-management-medication-morphine-dosage\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"What dosage?\", promptSetID: \"prompt-set-pain-management-morphine-details\" },\n    //         { id: \"answer-pain-management-morphine-dosage-less\", type: TYPES.ANSWER, label: \"Lower dosage\", promptID: \"prompt-pain-management-medication-morphine-dosage\" },\n    //         { id: \"answer-pain-management-morphine-dosage-correct\", type: TYPES.ANSWER, label: \"scenario.morphineDosage\", promptID: \"prompt-pain-management-medication-morphine-dosage\" },\n    //         { id: \"answer-pain-management-morphine-dosage-more\", type: TYPES.ANSWER, label: \"Higher dosage\", promptID: \"prompt-pain-management-medication-morphine-dosage\" },\n\n    { id: \"prompt-set-manage-pain-details\", type: TYPES.PROMPT_SET },\n        { id: \"prompt-pain-management-medication-min-bp\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"What is the minimum BP to administer pain medications?\", promptSetID: \"prompt-set-manage-pain-details\" },\n            { id: \"answer-pain-management-medication-min-bp-correct\", type: TYPES.ANSWER, label: \"correct-answer\", promptID: \"prompt-pain-management-medication-min-bp\" },\n            { id: \"answer-pain-management-medication-min-bp-other\", type: TYPES.ANSWER, label: \"Other\", promptID: \"prompt-pain-management-medication-min-bp\" },\n        // { id: \"prompt-pain-management-medication-administration-route\", type: TYPES.PROMPT, selectionType: ST.OOM, label: \"How would you administer this medication--through what route?\", promptSetID: \"prompt-set-manage-pain-details\" },\n        //     { id: \"answer-pain-management-medication-administration-route-oral\", type: TYPES.ANSWER, label: \"Oral\", promptID: \"prompt-pain-management-medication-administration-route\"},\n        //     { id: \"answer-pain-management-medication-administration-route-intranasal\", type: TYPES.ANSWER, label: \"Intranasal\", promptID: \"prompt-pain-management-medication-administration-route\" },\n        //     { id: \"answer-pain-management-medication-administration-route-intraosseous\", type: TYPES.ANSWER, label: \"Intraosseous\", promptID: \"prompt-pain-management-medication-administration-route\" },\n        //     { id: \"answer-pain-management-medication-administration-route-intramuscular\", type: TYPES.ANSWER, label: \"Intramuscular\", promptID: \"prompt-pain-management-medication-administration-route\" },\n        //     { id: \"answer-pain-management-medication-administration-route-intravenous\", type: TYPES.ANSWER, label: \"Intravenous\", promptID: \"prompt-pain-management-medication-administration-route\" },\n\n]\n\nexport const MEDS = [\n    { id: \"acetaminophen\", label: \"Acetaminophen\" },\n    { id: \"aspirin\", label: \"Aspirin\" },\n    { id: \"diazepam\", label: \"Diazepam\" },\n    { id: \"etomidate\", label: \"Etomidate\" },\n    { id: \"fentanyl\", label: \"Fentanyl\" },\n    { id: \"ibuprofen\", label: \"Ibuprofen\" },\n    { id: \"ketamine\", label: \"Ketamine\" },\n    { id: \"ketorolac\", label: \"Ketorolac\" },\n    { id: \"lorazepam\", label: \"Lorazepam\" },\n    { id: \"midazolam\", label: \"Midazolam\" },\n    { id: \"morphineSulfate\", label: \"Morphine Sulfate\" },\n    { id: \"nitrousOxide\", label: \"Nitrous Oxide\" },\n    { id: \"ondansetron\", label: \"Ondansetron\" }\n]\n\nconst MED_PROMPT_TYPES = [\n    [\"initial\", \"dosage\"],\n    [\"repeat\", \"dosage\"],\n    [\"repeat\", \"frequency\"],\n    [\"max\", \"dosage\"]\n]\n\nconst MED_OPTIONS = [\"lower\", \"correct\", \"higher\"]\nconst MED_ADMINISTRATIVE_ROUTES = [\n    [\"oral\", \"Oral\"],\n    [\"iv\", \"IV\"],\n    [\"io\", \"IO\"],\n    [\"inhalation\", \"Inhalation\"],\n    [\"other\", \"Other\"]\n]\n\nconst titleCase = (txt) => {\n    return txt.charAt(0).toUpperCase() + txt.slice(1)\n}\n\nconst createRec = (data) => {\n    INTV_META_DATA.push(data)\n}\n\nconst mkMedPromptSet = (medID) => {\n    let promptSetID = `prompt-set-medication-${medID}`\n    let promptID\n    // prompt set for med dosages/frequencies\n    createRec(\n        { id: promptSetID, type: TYPES.PROMPT_SET }\n    )\n    MED_PROMPT_TYPES.forEach(rec => {\n        let [prompt, type] = rec\n        promptID = `prompt-${medID}-${prompt}-${type}`\n        createRec(\n            {id: promptID, type: TYPES.PROMPT, selectionType: ST.ONE, label: `${titleCase(prompt)} ${type}`, promptSetID: promptSetID}\n        )\n        MED_OPTIONS.forEach(option => {\n            let answerID = `answer-${medID}-${prompt}-${type}-${option}-${type}`\n            if(\"correct\" !== option) {\n                createRec(\n                    {id: answerID, type: TYPES.ANSWER, label: `${titleCase(option)} ${type}`, promptID: promptID}\n                )\n            } else {\n                createRec(\n                    { id: answerID, type: TYPES.ANSWER, label: `scenario.correctMedicationDosages.${medID}.${prompt}${titleCase(type)}`, promptID: promptID }\n                )\n            }\n        })\n    })\n    // prompt set for administrative-route\n    promptSetID = `prompt-set-${medID}-administration-route`\n    createRec(\n        { id: promptSetID, type: TYPES.PROMPT_SET}\n    )\n    promptID = `prompt-${medID}-administration-route`\n    createRec(\n        { id: promptID, type: TYPES.PROMPT, selectionType: ST.OOM, label: \"How would you administer this medication--through what route?\", promptSetID: promptSetID}\n    )\n    MED_ADMINISTRATIVE_ROUTES.forEach(rec => {\n        let [routeID, label] = rec\n        createRec(\n            {id: `answer-${medID}-administration-route-${routeID}`, type: TYPES.ANSWER, label: label, promptID}\n        )\n    })\n\n}\n\nconst genMedInterventionsAndPrompts = () => {\n    MEDS.forEach(med => {\n        createRec(\n            { id: `intv-medication-${med.id}`, type: TYPES.INTERV, label: med.label }\n        )\n        mkMedPromptSet(med.id)\n    })\n}\ngenMedInterventionsAndPrompts()\n","export const deepCopy = (object) => {\n    return JSON.parse(JSON.stringify(object))\n}\n\n// returns subset of records from array 'arr' whose type field matches 'type'\nexport const getRecsOfType = (arr, type) => {\n    return arr.filter(rec => rec.type === type)\n}\n\n// returns if any of the arrays passed to this have lengths > 0\n// perhaps this should be written as a non-1-liner for clarity\nexport const anyHaveValues = (...arrs) => {\n    return arrs.map((arr) => arr.length > 0).filter(val => val === true).length > 0\n}\n","\nimport {\n    MDB_TYPES as TYPES,\n    PREFIXES as PFX,\n    SELECTION_TYPES as ST,\n    SYSTEMS as SYS,\n    HEADING,\n} from \"./constants.js\"\n\n\nimport {\n    CHECKLIST_META_DATA,\n    INTV_META_DATA,\n    MEDS,\n} from \"./traumaScenarioV2MetaData.js\"\n\nimport { deepCopy, getRecsOfType, anyHaveValues } from \"./utils.js\"\n\n// exported constants (need to move more up here, but they are currently js literals)\nexport const INTV_FORMS = {}\n\n// non-exprted constants used within this file\nconst PHASES = getRecsOfType(CHECKLIST_META_DATA, TYPES.PHASE)\nconst SUBPHASES = getRecsOfType(CHECKLIST_META_DATA, TYPES.SUB_PHASE)\nconst ASSESSMENTS = getRecsOfType(CHECKLIST_META_DATA, TYPES.ASSESS)\nconst ASSESS_WITH_OPTIONS = getRecsOfType(CHECKLIST_META_DATA, TYPES.AWO)\nconst ASSESS_OPTIONS = getRecsOfType(CHECKLIST_META_DATA, TYPES.ASSESS_OPTION)\nconst REQ_ACTIONS = getRecsOfType(CHECKLIST_META_DATA, TYPES.REQURED)\nconst DECISIONS = getRecsOfType(CHECKLIST_META_DATA, TYPES.DECISION)\nconst DECISION_OPTIONS = getRecsOfType(CHECKLIST_META_DATA, TYPES.DECISION_OPTION)\nconst CL_PROMPTS = getRecsOfType(CHECKLIST_META_DATA, TYPES.CL_PROMPT)\n\nconst INTVS = getRecsOfType(INTV_META_DATA, TYPES.INTERV)\nconst PROMPT_SETS = getRecsOfType(INTV_META_DATA, TYPES.PROMPT_SET)\nconst PROMPTS = getRecsOfType(INTV_META_DATA, TYPES.PROMPT)\nconst ANSWERS = getRecsOfType(INTV_META_DATA, TYPES.ANSWER)\n\n\n//\n// functions for accessing meta-data\n//\n\n// looksup a record by id in CHECKLIST_META_DATA, and returns a subset of its fields\nconst getChecklistData = (id) => {\n    let retVal = {id,}\n    const metaData = CHECKLIST_META_DATA.find((rec) => rec.id === id)\n    if (metaData === undefined) {\n        throw(`getChecklistData() id: ${id} not found in CHECKLIST_META_DATA`)\n    }\n    retVal.type = metaData.type,\n    retVal.label = metaData.label\n\n    // for assessment-with-options and decision types, lookup other checklist\n    // items which have it's ID as their promptID and add them as an \"items\"\n    // attribute\n    if ([TYPES.AWO, TYPES.DECISION].includes(metaData.type)) {\n        retVal.items = CHECKLIST_META_DATA.filter(rec => rec.promptID === id)\n    }\n    return retVal\n}\n\n// returns an IDs label (if found in CHECKLIST_META_DATA)\nconst getLabel = (id) => {\n    const metaData = CHECKLIST_META_DATA.find((rec) => rec.id === id)\n    if (metaData === undefined) {\n        throw (`getLabel() id: ${id} not found in CHECKLIST_META_DATA`)\n    }\n    return metaData.label\n}\n\n// const getIntvLabel = (id) => {\n//     const metaData = INTV_META_DATA.find((rec) => rec.id === id)\n//     if (metaData === undefined) {\n//         throw (`getIntvLabel() id: ${id} not found in INTV_META_DATA`)\n//     }\n//     return metaData.label\n// }\n\nconst getIntvData = (id) => {\n    const metaData = INTV_META_DATA.find((rec) => rec.id === id)\n    if (metaData === undefined) {\n        throw (`getIntvData() id: ${id} not found in INTV_META_DATA`)\n    }\n    return metaData\n}\n\n\n\n// const getPromptSet = ({id, intervention, constraints = null, dataEntry = true}) => {\n//     let prompts = PROMPTS.filter((rec) => rec.promptSetID === id)\n//     prompts = prompts.map((prompt) => {\n//         let newPrompt = Object.assign({}, prompt)\n//         const options = ANSWERS.filter(rec => rec.promptID === prompt.id)\n//         newPrompt.options = options.map(opt => Object.assign(opt, {prompt: prompt.label}))\n//         newPrompt.dataEntry = dataEntry\n//         if (null !== constraints) {\n//             newPrompt.showConstraints = constraints\n//         }\n//         return newPrompt\n//     })\n//     return prompts\n// }\n\nconst expandPromptSetToPromptList = ({id, constraints = null, dataEntry = true}) => {\n    const prompts = PROMPTS.filter(rec => rec.promptSetID === id)\n    return prompts.map(prompt => {\n        const data = {\n            id: prompt.id,\n            dataEntry: dataEntry\n        }\n        if (!!constraints) {\n            data.showConstraints = constraints\n        }\n        return data\n    })\n}\n\nconst getSystemIntvs = (system) => {\n    return INTV_META_DATA.filter(rec => rec.type === TYPES.INTERV && rec.system === system)\n}\n\nconst getIntervention = (intvID, depth) => {\n    const obj = Object.assign({}, getIntvData(intvID), { depth: depth })\n    if (!!obj.system) {\n        delete obj.system\n    }\n    return obj\n}\n\n\n//\n// functions for generating derived data\n//\n\nconst createInterventionForm = ({ intv, prompts = [] }) => {\n    const data = Object.assign({}, getIntvData(intv))\n    data.prompts = []\n    // pass this intervention down so that it can be associatied with the options so we\n    // know the context of what intervention was being performed when that answe was selected\n        // prompts.forEach(prompt => data.prompts.push(...getPromptSet(prompt)))\n    prompts.forEach(prompt => data.prompts.push(...expandPromptSetToPromptList(prompt)))\n    INTV_FORMS[intv] = data\n}\n\n\n\nconst mkPhase = ({ phaseType, phase, id, items = [], subPhases = [], interventionsMenu = [], dataEntry = true }) => {\n    const headingID = (phaseType === TYPES.PHASE) ? `${PFX.PHASE}${id}` : `${PFX.SUB_PHASE}${id}`\n    let obj = getChecklistData(headingID)\n    obj.id = id\n    obj.type = phaseType\n    obj.dataEntry = dataEntry\n    if (subPhases.length && items.length) {\n        throw Error(`a ${phaseType} cannot have both subPhases AND checklist items`)\n    }\n    if (subPhases.length) {\n        obj.subPhases = subPhases.map(sp => {\n            let cld = getChecklistData(`${PFX.SUB_PHASE}${sp}`)\n            cld.id = sp\n            return cld\n        })\n    } else {\n        obj.items = items.map(it => {\n            let cld = Object.assign({}, getChecklistData(it), { phase: phase })\n            return cld\n        })\n    }\n    return obj\n}\n\nconst createPhase = ({ id, items = [], subPhases = [], interventionsMenu = [], dataEntry = true }) => {\n    return mkPhase({ phaseType: TYPES.PHASE, phase: id, id, items, subPhases, interventionsMenu, dataEntry })\n}\n\nconst createSubPhase = ({ id, phase, items = [], subPhases = [], interventionsMenu = [], dataEntry = true }) => {\n    return mkPhase({ phaseType: TYPES.SUB_PHASE, phase, id, items, subPhases, interventionsMenu, dataEntry })\n}\n\n\n// bls open-airway interventions\ncreateInterventionForm({ intv: \"intv-open-airway-method-head-tilt\" })\ncreateInterventionForm({ intv: \"intv-open-airway-method-jaw-thrust\" })\ncreateInterventionForm({ intv: \"intv-open-airway-method-modified-jaw-thrust\" })\ncreateInterventionForm({ intv: \"intv-open-airway-method-other\" })\n\n\n// bls establish airway patency interventions\ncreateInterventionForm({\n    intv: \"intv-airway-patency-technique-suction-airway\",\n    prompts: [{ id: \"prompt-set-airway-patency-suction\"}]\n})\ncreateInterventionForm({\n    intv: \"intv-airway-patency-technique-remove-foreign-body-obstructions\",\n    prompts: [{ id: \"prompt-set-airway-patency-remove-foreign-body-obstructions\"}]\n})\n\n// bls insert adjunct interventions\ncreateInterventionForm({\n    intv: \"intv-oropharyngeal\",\n    prompts: [{ id: \"prompt-set-when-naso-vs-oro\" }]\n})\ncreateInterventionForm({\n    intv: \"intv-nasopharyngeal\",\n    prompts: [{id: \"prompt-set-when-oro-vs-naso\"}]\n})\n\n// als airway patency\ncreateInterventionForm({\n    intv: \"intv-airway-patency-technique-cricothyrotomy\",\n    prompts: [{ id: \"prompt-set-airway-patency-cricothyrotomy\"}]\n})\n\n// als airway interventions\ncreateInterventionForm({ intv: \"intv-supraglottic\" })\ncreateInterventionForm({\n    intv: \"intv-orotracheal-intubation-type-direct\",\n    prompts: [{id: \"prompt-set-orotracheal-intubation-details\"}]\n})\n// createInterventionForm({\n//     intv: \"intv-orotracheal-intubation-type-gum-elastic-bougie-assisted\",\n//     prompts: [{id: \"prompt-set-orotracheal-intubation-details\"}]\n// })\n// createInterventionForm({\n//     intv: \"intv-orotracheal-intubation-type-video-laryngoscopy\",\n//     prompts: [{ id: \"prompt-set-orotracheal-intubation-details\"}]\n// })\ncreateInterventionForm({\n    intv: \"intv-orotracheal-intubation-type-medication-facilitated\",\n    prompts: [\n        {id: \"prompt-set-iv-details\", dataEntry: false},\n        {id: \"prompt-set-orotracheal-intubation-type-medication-facilitated\"},\n        {id: \"prompt-set-orotracheal-intubation-details\"}\n    ]\n})\n\n// breathing interventions - ventilation\ncreateInterventionForm({\n    intv: \"intv-ventilation-technique-bag-valve-mask\",\n    prompts: [{ id: \"prompt-set-ventilation-rate\"}]\n})\ncreateInterventionForm({\n    intv: \"intv-ventilation-technique-automatic-transport-ventilator\",\n    prompts: [{ id: \"prompt-set-ventilation-rate\" }]\n})\n// breathing interventions - supplemental oxygen\ncreateInterventionForm({\n    intv: \"intv-oxygen-therapy-device-non-rebreather-mask\",\n    prompts: [{ id: \"prompt-set-oxygen-therapy-details\"}]\n})\ncreateInterventionForm({\n    intv: \"intv-oxygen-therapy-device-nasal-cannula\",\n    prompts: [{ id: \"prompt-set-oxygen-therapy-details\"}]\n})\n// breathing interventions - manage injuries\ncreateInterventionForm({\n    intv: \"intv-occlusive-dressing\",\n    prompts: [{ id: \"prompt-set-occlusive-dressing\" }]\n})\ncreateInterventionForm({\n    intv: \"intv-pleural-decompression\",\n    prompts: [{ id: \"prompt-set-pleural-decompression\" }]\n})\n\n// control bleeding interventions\ncreateInterventionForm({ intv: \"intv-control-severe-bleeding-technique-direct-pressure\" })\ncreateInterventionForm({\n    intv: \"intv-control-severe-bleeding-technique-tourniquet\",\n    prompts: [{ id: \"prompt-set-tourniquet\"}]\n})\ncreateInterventionForm({\n    intv: \"intv-control-severe-bleeding-technique-2nd-tourniquet\",\n    prompts: [{ id: \"prompt-set-2nd-tourniquet\"}]\n})\ncreateInterventionForm({ intv: \"intv-control-severe-bleeding-technique-pressure-bandage\" })\ncreateInterventionForm({ intv: \"intv-control-severe-bleeding-technique-hemostatic-gauze\" })\ncreateInterventionForm({ intv: \"intv-control-severe-bleeding-technique-pack-wound-with-gauze\" })\ncreateInterventionForm({ intv: \"intv-control-severe-bleeding-technique-load-and-go\" })\n\n// control shock interventions\ncreateInterventionForm({ intv: \"intv-control-shock-technique-keep-patient-warm\" })\ncreateInterventionForm({ intv: \"intv-control-shock-technique-administer-high-concentration-o2\" })\ncreateInterventionForm({ intv: \"intv-control-shock-technique-place-patient-supine-position\" })\ncreateInterventionForm({\n    intv: \"intv-control-shock-technique-administer-iv-boluses\",\n    prompts: [\n        { id: \"prompt-set-iv-details\", dataEntry: false },\n        { id: \"prompt-set-control-shock-technique-administer-iv-boluses\"}\n    ]\n})\n\n// transport decision\ncreateInterventionForm({\n    intv: \"intv-transport-is-load-and-go\",\n    prompts: [{ id: \"prompt-set-transport-decisions\" }]\n})\n\n// spinal immobilization interventions\ncreateInterventionForm({ intv: \"intv-spinal-immobilization-technique-manual-c-spine\" })\ncreateInterventionForm({ intv: \"intv-spinal-immobilization-technique-ked\" })\ncreateInterventionForm({ intv: \"intv-spinal-immobilization-technique-lbb\" })\ncreateInterventionForm({ intv: \"intv-spinal-immobilization-technique-cervical-collar\" })\ncreateInterventionForm({ intv: \"intv-spinal-immobilization-technique-blocks\" })\n\n// manage secondary injuries interventions\ncreateInterventionForm({ intv: \"intv-manage-secondary-injuries-technique-apply-dressings\" })\ncreateInterventionForm({ intv: \"intv-manage-secondary-injuries-technique-splint-fractures\" })\ncreateInterventionForm({ intv: \"intv-manage-secondary-injuries-technique-other\" })\n\n// transfer patient interventions\ncreateInterventionForm({ intv: \"intv-transfers-patient-method-walk-patient\" })\ncreateInterventionForm({ intv: \"intv-transfers-patient-method-scoop-stretcher\" })\ncreateInterventionForm({ intv: \"intv-transfers-patient-method-transfer-to-stretcher-on-long-backboard\" })\ncreateInterventionForm({ intv: \"intv-transfers-patient-method-other\" })\n\n\n//reassess modify interventions\ncreateInterventionForm({\n    intv: \"intv-reassess-vital-signs\",\n    prompts: [{ id: \"prompt-set-reassess-vital-signs\" }]\n})\ncreateInterventionForm({ intv: \"intv-replace-basic-airway-with-advanced-or-intubate\" })\ncreateInterventionForm({ intv: \"intv-replace-bandages\" })\ncreateInterventionForm({ intv: \"intv-replace-oxygen-tank\" })\ncreateInterventionForm({ intv: \"intv-adjust-iv-replace-bolus\" })\ncreateInterventionForm({ intv: \"intv-turn-on-heat-in-ambulance\" })\n\n\n// additional interventions\ncreateInterventionForm({\n    intv: \"intv-establish-ivs\",\n    prompts: [{ id: \"prompt-set-iv-details\", dataEntry: false }]\n})\ncreateInterventionForm({ intv: \"intv-apply-bandages\" })\n\n\nMEDS.forEach(med => {\n    createInterventionForm({\n        intv: `intv-medication-${med.id}`,\n        prompts: [\n            {\n                id: `prompt-set-medication-${med.id}`,\n                dataEntry: false,\n            },\n            {\n                id: `prompt-set-${med.id}-administration-route`,\n                dataEntry: true\n            },\n            {\n                id: \"prompt-set-iv-details\",\n                dataEntry: false,\n                constraints: `answer-${med.id}-administration-route-iv`\n            },\n\n        ]\n    })\n})\n\n// console.log(JSON.stringify(INTV_FORMS, null, 4))\n// process.exit(0)\n\nexport const INTV_MENUS = [{\n    id: \"manual-c-spine\",\n    label: \"Manual c-spine stabilization\",\n    items: [\n        getIntervention(\"intv-spinal-immobilization-technique-manual-c-spine\", 1),\n    ]\n},{\n    id: \"airway\",\n    label: getLabel(\"airway\"),\n    items: [\n        { id: \"heading-bls\", type: HEADING, depth: 1, label: \"BLS\" },\n        { id: \"heading-open-airway\", type: HEADING, depth: 2, label: \"Open airway\" },\n        getIntervention(\"intv-open-airway-method-head-tilt\", 3),\n        getIntervention(\"intv-open-airway-method-jaw-thrust\", 3),\n        getIntervention(\"intv-open-airway-method-modified-jaw-thrust\", 3),\n        getIntervention(\"intv-open-airway-method-other\", 3),\n        { id: \"heading-establish-patency\", type: HEADING, depth: 2, label: \"Establish patency\" },\n        getIntervention(\"intv-airway-patency-technique-remove-foreign-body-obstructions\", 3),\n        getIntervention(\"intv-airway-patency-technique-suction-airway\", 3),\n        { id: \"heading-insert-adjunct\", type: HEADING, depth: 2 },\n        getIntervention(\"intv-nasopharyngeal\", 3),\n        getIntervention(\"intv-oropharyngeal\", 3),\n        { id: \"heading-als\", type: HEADING, depth: \"1\", label: \"ALS\" },\n        { id: \"heading-als-airways\", type: HEADING, depth: 2, label: \"Insert adjunct\" },\n        getIntervention(\"intv-supraglottic\", 3),\n        { id: \"heading-orotracheal-intubations\", type: HEADING, depth: 3, label: \"Orotracheal Intubation\" },\n        getIntervention(\"intv-orotracheal-intubation-type-direct\", 4),\n        // getIntervention(\"intv-orotracheal-intubation-type-gum-elastic-bougie-assisted\", 4),\n        // getIntervention(\"intv-orotracheal-intubation-type-video-laryngoscopy\", 4),\n        getIntervention(\"intv-orotracheal-intubation-type-medication-facilitated\", 4),\n        getIntervention(\"intv-airway-patency-technique-cricothyrotomy\", 2),\n\n    ]\n}, {\n\n    id: \"breathing\",\n    label: getLabel(\"breathing\"),\n    items: [\n        { id: \"heading-ventilation\", type: HEADING, depth: 1, label: \"Ventilation\" },\n        getIntervention(\"intv-ventilation-technique-bag-valve-mask\", 2),\n        getIntervention(\"intv-ventilation-technique-automatic-transport-ventilator\", 2),\n        { id: \"heading-supplemental-oxygen\", type: HEADING, depth: 1, label: \"Supplemental Oxygen\" },\n        getIntervention(\"intv-oxygen-therapy-device-nasal-cannula\"),\n        getIntervention(\"intv-oxygen-therapy-device-non-rebreather-mask\"),\n        { id: \"heading-manage-breathing-injury\", type: HEADING, depth: 1, label: \"Manage Breathing-Compromising Injuries\" },\n        getIntervention(\"intv-occlusive-dressing\", 2),\n        getIntervention(\"intv-pleural-decompression\", 2)\n    ]\n}, {\n    id: \"heading-severe-bleeding\",\n    label: \"Severe Bleeding\",\n    items: [\n        getIntervention(\"intv-control-severe-bleeding-technique-direct-pressure\", 1),\n        getIntervention(\"intv-control-severe-bleeding-technique-tourniquet\", 1),\n        getIntervention(\"intv-control-severe-bleeding-technique-2nd-tourniquet\", 1),\n        getIntervention(\"intv-control-severe-bleeding-technique-pressure-bandage\", 1),\n        getIntervention(\"intv-control-severe-bleeding-technique-hemostatic-gauze\", 1),\n        getIntervention(\"intv-control-severe-bleeding-technique-pack-wound-with-gauze\", 1),\n        getIntervention(\"intv-control-severe-bleeding-technique-load-and-go\", 1),\n    ]\n}, {\n    id: \"heading-shock\",\n    label: \"Shock\",\n    items: [\n        getIntervention(\"intv-control-shock-technique-keep-patient-warm\", 1),\n        getIntervention(\"intv-control-shock-technique-administer-high-concentration-o2\", 1),\n        getIntervention(\"intv-control-shock-technique-place-patient-supine-position\", 1),\n        getIntervention(\"intv-control-shock-technique-administer-iv-boluses\", 1),\n    ]\n},\n{\n    id: \"spinal-immobilization\",\n    label: \"Spinal Immobilization\",\n    items: [\n        getIntervention(\"intv-spinal-immobilization-technique-manual-c-spine\", 1),\n        getIntervention(\"intv-spinal-immobilization-technique-ked\", 1),\n        getIntervention(\"intv-spinal-immobilization-technique-lbb\", 1),\n        getIntervention(\"intv-spinal-immobilization-technique-cervical-collar\", 1),\n        getIntervention(\"intv-spinal-immobilization-technique-blocks\", 1),\n    ]\n}, {\n    id: \"secondary-wounds\",\n    label: \"Secondary Wounds\",\n    items: [\n        getIntervention(\"intv-manage-secondary-injuries-technique-apply-dressings\", 1),\n        getIntervention(\"intv-manage-secondary-injuries-technique-splint-fractures\", 1),\n        getIntervention(\"intv-manage-secondary-injuries-technique-other\", 1)\n    ]\n}, {\n    id: \"transfer-patient\",\n    label: \"Transfer and Transport\",\n    items: [\n        getIntervention(\"intv-transfers-patient-method-walk-patient\", 1),\n        getIntervention(\"intv-transfers-patient-method-scoop-stretcher\", 1),\n        getIntervention(\"intv-transfers-patient-method-transfer-to-stretcher-on-long-backboard\", 1),\n        getIntervention(\"intv-transfers-patient-method-other\", 1),\n    ]\n}, {\n    id: \"heading-modify-interventions\",\n    label: \"Modify Interventions\",\n    items: [\n        getIntervention(\"intv-reassess-vital-signs\", 1),\n        getIntervention(\"intv-replace-basic-airway-with-advanced-or-intubate\", 1),\n        getIntervention(\"intv-replace-bandages\", 1),\n        getIntervention(\"intv-replace-oxygen-tank\", 1),\n        getIntervention(\"intv-adjust-iv-replace-bolus\", 1),\n        getIntervention(\"intv-turn-on-heat-in-ambulance\", 1),\n    ]\n}, {\n    id: \"heading-ivs\",\n    label: \"IVs\",\n    items: [\n        getIntervention(\"intv-establish-ivs\", 1),\n    ]\n},\n{\n    id: \"heading-administer-medications\",\n    label: \"Administer Medications\",\n    items: MEDS.map(med => getIntervention(`intv-medication-${med.id}`))\n}]\n\n\nexport const PHASE_DATA = [\n    createPhase({id: \"bsi\", items: [\"required-action-apply-ppe\"]}),\n\n    createPhase({\n        id: \"scene-size-up\",\n        items: [\n            \"assess-scene-safety\",\n            \"assess-injury-mechanism\",\n            \"assess-num-patients\",\n            \"assess-need-additional-help\",\n            \"required-action-considers-stabilize-spine\"\n        ],\n    }),\n    createPhase({\n        id: \"primary-survey\",\n        subPhases: [\n            \"general-impression\",\n            \"airway\",\n            \"breathing\",\n            \"circulation\",\n            \"transport-decision\"\n        ]\n    }),\n    createSubPhase({\n        id: \"general-impression\",\n        phase: \"primary-survey\",\n        items: [\n            \"assess-patient-condition\",\n            \"assess-loc\",\n            \"assess-life-threats\"\n        ]\n    }),\n    createSubPhase({\n        id: \"airway\",\n        phase: \"primary-survey\",\n        items: [\n            \"assess-airway\",\n        ],\n    }),\n    createSubPhase({\n        id: \"breathing\",\n        phase: \"primary-survey\",\n        items: [\n            \"assess-breathing\",\n        ],\n    }),\n    createSubPhase({\n        id: \"circulation\",\n        phase: \"primary-survey\",\n        items: [\n            \"assess-pulse\",\n            \"assess-skin\",\n            \"assess-major-bleeding\",\n        ],\n    }),\n    createSubPhase({\n        id: \"transport-decision\",\n        phase: \"primary-survey\",\n        items: [\n           \"decision-is-load-and-go\"\n        ]\n    }),\n\n    createPhase({\n        id: \"history-taking\",\n        items: [\n            \"required-action-obtains-vitals\",\n            \"required-action-attempt-obtain-sample\",\n            \"assess-opqrst-info\"\n        ]\n    }),\n    createPhase({\n        id: \"secondary-assessment\",\n        subPhases: [\n            \"trauma-expose\",\n            \"head\",\n            \"neck\",\n            \"shoulders\",\n            \"clavicle\",\n            \"chest\",\n            \"abdomen-pelvis\",\n            \"lower-extremities\",\n            \"upper-extremities\",\n            \"posterior\"\n        ]\n    }),\n    createSubPhase({\n        id: \"trauma-expose\",\n        phase: \"secondary-assessment\",\n        items: [\"required-action-remove-patient-clothing-as-needed\"],\n    }),\n    createSubPhase({\n        id: \"head\",\n        phase: \"secondary-assessment\",\n        items: [\n            \"assess-inspects-head\",\n            \"assess-palpate-skull\",\n            \"assess-eyes-reactiveness\",\n            \"assess-eyes-ears-nose-mouth\"\n        ],\n    }),\n    createSubPhase({\n        id: \"neck\",\n        phase: \"secondary-assessment\",\n        items: [\n            \"assess-inspects-neck\",\n            \"assess-trachea\",\n            \"assess-jugular\",\n            \"assess-palpate-cervical-spine\"\n        ],\n    }),\n    createSubPhase({\n        id: \"shoulders\",\n        phase: \"secondary-assessment\",\n        items: [\n            \"assess-check-shoulders\"\n        ],\n    }),\n    createSubPhase({\n        id: \"clavicle\",\n        phase: \"secondary-assessment\",\n        items: [\n            \"assess-inspect-clavicle\"\n        ],\n    }),\n    createSubPhase({\n        id: \"chest\",\n        phase: \"secondary-assessment\",\n        items: [\n            \"assess-inspect-chest\",\n            \"assess-palpate-chest\",\n            \"assess-auscultate-chest\"\n        ],\n    }),\n    createSubPhase({\n        id: \"abdomen-pelvis\",\n        phase: \"secondary-assessment\",\n        items: [\n            \"assess-inspects-abdomen\",\n            \"assess-palpate-abdomen\",\n            \"assess-pelvis\",\n            \"assess-genitalia-perineum\"\n        ],\n    }),\n    createSubPhase({\n        id: \"lower-extremities\",\n        phase: \"secondary-assessment\",\n        items: [\n            \"assessment-with-options-legs-inspects\",\n            \"assessment-with-options-legs-motor-function\",\n            \"assessment-with-options-legs-sensory-function\",\n            \"assessment-with-options-legs-pulse\"\n        ],\n    }),\n    createSubPhase({\n        id: \"upper-extremities\",\n        phase: \"secondary-assessment\",\n        items: [\n            \"assessment-with-options-arms-inspects\",\n            \"assessment-with-options-arms-motor-function\",\n            \"assessment-with-options-arms-sensory-function\",\n            \"assessment-with-options-arms-pulse\"\n        ],\n    }),\n    createSubPhase({\n        id: \"posterior\",\n        phase: \"secondary-assessment\",\n        items: [\n            \"assess-posterior-inspects\",\n            \"assess-palpate-posterior-thorax\"\n        ],\n    }),\n    createPhase({\n        id: \"ongoing-mgmt-plan\",\n        subPhases: [\n            \"repeat-primary-survey\",\n            \"repeat-secondary-survey\",\n            \"contact-facility\"\n        ]\n    }),\n    createSubPhase({\n        id: \"repeat-primary-survey\",\n        phase: \"ongoing-mgmt-plan\",\n        items: [\n            \"required-action-reassess-loc\",\n            \"required-action-reassess-airway\",\n            \"required-action-reassess-breathing\",\n            \"required-action-reassess-circulation\"\n        ]\n    }),\n    createSubPhase({\n        id: \"repeat-secondary-survey\",\n        phase: \"ongoing-mgmt-plan\",\n        items: [\n            \"required-action-reassess-vital-signs\",\n            \"required-action-reassess-head-to-toe\"\n        ]\n    }),\n    createSubPhase({\n        id: \"contact-facility\",\n        phase: \"ongoing-mgmt-plan\",\n        items: [\n            \"required-action-radio-receiving-facility\"\n        ]\n    })\n]\n\n\nexport const SYSTEM_INTVS = {\n    airway: { id: \"airway\", label: \"Airway\", intvs: getSystemIntvs(SYS.AW) },\n    breathing: { id: \"breathing\", label: \"Breathing\", intvs: getSystemIntvs(SYS.BR) },\n    bleeding: { id: \"bleeding\", label: \"Bleeding\", intvs: getSystemIntvs(SYS.BL) },\n    shock: { id: \"shock\", label: \"Shock\", intvs: getSystemIntvs(SYS.SH) }\n}\n\n//\n// meta-data/derived-data sanity checking routines\n//\n\nconst checkForDupIDs = () => {\n    let errors = []\n    let IDs = {}\n    CHECKLIST_META_DATA.forEach((rec) => {\n        if (!(rec.id in IDs)) {\n            IDs[rec.id] = 1\n        } else {\n            IDs[rec.id]++\n        }\n    })\n    INTV_META_DATA.forEach((rec) => {\n        if (!(rec.id in IDs)) {\n            IDs[rec.id] = 1\n        } else {\n            IDs[rec.id]++\n        }\n    })\n    const dupIDs = Array.from(Object.entries(IDs)).filter(([id, count]) => count > 1)\n    if (dupIDs.length > 0) {\n        errors.push(\"Duplicate IDs found!\")\n        // console.error()\n        errors.push(JSON.stringify(dupIDs, null, 4))\n    }\n    return errors\n}\n\nconst enforceNamingConventions = () => {\n    let errors = []\n    // const badPhases = getNamingConventionViolations(PHASES, PFX.PHASE)\n    // const badSubPhases = getNamingConventionViolations(SUBPHASES, PFX.SUB_PHASE)\n    const badAssessments = getNamingConventionViolations(ASSESSMENTS, PFX.ASSESS)\n    const badAwos = getNamingConventionViolations(ASSESS_WITH_OPTIONS, PFX.AWO)\n    const badAssessOptions = getNamingConventionViolations(ASSESS_OPTIONS, PFX.ASSESS_OPTION)\n    const badRequiredActions = getNamingConventionViolations(REQ_ACTIONS, PFX.REQURED)\n    const badDecisions = getNamingConventionViolations(DECISIONS, PFX.DECISION)\n    const badDecisionOptions = getNamingConventionViolations(DECISION_OPTIONS, PFX.DECISION_OPTION)\n    const badCheckListPrompts = getNamingConventionViolations(CL_PROMPTS, PFX.CL_PROMPT)\n    const badIntvs = getNamingConventionViolations(INTVS, PFX.INTERV)\n    const badPromptSets = getNamingConventionViolations(PROMPT_SETS, PFX.PROMPT_SET)\n    const badPrompts = getNamingConventionViolations(PROMPTS, PFX.PROMPT)\n    const badAnswers = getNamingConventionViolations(ANSWERS, PFX.ANSWER)\n\n    if (anyHaveValues(\n        // badPhases,\n        // badSubPhases,\n        badAssessments,\n        badAwos,\n        badAssessOptions,\n        badRequiredActions,\n        badDecisions,\n        badDecisionOptions,\n        badPromptSets,\n        badCheckListPrompts,\n        badPrompts,\n        badIntvs,\n        badAnswers)) {\n        // errors.concat(reportViolations(\"phases\",                   PFX.PHASE,           badPhases))\n        // errors.concat(reportViolations(\"sub phases\",               PFX.SUB_PHASE,       badSubPhases))\n        errors.concat(reportViolations(\"assessments\",              PFX.ASSESS,          badAssessments))\n        errors.concat(reportViolations(\"assessments with options\", PFX.AWO,             badAwos))\n        errors.concat(reportViolations(\"assement options\",         PFX.ASSESS_OPTION,   badAssessOptions))\n        errors.concat(reportViolations(\"required actions\",         PFX.REQURED,         badRequiredActions))\n        errors.concat(reportViolations(\"decisions\",                PFX.DECISION,        badDecisions))\n        errors.concat(reportViolations(\"decision options\",         PFX.DECISION_OPTION, badDecisionOptions))\n        errors.concat(reportViolations(\"checklist prompts\",        PFX.CL_PROMPT,       badCheckListPrompts))\n        errors.concat(reportViolations(\"interventions\",            PFX.INTERV,          badIntvs))\n        errors.concat(reportViolations(\"prompt sets\",              PFX.PROMPT_SET,      badPromptSets))\n        errors.concat(reportViolations(\"prompts\",                  PFX.PROMPT,          badPrompts))\n        errors.concat(reportViolations(\"answers\",                  PFX.ANSWER,          badAnswers))\n    }\n    return errors\n}\n\nconst checkPrompts = () => {\n    let errors = []\n    const missingSelectionType = PROMPTS.filter((rec) => !(\"selectionType\" in rec))\n    const badSelectionType = PROMPTS.filter((rec) => ![ST.ONE, ST.OOM, ST.NONE].includes(rec.selectionType))\n\n    if (!!missingSelectionType.length) {\n        errors.push(\"missingSelectionType\", missingSelectionType)\n    }\n    if (!!badSelectionType.length) {\n        errors.push(\"badSelectionType\", badSelectionType)\n    }\n    return errors\n}\n\nconst checkAssessments = () => {\n    let errors = []\n    const missingTabLabels = ASSESSMENTS.filter((rec) => !(\"abbrLabel\" in rec))\n    if (!!missingTabLabels.length) {\n        errors.push(\"Assessments missing tabLabels:\", missingTabLabels)\n    }\n    return errors\n}\n\nconst checkPromptsForMissingPromptSetIDs = () => {\n    let errors = []\n    const promptsMissingPromptSet = PROMPTS.filter((rec) => !(\"promptSetID\" in rec))\n    if (promptsMissingPromptSet.length) {\n        errors.push(\"prompts withing promptSetID\")\n        errors.push(promptsMissingPromptSet)\n    }\n    return errors\n}\n\nconst checkForInvalidPromptSetIDs = () => {\n    let errors = []\n    const promptsWithBadPromptSetIDs = PROMPTS\n        .filter(rec => \"promptSetID\" in rec)\n        .filter(rec => undefined === PROMPT_SETS.find(ps => ps.id === rec.promptSetID))\n    if (promptsWithBadPromptSetIDs.length) {\n        errors.push(\"prompts with bad promptsSetIDs\")\n        errors.push(promptsWithBadPromptSetIDs)\n    }\n    return errors\n}\n\n\n// looks like I got interupted in the middle of implementing this (UNUSED)\nconst checkPromptOptions = () => {\n    INTV_META_DATA.filter((rec) => rec.type === TYPES.ANSWER)\n}\n\nconst getNamingConventionViolations = (list, prefix) => {\n    return list.filter(rec => !rec.id.startsWith(prefix))\n}\n\nconst reportViolations = (label, properPrefix, violations) => {\n    let errors = []\n    if (violations.length > 0) {\n        errors.push(`\nThe following ${label} don't begin with the prefix \"${properPrefix}\"\n--------------------------------------------------------------------------------`)\n        violations.forEach((rec) => errors.push(rec.id))\n    }\n    return errors\n}\n\nconst assessments = CHECKLIST_META_DATA.filter(rec => [TYPES.ASSESS, TYPES.ASSESS_OPTION].includes(rec.type))\n// console.log(\"assessments\", assessments)\nconst checkScenarioForMissingAssessmentFindings = (scenario) => {\n    // check for missing assessment findings in scenario data\n    return assessments.filter(rec => !(rec.id in scenario.assessmentFindings))\n}\n\nconst checkScenarioForInvalidAssessmentFindings = (scenario) => {\n    // check for assessment findings in scenario data which aren't valid\n    let invalids = []\n    Object.keys(scenario.assessmentFindings).forEach((af) => {\n        const found = assessments.find((rec) => rec.id === af)\n        // console.log(af, found)\n        if (found === undefined) {\n            invalids.push(af)\n        }\n    })\n    return invalids\n}\n\nconst checkForMissingInterventionForms = () => {\n    let errors = []\n    INTVS.forEach((intv) => {\n        // console.log(rec)\n        if (!(intv.id in INTV_FORMS)) {\n            errors.push(`missing from INTV_FORMS`)\n            errors.push(JSON.stringify(intv, null, 4))\n        }\n    })\n    return errors\n}\n\n// entry point for sanity checking routines\nexport const performSanityChecking = (scenarioData) => {\n    let errors = []\n    errors.concat(checkForDupIDs())\n    errors.concat(enforceNamingConventions())\n    errors.concat(checkPromptsForMissingPromptSetIDs())\n    errors.concat(checkForInvalidPromptSetIDs())\n    errors.concat(checkPrompts())\n    errors.concat(checkAssessments())\n    const missingFindings = checkScenarioForMissingAssessmentFindings(scenarioData)\n    const invalidFindings = checkScenarioForInvalidAssessmentFindings(scenarioData)\n    if (!!missingFindings.length) {\n        errors.push(\"scenario missing assessmentFindings\", missingFindings)\n    }\n    if (!!invalidFindings.length) {\n        errors.push(\"scenario invalid assessment findings\", invalidFindings)\n    }\n    errors.concat(checkForMissingInterventionForms())\n    return errors\n}\n\n\n// merges generic scenario-type data into scenarioSpecificData\nexport const dataMerger = (scenarioSpecificData) => {\n    let data = deepCopy(scenarioSpecificData)\n    // mix in scenario-type stuff\n    data.interventionForms = deepCopy(INTV_FORMS)\n    data.interventionMenus = deepCopy(INTV_MENUS)\n    data.phaseData = deepCopy(PHASE_DATA)\n    data.systemInterventions = deepCopy(SYSTEM_INTVS)\n    return data\n}\n","\nimport { INTV_FORMS, INTV_MENUS, PHASE_DATA, SYSTEM_INTVS } from \"./traumaScenarioV2.js\"\nimport { INTV_META_DATA } from \"./traumaScenarioV2MetaData.js\"\nimport { getRecsOfType, deepCopy } from \"./utils.js\"\n\nimport { MDB_TYPES as TYPES } from \"./constants.js\"\n\n// the rest of these imports can go away soon\nimport { criticalActions } from \"./crit-actions.js\"\n\nimport { CHECKLIST_META_DATA as CMDV0, INTV_META_DATA as IMDV0 } from \"./traumaScenarioV0MetaData.js\"\nimport { CHECKLIST_META_DATA as CMDV1, INTV_META_DATA as IMDV1 } from \"./traumaScenarioV1MetaData.js\"\nimport { CHECKLIST_META_DATA as CMDV2, INTV_META_DATA as IMDV2 } from \"./traumaScenarioV2MetaData.js\"\n\n\nexport const getScenarios = (db, scenarioType, schemaVersion) => {\n    const query = db.collection(\"scenarios\")\n             .where(\"scenarioType\", \"==\", scenarioType)\n             .where(\"schemaVersion\", \"==\", schemaVersion)\n    return query.get()\n        .then(snapShot => {\n            const scenarios = []\n            if (snapShot.size > 0) {\n                snapShot.docs.forEach(doc => {\n                    const data = doc.data()\n                    scenarios.push({\n                        id: data.id,\n                        name: data.name,\n                        scenarioType: data.scenarioType,\n                        schemaVersion: data.schemaVersion\n                    })\n                })\n            }\n            return scenarios\n        })\n}\n\nexport const getScenarioByID = (db, scenarioID) => {\n    return db.collection(\"scenarios\").doc(scenarioID).get()\n        .then(doc => {\n            // this is scenario-specific data\n            const data = doc.data()\n            return data\n        })\n        .then(scenData => mergeData(db, scenData))\n}\n\nexport const getScenarioByName = (db, scenarioName, schemaVersion) => {\n    return db.collection(\"scenarios\")\n             .where(\"name\", \"==\", scenarioName)\n             .where(\"schemaVersion\", \"==\", schemaVersion)\n             .limit(1)\n             .get()\n            .then(snapShot => {\n                if (snapShot.size === 1) {\n                    return snapShot.docs[0].data()\n                } else {\n                    throw new Error(\"document not found\")\n                }\n            })\n            .then(scenData => mergeData(db, scenData))\n            .catch(error => error)\n\n}\n\nconst getRequiredActions = (db, scenario) => {\n    return db.collection(\"scenario-required-actions\").where(\"scenarioName\", \"==\", scenario.name).limit(1).get()\n    .then(snapShot => {\n        if (snapShot.size === 1) {\n            const doc = snapShot.docs[0].data()\n            scenario.criticalActions = doc.criticalActions\n            scenario.associations = doc.associations\n        } else {\n            scenario.criticalActions = []\n            scenario.associations = {}\n        }\n        return scenario\n    })\n}\n\nconst mergeGenericTraumaScenarioData = (scenario) => {\n    // this is truama-scenario generic data\n    scenario.intvMetaData = deepCopy(INTV_META_DATA)\n    scenario.interventionMenus = deepCopy(INTV_MENUS)\n    scenario.phaseData = deepCopy(PHASE_DATA)\n    scenario.systemInterventions = deepCopy(SYSTEM_INTVS)\n    // TODO: perform some scenario-specific substitutions here\n    scenario.interventionForms = deepCopy(INTV_FORMS)\n    return scenario\n}\n\nconst reconstructChecklistMetaData = (scenario) => {\n    const checkListMetaData = []\n    const subPhasePhases = {}\n\n    const addFlattenedItem = (item, phase, subphase) => {\n        const obj = Object.assign({}, item)\n        delete obj.items\n        delete obj.dataEntry\n        obj.phase = phase\n        obj.subPhase = (!!subphase) ? subphase : null\n        checkListMetaData.push(obj)\n        // item.items are related assess-options or decision-options\n        item.items?.map(option => {\n            option.phase = phase\n            option.subPhase = (!!subphase) ? subphase : null\n            checkListMetaData.push(option)\n        })\n    }\n\n    scenario.phaseData.forEach(rec => {\n        if (rec.type === TYPES.PHASE) {\n            const phaseID = rec.id\n            const phaseObj = Object.assign({}, rec)\n            delete phaseObj.items\n            delete phaseObj.subPhases\n            delete phaseObj.dataEntry\n            checkListMetaData.push(phaseObj)\n            rec.items?.forEach(item => addFlattenedItem(item, phaseID, null))\n            rec.subPhases?.forEach(sp => subPhasePhases[sp.id] = phaseID)\n        } else if (rec.type === TYPES.SUB_PHASE) {\n            const subPhase = rec.id\n            const phase = subPhasePhases[subPhase]\n            const subPhaseObject = Object.assign({}, rec)\n            delete subPhaseObject.items\n            delete subPhaseObject.dataEntry\n            subPhaseObject.phase = phase\n            checkListMetaData.push(subPhaseObject)\n            rec.items.forEach(item => addFlattenedItem(item, phase, subPhase))\n        }\n    })\n    scenario.checkListMetaData = checkListMetaData\n    return scenario\n}\n\nconst mergeData = (db, scenData) => {\n    return getRequiredActions(db, scenData)\n        .then(scenData => mergeGenericTraumaScenarioData(scenData))\n        .then(scenData => reconstructChecklistMetaData(scenData))\n}\n\n\nexport const getPromptAndOptions = (scenario, promptID) => {\n    const prompt = scenario.intvMetaData.find(rec => rec.id === promptID)\n    const options = scenario.intvMetaData.filter(rec => rec.promptID === promptID)\n    prompt.options = options.map(opt => {\n        // not sure this is neccessary anymore since we have direct access to this now\n        // as compared to being preprocessed\n        opt.prompt = prompt.label\n        return opt\n    })\n    return prompt\n}\n\n//\n// the rest of these functions can go away soon\n//\nexport const getMetaData = async (db, scenarioType, schemaVersion) => {\n    if (\"trauma\" !== scenarioType) {\n        throw(`ERROR: scenario type: ${scenarioType} isn't supported`)\n    }\n    switch (schemaVersion) {\n        case \"V0\":\n            return { \"CHECKLIST_META_DATA\": CMDV0, \"INTV_META_DATA\": IMDV0 }\n        case \"V1\":\n            return { \"CHECKLIST_META_DATA\": CMDV1, \"INTV_META_DATA\": IMDV1 }\n        case \"V2\":\n            return { \"CHECKLIST_META_DATA\": CMDV2, \"INTV_META_DATA\": IMDV2 }\n        default:\n            return Promise.reject(new Error(`ERROR: unknown schema version: ${schemaVersion}`))\n    }\n}\n\nexport const getInterventionForms = async (db, scenarioType, schemaVersion) => {\n    if (\"trauma\" !== scenarioType) {\n        return Promise.reject(new Error(`ERROR: scenario type: ${scenarioType} isn't supported`))\n    }\n    if (schemaVersion !== \"V2\") {\n        return {}\n    } else {\n        return INTV_FORMS\n    }\n}\n\nexport const getCriticalActions = async (db, scenario, schemaVersion) => {\n    if (scenario !== \"PHTC M2CA\") {\n        return Promise.reject(new Error(`ERROR: scenario ${scenario} not found`))\n    }\n    if (schemaVersion !== \"V0\" && schemaVersion !== 'V2') {\n        return Promise.reject(new Error(`ERROR: currently no critical actions for schema version ${schemaVersion}`))\n    }\n    return criticalActions\n}\n\n","import { useEffect, useState } from \"react\"\n\nimport { Link } from \"react-router-dom\"\nimport { getLogs } from \"../scripts/connect-firebase\"\n\nimport { Table } from \"reactstrap\"\nconst LogList = () => {\n    const [logs, setLogs] = useState([])\n    const [logsLoaded, setLogsLoaded] = useState(false)\n\n    useEffect(\n        () => {\n            getLogs()\n            .then(result => {\n                setLogs(result)\n                // console.log(result)\n                setLogsLoaded(true)\n            })\n            .catch(error => console.log('error fetching logs', error))\n        },\n        []\n    )\n\n    if (!logsLoaded) {\n        return (<h4>fetching log data</h4>)\n    }\n    return (\n        <Table striped={true} borderless size=\"sm\" hover>\n            <thead>\n                <tr>\n                    <th>Label</th>\n                    <th>Scenario</th>\n                    <th>Username</th>\n                    <th>Timestamp</th>\n                </tr>\n            </thead>\n            <tbody>\n                {logs.map(log => (\n                    <tr key={log.id}>\n                        <td><Link to={`/logs/${log.id}`}>{log.label}</Link></td>\n                        <td>{log.scenario}</td>\n                        <td>{log.userName}</td>\n                        <td>{log.timestamp}</td>\n                    </tr>\n                ))}\n            </tbody>\n        </Table>\n    )\n\n}\n\nexport default LogList","import { db } from \"@meddbriefer/mdb-firebase\";\nimport { getCriticalActions, getMetaData } from \"@meddbriefer/scenario-data\";\n\n// Check if a document with the given name already exists\nexport const verifyDocument = async (collectionId, documentName) => {\n    let document = await db.collection(collectionId).doc(documentName).get();\n    return document.data() != null;\n};\n\n// Upload document object to database\nexport const publishDocument = async (collectionId, documentName, documentObject) => {\n    await db.collection(collectionId).doc(documentName).set(documentObject);\n    console.log(`Successfully published '${documentName}'.`);\n};\n\n// Pull document from database as object\nexport const getDocument = async (collectionId, documentName) => {\n    let document = await db.collection(collectionId).doc(documentName).get();\n    return document.data();\n};\n\n// Pull collection from database as array of document objects\nexport const getCollection = async (collectionId) => {\n    let collection = await db.collection(collectionId).get();\n    return collection.docs.map(item => item.data());\n};\n\n// Permanently delete document\nexport const deleteDocument = async (collectionId, documentName) => {\n    await db.collection(collectionId).doc(documentName).delete();\n    console.log(`'${documentName}' permanently deleted.`);\n    return true;\n};\n\n// Get a list of document names and a copy of each document\nexport const listDocumentNames = async (collectionId) => {\n  let documentList = db.collectionGroup(collectionId);\n  let documentDictionary = {};\n  documentList.get().then((querySnapshot) => {\n      querySnapshot.forEach((doc) => {\n          documentDictionary[doc.id] = doc.data();\n      });\n  });\n  return documentDictionary;\n}\n\nexport const getLogs = () => {\n    return db.collection(\"logs\").get()\n    .then(querySnapshot => {\n        return querySnapshot.docs.map(doc => {\n            const data = doc.data()\n            return {\n                id: doc.id,\n                label: data.label,\n                scenario: data.scenarioName,\n                userName: data.userName,\n                timestamp: data.timestamp\n            }\n        })\n    })\n}\n\nexport const getLog = (logID) => {\n    return db.collection(\"logs\").doc(logID).get()\n        .then((doc) => {\n            const data = doc.data()\n            data.id = doc.id\n            //let scenario = data.scenario;   //temporary until DB scenario name is fixed but won't hurt anything\n            //scenario = scenario.replace(\"PHTC \",\"\");  //temporary until DB scenario name is fixed but won't hurt anything\n            //data.scenario = scenario;\n            return data\n        })\n}\n// TODO: May need to update this when more data is moved to the database\nexport const retrieveCriticalActions = async (scenario, schemaVersion) => {\n    // return getCriticalActions(db, scenario, schemaVersion);\n    const docRef = db.collection(\"scenario-required-actions\").doc(scenario)\n    return docRef.get().then(doc => doc.exists ? doc.data() : null)\n}\n\n// TODO: May need to update this when more data is moved to the database\nexport const retrieveMetaData = async (scenarioType, schemaVersion) => {\n  return getMetaData(db, scenarioType, schemaVersion)\n}","import React, { useContext } from 'react';\n\nimport {\n    Button,\n    Nav,\n    Navbar,\n    NavbarBrand,\n    NavbarText,\n} from \"reactstrap\";\n\nimport { AuthContext } from \"@meddbriefer/mdb-auth\"\n\n// {/* <Button color=\"primary\" onClick={prefsToggler}>\n//     Preferences\n// </Button> */}\n\n\nconst MDBNavBar = ({title, leftNav = null, rightNav = null }) => {\n\n    const { isAuthenticated, userName, signOutUser } = useContext(AuthContext)\n\n    return (\n        <Navbar color=\"dark\" dark>\n\n            <NavbarBrand href=\"#\">\n                MedDBriefer\n            </NavbarBrand>\n\n            {!!leftNav &&\n                <Nav>\n                {leftNav}\n                </Nav>\n            }\n\n            {!!title &&\n                <NavbarText tag=\"h3\">{title}</NavbarText>\n            }\n\n            <Nav>\n                {isAuthenticated &&\n                <>\n                    <NavbarText>\n                        Welcome, {userName} &nbsp;\n                    </NavbarText>\n                    <Button\n                        color=\"danger\"\n                        onClick={signOutUser}\n                    >\n                        Sign Out\n                    </Button>\n                </>\n                }\n                {!!rightNav &&\n                    rightNav\n                }\n            </Nav>\n\n        </Navbar>\n    )\n}\n\nexport default MDBNavBar;\n","import { formatAsMinSecs } from \"../utils\"\n\nconst colorTypes = {\n    \"Good\": \"text-success\",\n    \"Caution\": \"text-warning\",\n    \"Problem\": \"text-danger\",\n    \"Not implemented\": \"text-muted\"\n}\n\nconst iconTypes = {\n    \"Good\": \"sentiment_satisfied\",\n    \"Caution\": \"report_problem\",\n    \"Problem\": \"highlight_off\",\n    \"Not implemented\": \"sentiment_neutral\"\n}\n\n\nexport const getAssessmentIcon = (currentEntry) => {\n    switch (currentEntry.status) {\n        case \"contraindicated\":\n            return iconTypes[\"Problem\"];\n        case \"missingMinimal\":\n            return iconTypes[\"Problem\"];\n        case \"missingRequired\":\n            return iconTypes[\"Problem\"];\n        case \"missingStandard\":\n            return iconTypes[\"Caution\"];\n        case \"missingAssessment\":\n            return iconTypes[\"Problem\"];\n        case \"assessment\":\n            return iconTypes[\"Good\"];\n        case \"assessment-option\":\n            return iconTypes[\"Not implemented\"];\n         case \"decision-option\":\n            return iconTypes[\"Not implemented\"];\n        case \"required-action\":\n            return iconTypes[\"Good\"];\n        case \"standard\":\n            return iconTypes[\"Good\"];\n        case \"assessment-option-incorrect\":\n            return iconTypes[\"Caution\"];\n        case \"decision-option-incorrect\":\n            return iconTypes[\"Caution\"];\n        case \"standard-incorrect-answers\":\n            return iconTypes[\"Caution\"];\n        case \"minimal\":\n            return iconTypes[\"Caution\"];\n        case \"notFound\":\n            return iconTypes[\"Not implemented\"];\n        default:\n            return iconTypes[\"Not implemented\"];\n    }\n}\n\n\nexport const getColor = (currentEntry) => {\n    switch (currentEntry.status) {\n        case \"contraindicated\":\n            return colorTypes[\"Problem\"];\n        case \"missingMinimal\":\n            return colorTypes[\"Problem\"];\n        case \"missingRequired\":\n            return colorTypes[\"Problem\"];\n        case \"missingStandard\":\n            return colorTypes[\"Caution\"];\n        case \"missingAssessment\":\n            return colorTypes[\"Problem\"];\n        case \"assessment\":\n            return colorTypes[\"Good\"];\n        case \"assessment-option\":\n            return colorTypes[\"Not implemented\"];\n        case \"decision-option\":\n            return colorTypes[\"Not implemented\"];           \n        case \"required-action\":\n            return colorTypes[\"Good\"];    \n        case \"standard\":\n            return colorTypes[\"Good\"];\n        case \"assessment-option-incorrect\":\n            return colorTypes[\"Caution\"];\n        case \"decision-option-incorrect\":\n            return colorTypes[\"Caution\"];\n        case \"standard-incorrect-answers\":\n            return colorTypes[\"Caution\"];\n        case \"minimal\":\n            return colorTypes[\"Caution\"];\n        case \"green\":\n            return colorTypes[\"Good\"];\n        case \"yellow\":\n            return colorTypes[\"Caution\"];\n        case \"red\":\n            return colorTypes[\"Problem\"];\n        case \"notFound\":\n            return colorTypes[\"Not implemented\"];\n        default:\n            return colorTypes[\"Not implemented\"];\n    }\n}\n\n\nexport const getFeedback = (currentEntry) => {\n    switch (currentEntry.status) {\n        case \"contraindicated\":\n            return currentEntry.contraindicatedWhy;\n        case \"missingMinimal\":\n            return currentEntry.minimalWhy;\n        case \"missingRequired\":\n            return currentEntry.requiredWhy;\n        case \"missingStandard\":\n            return \"This is recommended in protocol \" + currentEntry.protocol;\n        case \"missingAssessment\":\n            return \"Did not do during assessment\";\n        case \"assessment\":\n            return \"\";\n        case \"assessment-option\":\n            return \"Not yet checking correctness\"; \n        case \"decision-option\":\n            return \"Not yet checking correctness\"; \n        case \"required-action\":\n            return \"\";\n        case \"assessment-option-incorrect\":\n            return \"You chose the wrong assessment option\"\n        case \"decision-option-incorrect\":\n            return \"You chose the wrong decision option\"\n        case \"standard\":\n            return \"\";\n        case \"standard-incorrect-answers\":\n            return \"The intervention is correct but you answered the details incorrectly\";\n        case \"minimal\":\n            return \"You solved the problem but did not follow protocol.  \" + currentEntry.minimalWhy;\n        case \"notFound\":\n            return \"Assessment knowledge for this entry is not specified for this scenario\";\n        default:\n            return \"Assessment knowledge for this entry not specified for this scenario\";\n    }\n}\n\n\nexport const getTimestamp = (currentEntry) => {\n    if (currentEntry.status === \"criticalActionHeader\") {\n        return \"\";\n    }\n    if (currentEntry.timestamp === -1) {\n        return \"N/A\";  // formatAsMinSecs would convert this to 59:59\n    }\n    return formatAsMinSecs(currentEntry.timestamp);\n}\n","export const formatAsMinSecs = (seconds) => {\n    return new Date(seconds * 1000).toISOString().substr(14, 5)\n}","import React, { useState, useEffect } from 'react';\n\nimport { Button, Table } from 'reactstrap';\n\nimport { Link } from 'react-router-dom';\n\nimport MDBNavBar from \"./MDBNavBar\"\n\nimport { MDB_TYPES } from '@meddbriefer/scenario-data/constants.js';\n\nimport { getAssessmentIcon, getColor, getFeedback, getTimestamp } from \"./debriefingUtils\"\n\n// const Debriefing = ({ log, metaData, criticalActions, associations }) => {\nconst Debriefing = ({ log, scenario }) => {\n    const [showCommentColumn, setShowCommentColumn] = useState(false);\n    // eslint-disable-next-line\n    const [events, setEvents] = useState(log.events);\n    const [formattedActions, setFormattedActions] = useState(null);\n    // Set to true once all performed actions have been displayed in the log\n    // const [finishedPerformedActions, setFinishedPerformedActions] = useState(false);\n\n    const toggleCommentColumn = () => {\n        setShowCommentColumn(!showCommentColumn);\n    }\n\n    /* const insertInPhase = (phaseNames, phases, object) => {\n        let phase = object.phase;\n        let phaseIndex = phaseNames.lastIndexOf(phase);\n        let phaseObjects = phases[phaseIndex];\n        if (!phaseObjects) { phaseObjects = []; }\n        phaseObjects.push(object);\n        phases[phaseIndex] = phaseObjects;\n    } */\n\n    const insertInPhaseInOrder = (phaseNames, phases, object, objIndex) => {\n        let phase = object.phase;\n        let phaseIndex = phaseNames.lastIndexOf(phase);\n        let phaseObjects = phases[phaseIndex];\n        if (!phaseObjects) { phaseObjects = []; }\n        phaseObjects.splice(objIndex - 1, 0, object);\n        phases[phaseIndex] = phaseObjects;\n    }\n\n// this is a hack to approximate a good placement for a missing intervention based on ordering of interventions\n// in the required actions definitions (formerly critical actions) that appear in the log and are just before and just after\n// the item to be inserted and what is marked as required that is in the log just before and after.  An approach that\n// utilizes partial ordering constraints would be better.  Also it is not clear what to do for really badly ordered\n// actions on the part of the student.  Note that it only looks for two anchor points before and two anchor points after\n// rather than all potential anchor points.  Also does not deal with a phase that is split into multiple within a log\n    const insertInPhaseRelativeToSuggestedOrder = (phaseNames, phases, object, orderedArrayObjects, objIndex) => {\n        let objectsBefore = orderedArrayObjects.slice(0, objIndex-1)\n        let objectBefore = orderedArrayObjects[objIndex-1];\n        // console.log(\"Objects before in def\", {...objectsBefore})\n        let requiredObjectBefore = objectsBefore.reverse().find(entry => entry.required)\n        let objectAfter = orderedArrayObjects[objIndex + 1];\n        let objectsAfter = orderedArrayObjects.slice(objIndex + 1)\n        let requiredObjectAfter = objectsAfter.find(entry => entry.required)\n        let phaseIndex = phaseNames.lastIndexOf(object.phase);\n        let phaseObjects = [...phases[phaseIndex]];  //trying for a deep copy of the array mainly for debug via console.log\n        let indexBefore = -1\n        let indexAfter = -1\n        let indexRequiredBefore = -1\n        let indexRequiredAfter = -1\n        let insertionIndex = false;\n        if (objectBefore) { indexBefore = phaseObjects.findIndex(entry => entry.id === objectBefore.id); }\n        if (objectAfter) { indexAfter = phaseObjects.findIndex(entry => entry.id === objectAfter.id); }\n        if (requiredObjectBefore) { indexRequiredBefore = phaseObjects.findIndex(entry => entry.id === requiredObjectBefore.id); }\n        if (requiredObjectAfter) { indexRequiredAfter = phaseObjects.findIndex(entry => entry.id === requiredObjectAfter.id); }\n        if (objectAfter) { indexAfter = phaseObjects.findIndex(entry => entry.id === objectAfter.id); }\n        /* console.log(\"Phase Objects\", {...phaseObjects})\n        console.log(\"Object to insert\", {...object})\n        console.log(\"Object before\",{...objectBefore})\n        console.log(\"Object After\",{...objectAfter})\n        console.log(\"Required Object Before\", {...requiredObjectBefore})\n        console.log(\"Required Object After\", {...requiredObjectAfter}) */\n        \n\n        // There is a more compact way to do the below but this made\n        // it easier for me to get the logic right\n\n        // insert according to required before first as we want to follow something that was required\n        if (indexRequiredBefore !== -1){ \n            insertionIndex = indexRequiredBefore + 2;\n            // but if the just before object is greater then insert relative to it\n            if (indexBefore > indexRequiredBefore){insertionIndex = indexBefore + 2} \n        }\n        //if no required before and not required after then insert relative to\n        //required item after in critical actions definition\n        if (!insertionIndex && indexRequiredAfter !== -1) {\n            insertionIndex = indexRequiredAfter + 1\n            // unless the just after is smaller then override and insert relative to it\n            if (indexAfter < indexRequiredAfter){insertionIndex = indexAfter + 1}\n        }\n        //otherwide if have a just before insert relative to it\n        if (!insertionIndex && indexBefore !== -1) {\n            insertionIndex = indexBefore + 2\n        }\n        //otherwise if have a just after insert relative to it\n        if (!insertionIndex && indexAfter !== -1){\n            insertionIndex = indexAfter + 1\n        }\n        //otherwise put at end of phase\n        if (!insertionIndex){\n            insertionIndex = phaseObjects.length + 2\n        }\n       insertInPhaseInOrder(phaseNames, phases, object, insertionIndex)\n        \n    }\n\n\n\n    //to display the log using the phase structures accumulated\n    const organizeLogDisplay = (phaseNames, phases) => {\n        let phaseIndex = -1;\n        let displayObjects = [];\n        let entryIndex = 1;\n        let phaseObjects = [];\n        phaseNames.forEach(phase => {\n            let criticalActionHeaderColor = \"green\";\n            phaseIndex++;\n            phaseObjects = phases[phaseIndex];\n            phaseObjects.forEach(phaseObject => {\n                if ([\"contraindicated\", \"missingAssessment\", \"missingRequired\"].includes(phaseObject.status)) {\n                    criticalActionHeaderColor = \"red\";\n                }\n                // Red has a higher priority than yellow\n                if ([\"missingStandard\", \"standard-incorrect.answers\"].includes(phaseObject.status) && criticalActionHeaderColor !== \"red\") {\n                    criticalActionHeaderColor = \"yellow\";\n                }\n                phaseObject.numericalID = entryIndex;\n                entryIndex++;\n            })\n\n            let tempHeaderObject = {\n                \"id\": \"criticalActionHeader\",\n                \"numericalID\": 1,\n                \"status\": criticalActionHeaderColor,\n                \"contraindicatedWhy\": \"\",\n                \"minimalWhy\": \"\",\n                \"requiredWhy\": \"\",\n                \"label\": getPhaseLabel(scenario, phase),\n                \"protocol\": \"\",\n                \"actionDescription\": \"\",\n                \"timestamp\": -1\n            }\n            //console.log(phaseObjects);\n            displayObjects.push(tempHeaderObject);\n            displayObjects = displayObjects.concat(phaseObjects);\n        })\n        return displayObjects;\n    }\n\n    const evalForIncorrectAnswer = (promptID, answerID) => {\n        //check each prompt and if is the appropriate one then  \n        let answers = scenario.associations[promptID];\n\n        if (Array.isArray(answers)) {\n            //returns bool regarding whether answerID NOT in answers\n            return !(answers.find(ansId => ansId === answerID))\n\n        }\n        else {\n            return !(answers === answerID)\n        }\n    }\n\n    const getCorrectAnswerLabel = (promptID) => {\n        let answers = scenario.associations[promptID]\n        let answerLabels = \"\";\n        if (Array.isArray(answers)){\n            answers.forEach((answer, j) => {\n                scenario.intvMetaData.forEach((entry, i) => {\n                    if (entry.id === answer){\n                        if (answerLabels === \"\"){\n                            answerLabels = entry.label}\n                        else {answerLabels = answerLabels + \", \"}\n                        return\n                        }\n                    })\n                })\n            }\n\n        else {\n            scenario.intvMetaData.forEach((entry, i) => {\n                if (entry.id === answers){\n                    answerLabels = entry.label\n                }\n            })\n        }\n        return answerLabels;\n    }\n\n    const findHeaderFor = (numericalID, log) => {\n        let candidateHeader = {};\n        let foundHeader = {};\n        for (let entry of log) {\n            if (entry.id === \"criticalActionHeader\") {\n                candidateHeader = entry\n            }\n            else {\n                if (entry.numericalID === numericalID) {\n                    foundHeader = candidateHeader;\n                    break;\n                }\n            }\n        }\n        return (foundHeader)\n    }\n\n    const getPhaseLabel = (scenario, phaseID) => {\n        let data = scenario.phaseData;\n        let result = data.find(entry => entry.id === phaseID);\n        //console.log(result.label)\n        return result.label\n    }\n\n    const findRequiredPhases = () => {\n        let phases = [];\n        scenario.phaseData.forEach((entry, i) => {\n            if (entry.type === \"phase\") {\n                phases.push(entry.id)\n            }\n        })\n        return phases\n    }\n\n\n    const processEvents = () => {\n        // temporarily make metaData and events directly accessible from the developer console for dev purposes\n        // window.metaData = metaData\n        window.events = events\n\n        let tempFormattedActions = [];\n        let tempConfirmedActions = [];\n        //instead of a multi-dimensional array, am using an array of phase names e.g. \"BSI\", \"prinary\" and\n\n        let requiredPhaseNames = findRequiredPhases();\n        let phaseNames = [];\n        let phases = [];     //and another array with the actual content for each phase.  I can search phaseNames for the last\n        // phases entry of that name and then use that index to retrieve the appropriate phase entried to\n        //add on the missing items (assessment or intervention) for that phase\n        let phaseObjects = [];\n        let priorPhase = \"\";\n        let phaseIndex = 0;\n\n        // sts 08/13/21 the following block of code (terminated by another comment) could be categorizeAndAnnotateActions()\n\n        // created a formated object for each event\n        events.forEach((event, i) => {\n\n            // Each tempObject is one of the lines in the displayed log\n            let tempObject = {\n                \"id\": event.id,\n                \"numericalID\": i,  // The number displayed in the \"ID\" column\n                \"status\": event.type,\n                \"contraindicatedWhy\": \"\",  // Feedback\n                \"minimalWhy\": \"\",  // Feedback\n                \"requiredWhy\": \"\",  // Feedback\n                \"label\": event.label,\n                \"finding\": event.finding,\n                \"vital\": event.vital,\n                \"value\": event.value,\n                \"displayLabel\": \"\",\n                \"phase\": event.phase,\n                \"subPhase\": event.subPhase,\n                \"type\": event.type,\n                \"prompt\": event.prompt,\n                \"answerCorrect\": true,\n                \"protocol\": \"\",\n                \"caLabel\": \"\",\n                \"intervention\": event.intervention,\n                \"required\": false,\n                \"actionDescription\": event.label,  // for the debriefing display\n                \"timestamp\": event.timestamp,\n                \"processingState\": \"good\"\n            }\n\n            //if current phase not the same as prior then keep on with the current phase\n            // then save that phase and initialize for a new phase\n            if (priorPhase !== event.phase && priorPhase !== \"\") {\n                phases[phaseIndex] = phaseObjects;\n                priorPhase = event.phase;\n                phaseObjects = [];\n                phaseIndex = phaseIndex + 1;\n                phaseNames[phaseIndex] = event.phase;\n            }\n            else {\n                if (priorPhase === \"\") {\n                    phaseNames[phaseIndex] = event.phase;\n                    priorPhase = event.phase\n                }\n            }\n\n\n            let tempType = tempObject.type\n            let processedTypes = [\"assessment\", \"required-action\", \"intervention\", \"answer\", \"obtain-vital-sign\", \"decision-option\", \"assessment-option\"]\n\n            //skip over adding anything not of these types to the debriefing display for now\n            if (!processedTypes.includes(tempType)){\n                tempObject.processingState = \"bad\";\n            }\n\n            // when get an answer for an intervention, the intervention itself is later in the event log, so \n            // accumulate the answers and then when an intervention is later found we can use the correct label\n            // and add the answers to it\n\n            let priortempObject = [];\n            if (tempType === \"answer\") {\n                //currently returns correct answer-id if has answered incorrectly or false if answered correctly\n                let wrongAnswer = evalForIncorrectAnswer(event.promptID, event.id)\n                if (tempConfirmedActions.includes(tempObject.intervention)) {\n                    priortempObject = phaseObjects.pop();\n                    tempObject.answerCorrect = priortempObject.answerCorrect;\n                    if (wrongAnswer) {\n                        tempObject.answerCorrect = false;\n                        if (priortempObject.actionDescription === \"\") {\n                            tempObject.actionDescription = \"should have specified: \" + tempObject.prompt + \" as: \" + getCorrectAnswerLabel(event.promptID);\n                        }\n                        else { tempObject.actionDescription = priortempObject.actionDescription + \", \" + tempObject.prompt + \" as: \" + getCorrectAnswerLabel(event.promptID)}\n                    }\n                    else {\n                        tempObject.actionDescription = priortempObject.actionDescription;\n                        tempObject.answerCorrect = priortempObject.answerCorrect\n                    }\n                }\n                else {\n                    if (wrongAnswer) {\n                        tempObject.answerCorrect = false\n                        tempObject.actionDescription = \"should have specified: \" + tempObject.prompt + \" as: \" + getCorrectAnswerLabel(event.promptID);\n                    }\n\n                    else { tempObject.actionDescription = \"\" }\n                    tempConfirmedActions.push(tempObject.intervention);\n                }\n            }\n\n            if (tempType === \"intervention\") {\n                priortempObject = phaseObjects.slice(-1)[0];  //slice returns an array rather than the last object in array\n\n                if (priortempObject && priortempObject.type === \"answer\" && priortempObject.intervention === tempObject.id) {\n                    priortempObject = phaseObjects.pop();\n                    tempObject.answerCorrect = priortempObject.answerCorrect;\n                    if (priortempObject.actionDescription === \"\") {\n                        tempObject.actionDescription = tempObject.label\n                    }\n                    else {\n                        tempObject.actionDescription = tempObject.label + \", \" + priortempObject.actionDescription\n                    }\n                }\n            }\n\n            if (tempObject.processingState === \"good\") {\n\n                // currently we only need to examine critical actions if the action \n                // is of type intervention\n\n                if (tempObject.type === \"intervention\") {\n\n                    // iterate through all critical actions looking how to format the\n                    // data structue for the current \"event\"\n\n                    scenario.criticalActions.forEach((ca, j) => {\n                        const standards = ca.standard\n                        const contrasAll = ca.meta.contraReqOrder.map(contra => contra.id);\n                        const contras = ca.contraindicated.map(contra => contra.id);\n                        const contraWhys = ca.contraindicatedWhy;\n                        let contrasReq = [];\n                        let contraIndex = -1;\n\n\n                        // separate out the required from the plain contraindicated for a critical problem\n                        // because we need to handle them differently\n                        contrasAll?.forEach((contra, k) => {\n                            if (!contras.includes(contra)) {\n                                contrasReq.push(contra)\n                            }\n                        })\n\n                        // sts 08/13/21 I believe we're going through things in the order standard, min, contraindicated is\n                        // that there might be multiple matches (I believe all mins are standard too) and we want the last one to win\n                        // pwj 08/12/21 yes all minimal steps are assumed to be good and we are assuming\n                        // minimal is always a subset of standard\n\n\n\n                        // check for this action to be a standard action for a critical problem\n                        standards?.forEach((standard, k) => {\n                            if (standard.id === tempObject.id) {\n                                if (contrasReq.find(entry => entry.id === tempObject.id)) { tempObject.required = true }\n                                if (tempObject.answerCorrect) {\n                                    tempObject.status = \"standard\";\n                                }\n                                else { tempObject.status = \"standard-incorrect-answers\" }\n                                tempObject.label = standard.label;\n                                tempObject.protocol = ca.protocol;\n                                tempObject.caLabel = ca.label;\n                            }\n                        })\n\n\n                        // check for this action to be a \"true\" contraindication for a critical problem\n                        contras?.forEach((contra, j) => {\n                            // pwj 9/20/21 here we handle only things that were done that are\n                            // contraindicated.  Contraindication due to being required \n                            // need to be handled under missing.  Here we just handle the true \n                            // contraindicated because the action was done and it should not be.  \n                            if (contra.id === tempObject.id) {\n                                tempObject.status = \"contraindicated\";\n                                //use the contras index so can retrieve the why\n                                contraIndex = contrasAll.indexOf(contra.id);\n                                tempObject.contraindicatedWhy = contraWhys[contraIndex];\n                                tempObject.label = contra.label;\n                                tempObject.protocol = ca.protocol;\n                                tempObject.caLabel = ca.label;\n                            }\n                        })\n\n                    })\n                    // add the formatted object to our list of formatted objects and the id to our set of confirmed ids\n                }\n                tempConfirmedActions.push(tempObject.id);\n                phaseObjects.push(tempObject);\n\n            }\n        })\n\n        // store the last phase processed\n        phases[phaseIndex] = phaseObjects;\n\n        // sts 08/13/21 end of categorizeAndAnnotateActions\n\n\n        // sts 08/13/21 start of categorizeAndAnnotateMissingActions()\n\n        //add missing phase names to phaseNames\n        requiredPhaseNames.forEach((phase, i) => {\n            if (!phaseNames.includes(phase)) {\n                phaseNames.splice(i, 0, phase);  //insert it where it should have appeared\n                phases.splice(i, 0, []);  //add the empty array for phase objects\n            }\n        })\n\n\n        // check for missing checklist steps\n        let indexCounter = events.length\n        const checklistSteps = scenario.checkListMetaData.filter(md => [MDB_TYPES.ASSESS, MDB_TYPES.REQUIRED].includes(md.type))\n        //console.log(\"checkliststeps: \", checklistSteps)\n\n        // iterate through all checklist steps for ones for which we don't have formated objects\n        checklistSteps.forEach((cls, i) => {\n            if (!tempConfirmedActions.includes(cls.id)) {\n                // add so we don't check for the missing checklist item again\n                tempConfirmedActions.push(cls.id);\n                let phaseObject = {\n                    \"id\": cls.id,\n                    \"numericalID\": indexCounter,\n                    \"type\": cls.type,\n                    \"status\": \"missingAssessment\",\n                    \"contraindicatedWhy\": \"\",\n                    \"minimalWhy\": \"\",\n                    \"label\": \"Did not do\",\n                    \"finding\": \"\",\n                    \"phase\": cls.phase,\n                    \"subPhase\": cls.subPhase,\n                    \"caLabel\": \"\",\n                    \"protocol\": \"\",\n                    \"actionDescription\": cls.label,\n                    \"timestamp\": -1\n                };\n                insertInPhaseInOrder(phaseNames, phases, phaseObject, i)\n                indexCounter++;\n            }\n        })\n\n        // search for missing interventions for each critical action\n        // Doing this separately from the earlier critical actions loop because\n        // we want to add in missing assessment steps first\n\n        scenario.criticalActions.forEach(ca => {\n\n            // iterate through all the contra required actions.  These should be in ca standard, but are deemed \n            // more important for \"grading purposes\"\n\n            // First need to get setup with the right Why information for this critical action\n            let contrasReq = [];\n            let contraIndex = -1;\n            const contrasAllData = ca.meta.contraReqOrder  //this is all the data except which is required and contradicted (i.e. id and label)\n            const contrasAll = contrasAllData.map(contra => contra.id);  //get all the ids so can later determine which are required \n            const contras = ca.contraindicated.map(contra => contra.id);  //get the contraindicated ids\n            const contraWhys = ca.contraindicatedWhy;\n            const standards = ca.standard.map(entry => { const newentry = { \"id\": entry.id, \"label\": entry.label }; return newentry })\n            //console.log(\"standards list:\", standards);\n\n\n            // separate out the required from the plain contraindicated because plain are potentially present and required are potentially missing.\n            // Note that these are just the ids we're working with here\n            contrasAll?.forEach((contra, k) => {\n                if (!contras.includes(contra)) {\n                    contrasReq.push(contra)\n                }\n            })\n\n            //if is required add that to annotation to help guide where should insert amongst existing actions\n            standards?.forEach(standard => {\n                if (contrasReq.includes(standard.id)){standard.required = true;}\n            })\n\n            // now we just have to examine standard ids to see what is missing\n            standards?.forEach((standard, k) => {\n                if (!tempConfirmedActions.includes(standard.id)) {\n                    tempConfirmedActions.push(standard.id)\n                    let phaseObject = {\n                        \"id\": standard.id,\n                        \"numericalID\": indexCounter,\n                        \"status\": \"\",\n                        \"contraindicatedWhy\": \"\",\n                        \"minimalWhy\": \"\",\n                        \"requiredWhy\": \"\",\n                        \"label\": standard.label,\n                        \"finding\": \"\",\n                        \"phase\": ca.when.during.label,\n                        \"subPhase\": standard.subPhase,\n                        \"type\": \"intervention\",\n                        \"required\": standard.required,\n                        \"caLabel\": ca.label,\n                        \"protocol\": ca.protocol,\n                        \"actionDescription\": standard.label,\n                        \"timestamp\": -1\n                    }\n\n                    if (contrasReq.includes(standard.id)) {\n                        phaseObject.status = \"missingRequired\";\n                        contraIndex = contrasAll.indexOf(standard.id);\n                        phaseObject.requiredWhy = contraWhys[contraIndex].label;\n                    }\n                    else { phaseObject.status = \"missingStandard\"; }\n                    //standards gives the suggested ordering of interventions for a critical action\n                    insertInPhaseRelativeToSuggestedOrder(phaseNames, phases, phaseObject, standards, k);\n                    indexCounter++;\n                }\n\n            })\n        })\n\n\n\n        // sts 08/13/21 end of categorizeAndAnnotateMissingActions()\n\n\n        // sts 08/13/21 start of addHeadersToAnnotatedActions()\n        //\n        // I think this bit of code could be simplified further by not modifying the original tmpFormattedActions, and simply iterating\n        // over it and creating a new data structure, which if the current record has a different label, pushes a header prior to pushing\n        // the current record into the new array\n\n        // put the object phases together into one object to represent the annotated log\n        tempFormattedActions = organizeLogDisplay(phaseNames, phases);\n\n        // Now insert critical action headers;\n        let priorCA = \"N/A\";\n\n        let finalLog = [];\n\n        tempFormattedActions.forEach((tempObject, j) => {\n\n            if (tempObject.type === \"intervention\" && tempObject.caLabel && !(priorCA === tempObject.caLabel)) {\n                //console.log(\"prior & current\", priorCA, tempObject.caLabel)\n                priorCA = tempObject.caLabel;\n                let tempHeaderObject = {\n                    \"id\": \"criticalActionSubHeader\",\n                    \"numericalID\": 1,\n                    \"status\": \"green\",\n                    \"contraindicatedWhy\": \"\",\n                    \"minimalWhy\": \"\",\n                    \"requiredWhy\": \"\",\n                    \"label\": tempObject.caLabel,\n                    \"protocol\": \"\",\n                    \"actionDescription\": \"\",\n                    \"timestamp\": -1\n                }\n                finalLog.push(tempHeaderObject);\n            }\n            finalLog.push(tempObject);\n        })\n\n        // now we analyze all that we've found in the log to see whether\n        // all the standards were done for each critical action and reset\n        // the status if not all are there but should be counted\n        // as minimal for the feedback.\n\n        // first loop through the formatted actions to collect what was found\n        // for each critical action that is standard.  minimal is a subset of standard\n        // so only need the standards that were done\n\n        let caActions = [];  //here we store the actual action objects\n        let caNames = [];  //here is the critical action names for the above with same order\n        let caIndex = 0;\n        let caActIndex = -1;\n\n        finalLog.forEach((action, j) => {\n            if (action.status.includes(\"standard\", \"standard-incorrect-answers\")) {  //only interventions have status of standard\n                if (!caNames.includes(action.caLabel)) {\n                    caActIndex = caIndex;\n                    caNames[caActIndex] = action.caLabel;\n                    caIndex++;\n                }\n                else { caActIndex = caNames.indexOf(action.caLabel) }\n                let actions = caActions[caActIndex];\n                if (!actions) { actions = []; }\n                actions.push(action);\n                caActions[caActIndex] = actions;\n            }\n        })\n\n\n        // If all the minimal were found but not all the standard were, then we\n        // need to remark the standard objects created for the minimal events\n        // to be minimal instead of standard and to insert the minimalWhy.  It isn't\n        // appropriate to give this feedback if all standard are present.\n        // Waited until now so that all the events are in one list instead of \n        // a list per phase,\n\n        let processedIds = tempFormattedActions.map(event => event.id);\n        let caIds = scenario.criticalActions.map(ca => ca.label);\n        // console.log(\"caIds: \", caIds);\n        caNames.forEach((caEntry, j) => {\n            //get the critical action definition for this standard entry \n            let caIndex = caIds.indexOf(caEntry);\n            let ca = scenario.criticalActions[caIndex];\n            let standardNeeded = ca.standard.map(standard => standard.id);\n            let minimalNeeded = ca.minimal.map(minimal => minimal.id);\n            if (minimalNeeded) {  //no point in doing anything else is no minimals were defined\n                let foundActions = caActions[j];\n                let found = foundActions.map(ca => ca.id);\n                //console.log(\"sn: \", standardNeeded, \"mn: \", minimalNeeded, \"found: \", found);\n                let allStandardFound = true;\n                let allMinimalFound = true;\n                for (let item of standardNeeded) {\n                    if (!found.includes(item)) {\n                        allStandardFound = false;\n                        break;\n                    }\n                }\n                for (let item of minimalNeeded) {\n                    if (!found.includes(item)) {\n                        allMinimalFound = false;\n                        break;\n                    }\n                }\n                //console.log(\"all standard? \", allStandardFound, \"all minimal? \", allMinimalFound)   \n                let numericalIDsChanged = [];\n                if (!allStandardFound && allMinimalFound) {\n                    minimalNeeded.forEach((foundId, j) => {\n                        let paIndex = processedIds.indexOf(foundId)\n                        let object = tempFormattedActions[paIndex];\n                        //console.log(\"object to modify\", object);\n                        object.minimalWhy = ca.minimalWhy;\n                        object.status = \"minimal\";\n                        numericalIDsChanged.push(object.numericalID);\n                        tempFormattedActions[paIndex] = object;\n                    })\n                    //redo color for header if needed\n                    let header = {};\n                    numericalIDsChanged.forEach((numericalID, z) => {\n                        header = findHeaderFor(numericalID, tempFormattedActions);\n                        if (header && header.status === \"green\") { header.status = \"yellow\" }\n                    })\n\n                }\n            }\n\n        })\n\n\n        console.log(\"Final log:\", finalLog);\n        setFormattedActions(finalLog);\n        // end of addHeadersToAnnotatedActions()\n\n\n    }\n\n\n    // eslint-disable-next-line\n    useEffect(\n        () => {\n            processEvents()\n            // eslint-disable-next-line\n        }, [] // empty list means this code will only be run on initial render\n    )\n\n\n\n    const dispHeaderRow = (entry) => {\n        return (\n            <>\n                {entry.id === \"criticalActionHeader\"\n                    ? <td colSpan=\"4\" className={getColor(entry)}>\n                        {entry.label}\n                    </td>\n                    : <td colSpan=\"10\" className={\"black\"} >\n                        {entry.label}\n                    </td>}\n                {showCommentColumn && <td><input /></td>}\n            </>\n        )\n    }\n\n    // all the details to display for a log entry given type and details available\n    const getLabel = (entry) => {\n        let type = entry.type;\n        let subPhase = entry.subPhase;\n        let finding = entry.finding;\n        let description = entry.actionDescription\n        let label = \"\"\n        if (type === \"obtain-vital-sign\") {\n            label = \"requested \" + entry.vital + \", found = \" + entry.value\n        }\n        else {\n            label = type\n            if (subPhase) {\n                label = label + \"/\" + subPhase;\n            }\n            label = label + \": \" + description\n            if (finding) {\n                label = label + \".  Finding: \" + finding\n            }\n        }\n        return label\n\n    }\n\n    const dispDataRow = (entry) => {\n        return (\n            <>\n                <td>{entry.numericalID}</td>\n                <td>{getTimestamp(entry)}</td>\n                <td className={getColor(entry)}>\n                    <span className=\"material-icons-outlined\">{getAssessmentIcon(entry)}</span>\n                    {getLabel(entry)}\n                </td>\n                <td>{getFeedback(entry)}</td>\n                {showCommentColumn && <td><input id={`comment-${entry.id}`} /></td>}\n            </>\n        )\n    }\n\n    if (null === formattedActions) {\n        return (<h3>processing</h3>)\n    }\n    return (\n        <>\n            <MDBNavBar\n                title={`Document: ${log.label}`}\n                leftNav={\n                    <Link to=\"/\">Back</Link>\n                }\n                rightNav={\n                    <Button\n                        color=\"primary\"\n                        onClick={toggleCommentColumn}>\n                        {(showCommentColumn) ? \"Hide comment column\" : \"Show comment column\"}\n                    </Button>\n                }\n            />\n            <form>\n                <div style={{ overflowY: \"auto\", maxHeight: \"700px\" }}>\n                    <Table borderless size=\"sm\">\n                        <thead>\n                            <tr>\n                                <th className=\"table-header\"> ID </th>\n                                <th className=\"table-header\"> Timestamp </th>\n                                <th className=\"table-header\"> Action Description </th>\n                                <th className=\"table-header\"> Feedback </th>\n                                {showCommentColumn && <th className=\"table-header\"> Comments </th>}\n                            </tr>\n                        </thead>\n                        <tbody className=\"scrolling\">\n                            {formattedActions.map((currentEntry, index) => (\n                                <tr key={index}>\n                                    {currentEntry.id === \"criticalActionHeader\" || currentEntry.id === \"criticalActionSubHeader\"\n                                        ? dispHeaderRow(currentEntry)\n                                        : dispDataRow(currentEntry)\n                                    }\n                                </tr>\n                            ))}\n                        </tbody>\n                    </Table>\n                </div>\n            </form>\n        </>\n    )\n}\n\n\nexport default Debriefing","import { useEffect, useState } from 'react'\n\nimport { useParams } from 'react-router-dom'\n\nimport { db } from \"@meddbriefer/mdb-firebase\"\n\nimport { getLog } from '../scripts/connect-firebase'\n\nimport { getScenarioByName } from '@meddbriefer/scenario-data'\n\nimport Debriefing from '../components/Debriefing'\n\nconst Log = () => {\n\n  const { logID } = useParams()\n  const [ log, setLog ] = useState(null)\n  const [ scenario, setScenario] = useState(null)\n  const [loaded, setLoaded] = useState(false)\n\n  useEffect(\n    () => {\n      getLog(logID)\n        .then(logData => {\n          setLog(logData)\n        })\n    }, [logID]\n  )\n\n  useEffect(\n    () => {\n      !!log && getScenarioByName(db, log.scenarioName, \"V2\")\n        .then(scenData => {\n          setScenario(scenData)\n          console.log(scenData)\n        })\n\n    }, [log]\n  )\n\n  useEffect(\n    () => {\n      !!scenario && setLoaded(true)\n    }, [scenario]\n  )\n\n  if (!loaded) {\n    return (<h3>Loading</h3>)\n  }\n  return ( \n      <Debriefing \n        log={log} \n        scenario={scenario}\n      /> \n    )\n\n\n}\n\nexport default Log;\n","import React from \"react\"\n\nimport MDBNavBar from \"./MDBNavBar\"\n\nconst UnauthedLayout = (props) => {\n\n    return (\n        <>\n            <MDBNavBar\n                title=\"MedDBriefer Authentication\"\n            />\n            { props.children }\n        </>\n    )\n}\n\nexport default UnauthedLayout","import React from \"react\"\n\nimport {\n    HashRouter as Router,\n    Switch,\n} from \"react-router-dom\"\n\nimport { AuthProvider, PrivateRoute } from \"@meddbriefer/mdb-auth\"\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport \"./styles.css\";\n\nimport LogList from \"./routes/LogList\"\nimport Log from \"./routes/Log\"\n\n\nimport UnauthedLayout from \"./components/UnauthedLayout\"\n\nconst App = (props) => {\n\n    return (\n        <AuthProvider>\n            <Router>\n\n                <Switch>\n                    <PrivateRoute\n                        exact path=\"/logs/:logID\"\n                        authFlowLayout={UnauthedLayout}\n                        component={Log}\n                    />\n                    {/*default (catchall) route*/}\n                    <PrivateRoute\n                        exact match=\"/\"\n                        authFlowLayout={UnauthedLayout}\n                        component={LogList}\n                    />\n                </Switch>\n            </Router>\n        </AuthProvider>\n    )\n}\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}