{"version":3,"sources":["../../../libs/mdb-firebase/index.js","../../../libs/scenario-data/constants.js","../../../libs/scenario-data/traumaScenarioV2MetaData.js","../../../libs/scenario-data/utils.js","../../../libs/scenario-data/traumaScenarioV2.js","../../../libs/scenario-data/index.js","scripts/connect-firebase.js","routes/LogList.js","components/debriefingUtils.js","utils.js","components/MDBNavBar.js","components/displayBaseDebriefing.js","components/AnalyzeDebriefing.js","routes/Log.js","routes/DisplayDebriefing.js","components/UnauthedLayout.js","App.js","reportWebVitals.js","index.js"],"names":["userApp","getOrInitializeApp","appCfg","name","app","appID","matches","firebase","apps","filter","options","appId","length","getApp","initializeApp","process","REACT_APP_APP_ENV","console","log","apiKey","authDomain","projectId","storageBucket","messagingSenderId","measurementId","prodApp","db","auth","firestore","ANSWER","ASSESS","ASSESS_OPTION","CL_PROMPT","HEADING","INTERV","NONE","ONE","OOM","PROMPT","REQUIRED","MDB_TYPES","Object","freeze","PHASE","SUB_PHASE","AWO","ASSESSO","DECISION","DECISION_OPTION","NESTED_CHECKLIST","REQURED","PROMPT_SET","SELECTION_TYPES","PREFIXES","SYSTEMS","AW","BR","BL","SH","CHECKLIST_META_DATA","id","type","TYPES","label","abbrLabel","promptID","verboseLabel","INTV_META_DATA","selectionType","ST","promptSetID","system","SYS","MEDS","MED_PURPOSES","MED_PROMPT_TYPES","MED_OPTIONS","MED_ADMINISTRATIVE_ROUTES","titleCase","txt","charAt","toUpperCase","slice","createRec","data","push","forEach","med","medID","_id","_label","mkMedPurposePromptSet","rec","prompt","option","answerID","routeID","mkMedPromptSet","getRecsOfType","arr","INTV_FORMS","PROMPTS","getChecklistData","retVal","metaData","find","undefined","includes","items","getLabel","getIntvData","getSystemIntvs","getIntervention","intvID","depth","obj","assign","Error","createInterventionForm","intv","prompts","constraints","dataEntry","map","showConstraints","expandPromptSetToPromptList","mkPhase","phaseType","phase","subPhases","interventionsMenu","headingID","PFX","sp","cld","it","createPhase","createSubPhase","getPublishedScenarioByID","scenarioID","collection","doc","get","then","verifyDocument","collectionId","documentName","a","document","getLog","logID","getDebriefLog","LogList","useState","logs","setLogs","logsLoaded","setLogsLoaded","useEffect","querySnapshot","docs","scenario","scenarioName","userName","timestamp","result","catch","error","Table","striped","borderless","size","hover","to","exceptionDefs","exceptions","colorTypes","iconTypes","assessmentEntries","getAssessmentEntry","currentEntry","aIndex","status","getColor","fixStrSp","textString","newString","textArray","split","lenTextArray","item","i","newItem","trim","getFeedback","feedbackString","feedbackArray","firstChar","substring","previousString","nextString","getTimestamp","seconds","Date","toISOString","substr","MDBNavBar","title","leftNav","rightNav","useContext","AuthContext","isAuthenticated","signOutUser","Navbar","color","dark","NavbarBrand","href","Nav","NavbarText","tag","Button","onClick","_","require","saveDebriefingLog","actions","docRef","ObserverFileCreater","ObserverFileName","commenter","schemaVersion","toLocaleString","newActionsList","newObj","filterUnknown","logObj","index","entries","key","val","pickBy","value","set","DisplayBaseDebriefing","context","showCommentColumn","setShowCommentColumn","formattedActions","setFormattedActions","entry","vitalLabel","regularLabel","getStatusLabel","metaEntry","intvMetaData","me","vital","vitalType","subPhase","actionDescription","findingsData","phaseLabel","finding","saveComment","orig","target","defaultValue","comment","entryID","newEntry","updateFormattedAction","dispDataRow","numericalID","className","rows","cols","onBlur","record","findIndex","displayIt","style","overflowY","maxHeight","colSpan","probLabel","analyzeEvents","events","setupProblems","problemDefs","problems","problemDef","problem","findings","allProblemProtocols","protocol","critical","solution","solutions","contraindications","minimalWhy","protocols","insertInPhaseInOrder","phaseNames","phases","object","objIndex","when","phaseIndex","lastIndexOf","phaseObjects","splice","getLastSubPhase","inPhaseId","subPhaseName","getSubPhases","reversedSubPhases","reverse","getLastSubPhaseIndex","phaseId","findPhases","findHeaderFor","candidateHeader","foundHeader","getPhaseLabel","phaseID","phaseData","insertInPhaseRelativeToSuggestedOrder","orderedArrayObjects","requiredSubphases","expertPhase","objectsBefore","objectBefore","requiredObjectBefore","required","objectAfter","requiredObjectAfter","indexBefore","indexAfter","indexRequiredBefore","indexRequiredAfter","insertionIndex","organizeLogDisplay","displayObjects","entryIndex","problemHeaderColor","phaseObject","tempHeaderObject","concat","evalForIncorrectAnswer","isIntervention","answers","associations","checkListCorrectness","Array","isArray","ansId","getCorrectAnswerLabel","checkListMetaData","answerLabels","answer","j","getAnswerLabel","answerLabel","findRequiredPhases","findSubphases","subphases","mainPhases","requiredPhaseNames","tempFormattedActions","tempConfirmedActions","priorPhase","event","tempObject","fldName","tempType","processingState","priortempObject","wrongAnswer","intervention","pop","answerCorrect","incorrectAnswersFB","incorrectAnswerFB","prob","PROBLEM_ACTION_FIELDS","action","k","optional","contra","why","contraindicatedWhy","indexCounter","checklistSteps","md","exceptionDef","exception","cls","assessmentFindings","assessmentFB","priorCA","finalActions","pActions","pNames","pIndex","pActIndex","indexOf","processedIds","pIds","pEntry","actionNeeded","minimalNeeded","minimal","found","allActionFound","allMinimalFound","numericalIDsChanged","foundId","header","z","AnalyzeDebriefing","useParams","observerLog","setObserverLog","setLog","setScenario","analyzed","setAnalyzed","loaded","setLoaded","checkOnOverwriting","window","confirm","observerLogData","alert","scenData","processEvents","logData","Log","DisplayDebriefing","processLog","UnauthedLayout","props","children","App","exact","path","authFlowLayout","component","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a999cfde.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport \"firebase/auth\";\nimport \"firebase/firestore\"\n\nconst prodFirebaseCfg = {\n    apiKey: \"AIzaSyBOgWAbXUGckpad2sk0IUo00hZsV4WxG0E\",\n    authDomain: \"meddbriefer-68cd4.firebaseapp.com\",\n    projectId: \"meddbriefer-68cd4\",\n    storageBucket: \"meddbriefer-68cd4.appspot.com\",\n    messagingSenderId: \"1087114796018\",\n    appId: \"1:1087114796018:web:679fbab38dbf78af0ce96b\",\n    measurementId: \"G-Q7QZKC9KHW\"\n}\n\nconst devFirebaseCfg = {\n    apiKey: \"AIzaSyBqnEMwEstp4D7Mvtbw9OTAiNJ7qza0Ses\",\n    authDomain: \"meddbriefer-dev.firebaseapp.com\",\n    projectId: \"meddbriefer-dev\",\n    storageBucket: \"meddbriefer-dev.appspot.com\",\n    messagingSenderId: \"144940722070\",\n    appId: \"1:144940722070:web:4de179ebb58d84a7679fb7\"\n};\n\n\nconst pamFirebaseCfg = {\n    apiKey: \"AIzaSyB9eVT-fu4TOjxHoPAXqsnz9tCcbTJkTOw\",\n    authDomain: \"pamdev-ea800.firebaseapp.com\",\n    projectId: \"pamdev-ea800\",\n    storageBucket: \"pamdev-ea800.appspot.com\",\n    messagingSenderId: \"366450927885\",\n    appId: \"1:366450927885:web:caa5f022ef1de182a0e844\",\n    measurementId: \"G-JC5XZEPYT1\"\n  };\n\n  const scottFirebaseConfig = {\n  apiKey: \"AIzaSyBEhbIdVW2F2vvvfvpNb2SsCDP9Yoc__z8\",\n  authDomain: \"scottdev-f6528.firebaseapp.com\",\n  projectId: \"scottdev-f6528\",\n  storageBucket: \"scottdev-f6528.appspot.com\",\n  messagingSenderId: \"447730403122\",\n  appId: \"1:447730403122:web:1727020dbac4ad4cf6f92b\"\n\n};\n\n// console.log(`NODE_ENV: ${process.env.NODE_ENV}`)\n\nlet userApp\n\nconst getApp = (appID) => {\n    const matches = firebase.apps.filter(app => app.options.appId === appID)\n    // console.log(\"matches\", matches)\n    return (matches.length === 1) ? matches[0] : null\n}\n\nconst getOrInitializeApp = (appCfg, name) => {\n    const app = getApp(appCfg.appId)\n    // console.log(`${appCfg.appId} already exists: ${!!app}`)\n    return (!!app) ? app : firebase.initializeApp(appCfg, name)\n}\n\n// don't reinitialize app if it already exists\n// const prodApp = !firebase.apps.length ? firebase.initializeApp(prodFirebaseCfg) : firebase.app()\n//const prodApp = getOrInitializeApp(prodFirebaseCfg, \"production\")\nif (\"pam\" === process.env.REACT_APP_APP_ENV) {\n    console.log(\"using pjordan config\")\n    userApp = getOrInitializeApp(pamFirebaseCfg, \"pam\")\n} else if (\"scott\" === process.env.REACT_APP_APP_ENV) {\n    console.log(\"using scott config\")\n    userApp = getOrInitializeApp(scottFirebaseConfig)\n}\nelse {\n    console.log(\"using production config\")\n    userApp = getOrInitializeApp(prodFirebaseCfg, \"production\")\n}\n\nconst prodApp = userApp;\n// const devApp = function() {\n//     if (process.env.NODE_ENV !== \"production\") {\n//         return getOrInitializeApp(devFirebaseCfg, \"development\")\n//      }\n//      return null\n// }()\n\n// console.log(firebase.apps)\n\n\n\n\nexport const auth = prodApp.auth()\nexport const db = prodApp.firestore()\n\n// export const db = function() {\n//     return process.env.NODE_ENV !== \"production\" ? devApp.firestore() : prodApp.firestore()\n// }()\n","// the following constants are deprecated (need to figure out how to handle this)\n// use MDB_TYPES, SELECTION_TYPES, PREFIXES, and SYSTEMS instead\nexport const ANSWER = \"answer\"\nexport const ASSESS = \"assessment\"\nexport const ASSESSO = \"assessment-option\"\nexport const ASSESS_OPTION = \"assessment-option\"\nexport const AWO = \"assessment-with-options\"\nexport const CB = \"checkbox\"\nexport const CL_PROMPT = \"checklist-prompt\"\nexport const CRIT_FAIL = \"critical-criteria\"\nexport const DECISION = \"decision\"\nexport const DECISION_OPTION = \"decision-option\"\nexport const HEADING = \"heading\" //not a leaf node, simply a step which has child steps\nexport const INTERV = \"intervention\" // an action performed on the patient\nexport const INTV_FORM = \"intervention-form\"\nexport const NESTED_CHECKLIST = \"nested-checklist\"\nexport const NONE = \"none\"\nexport const ONE = \"one\"\nexport const OOM = \"one-or-more\"\nexport const OPTION = \"option\"\nexport const PHASE = \"phase\"\nexport const PROMPT = \"prompt\"\nexport const PROMPT_SET = \"prompt-set\"\nexport const REQUIRED = \"required-action\"   // an action the EMT performs, but not on the patient\n// keeping as I had a typo. need to deprecate somehow\nexport const REQURED = REQUIRED\nexport const SUB_PHASE = \"sub-phase\"\n\nexport const MDB_TYPES = Object.freeze({\n    PHASE: PHASE,\n    SUB_PHASE: SUB_PHASE,\n    ASSESS: ASSESS,\n    AWO: AWO,\n    ASSESS_OPTION: ASSESS_OPTION,\n    ASSESSO: ASSESS_OPTION,\n    CL_PROMPT: CL_PROMPT,\n    DECISION: DECISION,\n    DECISION_OPTION: DECISION_OPTION,\n    NESTED_CHECKLIST: NESTED_CHECKLIST,\n    REQUIRED: REQUIRED,\n    REQURED: REQUIRED,\n    INTERV: INTERV,\n    PROMPT_SET: PROMPT_SET,\n    PROMPT: PROMPT,\n    ANSWER: ANSWER,\n})\nexport const SELECTION_TYPES = Object.freeze({\n    ONE: ONE,\n    OOM: OOM,\n    NONE: NONE\n})\n\nexport const PREFIXES = Object.freeze({\n    PHASE: \"\",\n    SUB_PHASE: \"\",\n    ANSWER: \"answer-\",\n    ASSESS: \"assess-\",\n    AWO: \"assessment-with-options-\",\n    ASSESS_OPTION: \"assess-option-\",\n    CL_PROMPT: \"cl-prompt-\",\n    DECISION: \"decision-\",\n    DECISION_OPTION: \"decision-option-\",\n    INTERV: \"intv-\",\n    PROMPT_SET: \"prompt-set-\",\n    PROMPT: \"prompt-\",\n    REQUIRED: \"required-action-\",\n})\n\nexport const SYSTEMS = Object.freeze({\n    AW: \"airway\",\n    BR: \"breathing\",\n    BL: \"bleeding\",\n    SH: \"shock\",\n})\n","\nimport {\n    INTERV,\n    MDB_TYPES as TYPES,\n    // PREFIXES as PFX,\n    SELECTION_TYPES as ST,\n    SYSTEMS as SYS\n} from \"./constants.js\"\n\nexport const CHECKLIST_META_DATA = [\n    { id: \"bsi\", type: TYPES.PHASE, label: \"BSI\" },\n        { id: \"required-action-apply-ppe\", type: TYPES.REQUIRED, label: \"Takes or verbalizes appropriate PPE precautions.\" },\n\n    { id: \"scene-size-up\", type: TYPES.PHASE, label: \"Scene Size-Up\" },\n        { id: \"assess-scene-safety\", type: TYPES.ASSESS, abbrLabel: \"Scene Safety\", label: \"Determines the scene/situation is safe\"  },\n        { id: \"assess-injury-mechanism\", type: TYPES.ASSESS, abbrLabel: \"Mechanism of Injury\", label: \"Determines the mechanism of injury/nature of illness\" },\n        { id: \"assess-num-patients\", type: TYPES.ASSESS, abbrLabel: \"Num Patients\", label: \"Determines the number of patients\" },\n        { id: \"assess-need-additional-help\", type: TYPES.ASSESS, abbrLabel: \"Additional Help\", label: \"Requests additional help if necessary\" },\n        { id: \"required-action-considers-stabilize-spine\", type: TYPES.REQUIRED, label: \"Considers stabilization of spine\" },\n\n    { id: \"primary-survey\", type: TYPES.PHASE, label: \"Primary Survey\" },\n        { id: \"general-impression\", type: TYPES.SUB_PHASE, label: \"General Impression\" },\n            { id: \"assess-patient-condition\", type: TYPES.ASSESS, abbrLabel: \"General Impression\", label: \"States or requests general impression\" },\n            { id: \"assess-loc\", type: TYPES.ASSESS, abbrLabel: \"LOC\", label: \"Assesses responsiveness/level of consciousness\" },\n            { id: \"assess-life-threats\", type: TYPES.ASSESS, abbrLabel: \"Life Threats\", label: \"Determines chief complaint/apparent life-threats\" },\n        { id: \"airway\", type: TYPES.SUB_PHASE, label: \"Airway\" },\n            { id: \"assess-airway\", type: TYPES.ASSESS, abbrLabel: \"Airway\", label: \"Assesses airway\" },\n            // { id: \"assess-response-airway-mgmt\", type: TYPES.ASSESS, label: \"Assesses patient's response to airway management\", abbrLabel: \"Airway Mgmt Response\" },\n        { id: \"breathing\", type: TYPES.SUB_PHASE, label: \"Breathing\" },\n            { id: \"assess-breathing\", type: TYPES.ASSESS, abbrLabel: \"Breathing\", label: \"Assesses breathing\" },\n            // { id: \"assess-response-breathing-mgmt\", type: TYPES.ASSESS, label: \"Assesses patient’s response to breathing management\", abbrLabel: \"Breathing Mgmt Response\" },\n        { id: \"circulation\", type: TYPES.SUB_PHASE, label: \"Circulation\" },\n            { id: \"assess-pulse\", type: TYPES.ASSESS, abbrLabel: \"Pulse\", label: \"Checks pulse\" },\n            { id: \"assess-skin\", type: TYPES.ASSESS, abbrLabel: \"Skin\", label: \"Assesses skin (color, temperature, condition)\" },\n            { id: \"assess-major-bleeding\", type: TYPES.ASSESS, abbrLabel: \"Major Bleeding\", label: \"Checks for major bleeding\" },\n            // { id: \"assess-response-bleeding-mgmt\", type: TYPES.ASSESS, label: \"Assesses patient's response to managing severe bleeding\", abbrLabel: \"Major Bleeding Mgmt Response\" },\n            // { id: \"assess-response-shock-mgmt\", type: TYPES.ASSESS, label: \"Assesses patient's response to managing shock\", abbrLabel: \"Shock Mgmt Response\" },\n\n        { id: \"transport-decision\", type: TYPES.SUB_PHASE, label: \"Transport Decision\" },\n            { id: \"decision-is-load-and-go\", type: TYPES.DECISION, label: \"Is this a critical patient?\" },\n                { id: \"decision-option-is-load-and-go\",   type: TYPES.DECISION_OPTION, abbrLabel: \"Yes\", label: \"Is load-and-go\",   promptID: \"decision-is-load-and-go\" },\n                { id: \"decision-option-is-stay-and-play\", type: TYPES.DECISION_OPTION, abbrLabel: \"No\",  label: \"Is stay-and-play\", promptID: \"decision-is-load-and-go\" },\n\n    { id: \"history-taking\", type: TYPES.PHASE, label: \"History Taking\" },\n        { id: \"required-action-obtains-vitals\", type: TYPES.REQUIRED, abbrLabel: \"Obtains vitals\", label: \"Obtains (or directs assistant to obtain) baseline vital signs\" },\n        { id: \"required-action-attempt-obtain-sample\", type: TYPES.REQUIRED, abbrLabel: \"Obtains SAMPLE\", label: \"Attempts to obtain SAMPLE history\" },\n        { id: \"assess-opqrst-info\", type: TYPES.ASSESS, abbrLabel: \"Obtains OPQRST\", label: \"Attempts to obtain OPQRST\" },\n\n    { id: \"secondary-assessment\", type: TYPES.PHASE, label: \"Secondary Survey\" },\n    // { id: \"cl-prompt-general-state-looking-listening-feeling\", type: CL_PROMPT, label: \"Prompt students to state what they are looking/listening/feeling for throughout.\" },\n        { id: \"trauma-expose\", type: TYPES.SUB_PHASE, label: \"Trauma Expose\" },\n            { id: \"required-action-remove-patient-clothing-as-needed\", type: TYPES.REQUIRED, label: \"Exposes (and recovers) anatomical areas as necessary\" },\n        { id: \"head\", type: TYPES.SUB_PHASE, label: \"Head\" },\n            { id: \"assess-inspects-head\", type: TYPES.ASSESS, abbrLabel: \"Inspect Head\", label: \"Inspects the head\" },\n            { id: \"assess-palpate-skull\", type: TYPES.ASSESS, abbrLabel: \"Palpate Skull\", label: \"Palpates the skull\" },\n            { id: \"assess-eyes-reactiveness\", type: TYPES.ASSESS, abbrLabel: \"PERRL\", label: \"Assesses eyes for reactiveness\" },\n            { id: \"assess-eyes-ears-nose-mouth\", type: TYPES.ASSESS, abbrLabel: \"Head Fluids\", label: \"Assesses eyes, ears, nose, mouth\" },\n        { id: \"neck\", type: TYPES.SUB_PHASE, label: \"Neck\" },\n            { id: \"assess-inspects-neck\", type: TYPES.ASSESS, abbrLabel: \"Neck\", label: \"Inspects the neck\" },\n            { id: \"assess-trachea\", type: TYPES.ASSESS, abbrLabel: \"Trachea\", label: \"Inspects position of trachea\" },\n            { id: \"assess-jugular\", type: TYPES.ASSESS, abbrLabel: \"Jugular\", label: \"Inspects jugular veins\" },\n            { id: \"assess-palpate-cervical-spine\", type: TYPES.ASSESS, abbrLabel: \"Palpate C-Spine\", label: \"Palpates cervical spine\" },\n        { id: \"shoulders\", type: TYPES.SUB_PHASE, label: \"Shoulders\" },\n            { id: \"assess-check-shoulders\", type: TYPES.ASSESS, abbrLabel: \"Check Shoulders\", label: \"Checks if stable and intact\" },\n        { id: \"clavicle\", type: TYPES.SUB_PHASE, label: \"Clavicle\" },\n            { id: \"assess-inspect-clavicle\", type: TYPES.ASSESS, abbrLabel: \"Checks Clavicle\", label: \"Checks if stable and intact\" },\n        { id: \"chest\", type: TYPES.SUB_PHASE, label: \"Chest\" },\n            { id: \"assess-inspect-chest\", type: TYPES.ASSESS, abbrLabel: \"Inspects Chest\", label: \"Inspects Chest\" },\n            { id: \"assess-palpate-chest\", type: TYPES.ASSESS, abbrLabel: \"Palpate Chest\", label: \"Palpates chest\" },\n            { id: \"assess-auscultate-chest\", type: TYPES.ASSESS, abbrLabel: \"Auscultate Chest\", label: \"Auscultates chest\" },\n        { id: \"abdomen-pelvis\", type: TYPES.SUB_PHASE, label: \"Abdomen/pelvis\" },\n            { id: \"assess-inspects-abdomen\", type: TYPES.ASSESS, abbrLabel: \"Inspects Abdomen\", label: \"Inspects abdomen\" },\n            { id: \"assess-palpate-abdomen\", type: TYPES.ASSESS, abbrLabel: \"Palpate Abdomen\", label: \"Palpates abdomen\" },\n            { id: \"assess-pelvis\", type: TYPES.ASSESS, abbrLabel: \"Pelvis\", label: \"Assesses pelvis\" },\n            { id: \"assess-genitalia-perineum\", type: TYPES.ASSESS, abbrLabel: \"Genitalia/Perineum\", label: \"Assesses genitalia/perineum\" },\n        { id: \"lower-extremities\", type: TYPES.SUB_PHASE, label: \"Lower extremities\" },\n            { id: \"assessment-with-options-legs-inspects\", type: TYPES.AWO, label: \"Inspects lower extremities\", abbrLabel: \"Inspect Legs\" },\n                { id: \"assess-option-legs-inspects-bilaterally\", type: TYPES.ASSESS_OPTION, abbrLabel: \"Bilaterally\",     label: \"Inspects lower extremities bilaterally\",        promptID: \"assessment-with-options-legs-inspects\" },\n                { id: \"assess-option-legs-inspects-left-only\",   type: TYPES.ASSESS_OPTION, abbrLabel: \"Left side only\",  label: \"Inspects lower extremities on left side only\",  promptID: \"assessment-with-options-legs-inspects\" },\n                { id: \"assess-option-legs-inspects-right-only\",  type: TYPES.ASSESS_OPTION, abbrLabel: \"Right side only\", label: \"Inspects lower extremities on right side only\", promptID: \"assessment-with-options-legs-inspects\" },\n            { id: \"assessment-with-options-legs-motor-function\", type: TYPES.AWO, label: \"Assesses motor function\", abbrLabel: \"Legs Motor Func.\" },\n                { id: \"assess-option-legs-motor-function-bilaterally\", type: TYPES.ASSESS_OPTION, abbrLabel: \"Bilaterally\",     label: \"Assesses lower extremities motor function bilaterally\",        promptID: \"assessment-with-options-legs-motor-function\" },\n                { id: \"assess-option-legs-motor-function-left-only\",   type: TYPES.ASSESS_OPTION, abbrLabel: \"Left side only\",  label: \"Asessess lower extremities motor function on left side only\",  promptID: \"assessment-with-options-legs-motor-function\" },\n                { id: \"assess-option-legs-motor-function-right-only\",  type: TYPES.ASSESS_OPTION, abbrLabel: \"Right side only\", label: \"Asessess lower extremities motor function on right side only\", promptID: \"assessment-with-options-legs-motor-function\" },\n            { id: \"assessment-with-options-legs-sensory-function\", type: TYPES.AWO, abbrLabel: \"Legs Sensory Func.\", label: \"Assesses sensory function\" },\n                { id: \"assess-option-legs-sensory-function-bilaterally\", type: TYPES.ASSESS_OPTION, abbrLabel: \"Bilaterally\",     label: \"Assesses lower extremities sensory function bilaterally\",        promptID: \"assessment-with-options-legs-sensory-function\" },\n                { id: \"assess-option-legs-sensory-function-left-only\",   type: TYPES.ASSESS_OPTION, abbrLabel: \"Left side only\",  label: \"Asessess lower extremities sensory function on left side only\",  promptID: \"assessment-with-options-legs-sensory-function\" },\n                { id: \"assess-option-legs-sensory-function-right-only\",  type: TYPES.ASSESS_OPTION, abbrLabel: \"Right side only\", label: \"Asessess lower extremities sensory function on right side only\", promptID: \"assessment-with-options-legs-sensory-function\" },\n            { id: \"assessment-with-options-legs-pulse\", type: TYPES.AWO, label: \"Checks pulse\", abbrLabel: \"Legs Pulse\" },\n                { id: \"assess-option-legs-pulse-bilaterally\", type: TYPES.ASSESS_OPTION, abbrLabel: \"Bilaterally\",     label: \"Assesses lower extremities pulse bilaterally\",        promptID: \"assessment-with-options-legs-pulse\" },\n                { id: \"assess-option-legs-pulse-left-only\",   type: TYPES.ASSESS_OPTION, abbrLabel: \"Left side only\",  label: \"Asessess lower extremities pulse on left side only\",  promptID: \"assessment-with-options-legs-pulse\" },\n                { id: \"assess-option-legs-pulse-right-only\",  type: TYPES.ASSESS_OPTION, abbrLabel: \"Right side only\", label: \"Asessess lower extremities pulse on right side only\", promptID: \"assessment-with-options-legs-pulse\" },\n        { id: \"upper-extremities\", type: TYPES.SUB_PHASE, label: \"Upper extremities\" },\n            { id: \"assessment-with-options-arms-inspects\", type: TYPES.AWO, abbrLabel: \"Inspects Arms\", label: \"Inspects upper extremities\" },\n                { id: \"assess-option-arms-inspects-bilaterally\", type: TYPES.ASSESS_OPTION, abbrLabel: \"Bilaterally\",     label: \"Inspects upper extremities bilaterally\",        promptID: \"assessment-with-options-arms-inspects\" },\n                { id: \"assess-option-arms-inspects-left-only\",   type: TYPES.ASSESS_OPTION, abbrLabel: \"Left side only\",  label: \"Inspects upper extremities on left side only\",  promptID: \"assessment-with-options-arms-inspects\" },\n                { id: \"assess-option-arms-inspects-right-only\",  type: TYPES.ASSESS_OPTION, abbrLabel: \"Right side only\", label: \"Inspects upper extremities on right side only\", promptID: \"assessment-with-options-arms-inspects\" },\n            { id: \"assessment-with-options-arms-motor-function\", type: TYPES.AWO, abbrLabel: \"Arms Motor Func.\", label: \"Assesses motor function\" },\n                { id: \"assess-option-arms-motor-function-bilaterally\", type: TYPES.ASSESS_OPTION, abbrLabel: \"Bilaterally\",     label: \"Assesses upper extremities motor function bilaterally\",        promptID: \"assessment-with-options-arms-motor-function\" },\n                { id: \"assess-option-arms-motor-function-left-only\",   type: TYPES.ASSESS_OPTION, abbrLabel: \"Left side only\",  label:  \"Asessess upper extremities motor function on left side only\", promptID: \"assessment-with-options-arms-motor-function\" },\n                { id: \"assess-option-arms-motor-function-right-only\",  type: TYPES.ASSESS_OPTION, abbrLabel: \"Right side only\", label: \"Asessess upper extremities motor function on right side only\", promptID: \"assessment-with-options-arms-motor-function\" },\n            { id: \"assessment-with-options-arms-sensory-function\", type: TYPES.AWO, abbrLabel: \"Arms Sensory Func.\", label: \"Assesses sensory function\" },\n                { id: \"assess-option-arms-sensory-function-bilaterally\", type: TYPES.ASSESS_OPTION, abbrLabel: \"Bilaterally\",     label: \"Assesses upper extremities sensory function bilaterally\",        promptID: \"assessment-with-options-arms-sensory-function\" },\n                { id: \"assess-option-arms-sensory-function-left-only\",   type: TYPES.ASSESS_OPTION, abbrLabel: \"Left side only\",  label: \"Asessess upper extremities sensory function on left side only\",  promptID: \"assessment-with-options-arms-sensory-function\" },\n                { id: \"assess-option-arms-sensory-function-right-only\",  type: TYPES.ASSESS_OPTION, abbrLabel: \"Right side only\", label: \"Asessess upper extremities sensory function on right side only\", promptID: \"assessment-with-options-arms-sensory-function\" },\n            { id: \"assessment-with-options-arms-pulse\", type: TYPES.AWO, abbrLabel: \"Arms Pulse\", label: \"Checks pulse\" },\n                { id: \"assess-option-arms-pulse-bilaterally\", type: TYPES.ASSESS_OPTION, abbrLabel: \"Bilaterally\",     label: \"Assesses upper extremities pulse bilaterally\",        promptID: \"assessment-with-options-arms-pulse\" },\n                { id: \"assess-option-arms-pulse-left-only\",   type: TYPES.ASSESS_OPTION, abbrLabel: \"Left side only\",  label: \"Asessess upper extremities pulse on left side only\",  promptID: \"assessment-with-options-arms-pulse\" },\n                { id: \"assess-option-arms-pulse-right-only\",  type: TYPES.ASSESS_OPTION, abbrLabel: \"Right side only\", label: \"Asessess upper extremities pulse on right side only\", promptID: \"assessment-with-options-arms-pulse\" },\n\n        { id: \"posterior\", type: TYPES.SUB_PHASE, label: \"Posterior\", verboseLabel: \"Posterior thorax, lumbar, and buttocks\" },\n            { id: \"assess-posterior-inspects\", type: TYPES.ASSESS, label: \"Inspects posterior thorax, lumbar, buttocks\", abbrLabel: \"Inspects Posterior\" },\n            { id: \"assess-palpate-posterior-thorax\", type: TYPES.ASSESS, label: \"Palpates posterior thorax/lumbar/buttocks\", abbrLabel: \"Palpate Posterior/Thorax\" },\n\n        { id: \"cardiac-monitoring\", type: TYPES.SUB_PHASE, label: \"Cardiac Monitoring\" },\n            { id: \"assess-cardiac-monitoring\", type: TYPES.ASSESS, label: \"Performs cardiac monitoring\", abbrLabel: \"Cardiac Monitoring\" },\n\n    // { id: \"heading-transfer-patient\", type: TYPES.PHASE, label: \"Transfer Patient\" },\n\n        { id: \"ongoing-mgmt-plan\", type: TYPES.PHASE, label: \"Ongoing Reassessment\" },\n            { id: \"repeat-primary-survey\", type: TYPES.SUB_PHASE, label: \"Repeat Primary Survey\" },\n                { id: \"required-action-reassess-loc\", type: TYPES.REQUIRED, label: \"Reassess level of conciousness\" },\n                { id: \"required-action-reassess-airway\", type: TYPES.REQUIRED, label: \"Reassess airway\" },\n                { id: \"required-action-reassess-breathing\", type: TYPES.REQUIRED, label: \"Reassess breathing\" },\n                { id: \"required-action-reassess-circulation\", type: TYPES.REQUIRED, label: \"Reassess circulation\" },\n\n            { id: \"repeat-secondary-survey\", type: TYPES.SUB_PHASE, label: \"Repeat Secondary Survey\" },\n                { id: \"required-action-reassess-vital-signs\", type: TYPES.REQUIRED, label: \"Reassess vital signs\" },\n                { id: \"required-action-reassess-head-to-toe\", type: TYPES.REQUIRED, label: \"Repeat rapid head-to-toe assessment\" },\n            { id: \"contact-facility\", type: TYPES.SUB_PHASE, label: \"Contact facility\" },\n                { id: \"required-action-radio-receiving-facility\", type: TYPES.REQUIRED, label: \"Radio report to receiving facility\" },\n]\n\n\nexport const INTV_META_DATA = [\n    // prompts shared by numerous interventions are listed prior to definitions of interventions and the prompts which are specfic to them\n    { id: \"prompt-set-iv-details\", type: TYPES.PROMPT_SET},\n        { id: \"prompt-num-ivs\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"How many IVs would you establish?\", promptSetID: \"prompt-set-iv-details\"},\n            { id: \"answer-num-ivs-one\", type: TYPES.ANSWER, label: \"One IV (total)\", abbrLabel: \"One (total)\", promptID: \"prompt-num-ivs\"},\n            { id: \"answer-num-ivs-two\", type: TYPES.ANSWER, label: \"Two IVs (total)\", abbrLabel: \"Two (total)\", promptID: \"prompt-num-ivs\" },\n            { id: \"answer-num-ivs-other\", type: TYPES.ANSWER, label: \"Other number of IVs (total)\", abbrLabel: \"Other\", promptID: \"prompt-num-ivs\" },\n        { id: \"prompt-iv-size\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"What size IV?\", promptSetID: \"prompt-set-iv-details\" },\n            { id: \"answer-iv-size-large-as-possible\", type: TYPES.ANSWER,  label: \"Large bore IV (14 or 16 gauge)\", abbrLabel: \"Large bore (14 or 16 gauge\", promptID: \"prompt-iv-size\" },\n            { id: \"answer-iv-size-other\", type: TYPES.ANSWER, label: \"Other\", promptID: \"prompt-iv-size\" },\n\n    { id: \"prompt-set-et-tube-size\", type: TYPES.PROMPT_SET },\n        { id: \"prompt-et-tube-size\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"What size tube would you use?\", abbrLabel: \"Tube size?\", promptSetID: \"prompt-set-et-tube-size\" },\n            { id: \"answer-et-tube-size-1\",   type: TYPES.ANSWER, label: \"ET tube size 1\",   abbrLabel: \"Size 1\",   promptID: \"prompt-et-tube-size\" },\n            { id: \"answer-et-tube-size-1-5\", type: TYPES.ANSWER, label: \"ET tube size 1.5\", abbrLabel: \"Size 1.5\", promptID: \"prompt-et-tube-size\" },\n            { id: \"answer-et-tube-size-2\",   type: TYPES.ANSWER, label: \"ET tube size 2\",   abbrLabel: \"Size 2\",   promptID: \"prompt-et-tube-size\" },\n            { id: \"answer-et-tube-size-2-5\", type: TYPES.ANSWER, label: \"ET tube size 2.5\", abbrLabel: \"Size 2.5\", promptID: \"prompt-et-tube-size\" },\n            { id: \"answer-et-tube-size-3\",   type: TYPES.ANSWER, label: \"ET tube size 3\",   abbrLabel: \"Size 3\",   promptID: \"prompt-et-tube-size\" },\n            { id: \"answer-et-tube-size-4\",   type: TYPES.ANSWER, label: \"ET tube size 4\",   abbrLabel: \"Size 4\",   promptID: \"prompt-et-tube-size\" },\n            { id: \"answer-et-tube-size-5\",   type: TYPES.ANSWER, label: \"ET tube size 5\",   abbrLabel: \"Size 5\",   promptID: \"prompt-et-tube-size\" },\n            { id: \"answer-et-tube-size-6\",   type: TYPES.ANSWER, label: \"ET tube size 6\",   abbrLabel: \"Size 6\",   promptID: \"prompt-et-tube-size\" },\n\n    { id: \"prompt-set-confirm-tube-placement\", type: TYPES.PROMPT_SET },\n        { id: \"prompt-confirm-correct-tube-placement\", type: TYPES.PROMPT, selectionType: ST.OOM, label: \"What techniques will you use to confirm correct tube placement?\",               promptSetID: \"prompt-set-confirm-tube-placement\" },\n            { id: \"answer-confirm-tube-placement-visualize-tube-pass-through-vocal-cords\",          type: TYPES.ANSWER, label: \"Visualization of tube passing through the vocal cords\",   promptID: \"prompt-confirm-correct-tube-placement\" },\n            { id: \"answer-confirm-tube-placement-visualize-chest-rise-and-fall-during-ventilation\", type: TYPES.ANSWER, label: \"Visualization of chest rise and fall during ventilation\", promptID: \"prompt-confirm-correct-tube-placement\"},\n            { id: \"answer-confirm-tube-placement-auscultate-epigastrium\",                           type: TYPES.ANSWER, label: \"Auscultate bilaterally and over epigastrium\",             promptID: \"prompt-confirm-correct-tube-placement\" },\n            { id: \"answer-confirm-tube-placement-co2-capnography\",                                  type: TYPES.ANSWER, label: \"Exhaled CO2 capnography or capnometry\",                   promptID: \"prompt-confirm-correct-tube-placement\" },\n            { id: \"answer-confirm-tube-placement-other\",                                            type: TYPES.ANSWER, label: \"Confirm tube placement: other\", abbrLabel: \"Other\",       promptID: \"prompt-confirm-correct-tube-placement\" },\n            // { id: \"answer-check-oxygen-saturation\", type: TYPES.ANSWER, label: \"Check oxygen saturation\", promptID: \"prompt-confirm-correct-tube-placement\" },\n\n\n    // start of interventions and prompts specific to those interventions\n    { id: \"intv-open-airway-method-head-tilt\", type: TYPES.INTERV, system: SYS.AW, label: \"Head tilt chin lift\"  },\n    { id: \"intv-open-airway-method-modified-jaw-thrust\", type: TYPES.INTERV, system: SYS.AW, label: \"Modified jaw thrust\" },\n    // { id: \"intv-open-airway-method-jaw-thrust\", type: TYPES.INTERV, system: SYS.AW, label: \"Jaw thrust\" },\n    // { id: \"intv-open-airway-method-other\", type: TYPES.INTERV, system: SYS.AW, label: \"Other\" },\n\n    { id: \"intv-airway-patency-technique-suction-airway\", type: TYPES.INTERV, system: SYS.AW, label: \"Suction airway\" },\n        { id: \"prompt-set-airway-patency-suction\", type: TYPES.PROMPT_SET },\n            { id: \"prompt-airway-patency-suction-device\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"What kind of suction catheter will you use?\", abbrLabel: \"Catheter type?\", promptSetID: \"prompt-set-airway-patency-suction\" },\n                { id: \"answer-airway-patency-suction-yankauer\", type: TYPES.ANSWER, label: \"Yankauer\", promptID: \"prompt-airway-patency-suction-device\" },\n                { id: \"answer-airway-patency-suction-long-multiuse\", type: TYPES.ANSWER, label: \"Long, multiuse\", promptID: \"prompt-airway-patency-suction-device\" },\n                { id: \"answer-airway-patency-suction-other\", type: TYPES.ANSWER, label: \"Other\", promptID: \"prompt-airway-patency-suction-device\" },\n\n    // remove foreign body obstructions interventions\n    { id: \"intv-manual-finger-sweep\", type: TYPES.INTERV, system: SYS.AW, label: \"Manual (finger sweep)\",  },\n    { id: \"intv-magill-forceps-assisted\", type: TYPES.INTERV, system: SYS.AW, label: \"Magill forceps assisted\",  },\n    { id: \"intv-slat\", type: TYPES.INTERV, system: SYS.AW, label: \"SLAT\",  },\n\n    { id: \"intv-oropharyngeal-airway\", type: TYPES.INTERV, system: SYS.AW, label: \"Oropharyngeal adjunct\" },\n        // disabling generic prompt for now\n        // { id: \"prompt-set-when-naso-vs-oro\", type: TYPES.PROMPT_SET },\n        //     { id: \"prompt-when-naso-vs-oro\", type: TYPES.PROMPT, selectionType: ST.OOM, label: \"When would you use a nasopharyngeal airway instead of an oropharyngeal airway?\", promptSetID: \"prompt-set-when-naso-vs-oro\" },\n        //         { id: \"answer-use-naso-when-gag-reflex\", type: TYPES.ANSWER, label: \"When patient has a gag reflex\", promptID: \"prompt-when-naso-vs-oro\" },\n        //         { id: \"answer-use-naso-when-no-gag-reflex-but-no-opa\", type: TYPES.ANSWER, label: \"When patient doesn't have a gag reflex but doesn't accept OPA\", promptID: \"prompt-when-naso-vs-oro\" },\n        //         { id: \"answer-use-naso-when-no-facial-trauma\", type: TYPES.ANSWER, label: \"When patient does not have facial trauma\", promptID: \"prompt-when-naso-vs-oro\" },\n        //         { id: \"answer-use-naso-when-other\", type: TYPES.ANSWER, label: \"Other\", promptID: \"prompt-when-naso-vs-oro\" },\n\n    { id: \"intv-nasopharyngeal-airway\", type: TYPES.INTERV, system: SYS.AW, label: \"Nasopharyngeal adjunct\" },\n        // disabling generic prompt for now\n        // { id: \"prompt-set-when-oro-vs-naso\", type: TYPES.PROMPT_SET },\n        //     { id: \"prompt-when-oro-vs-naso\", type: TYPES.PROMPT, selectionType: ST.OOM, label: \"When would you use a oropharyngeal airway instead of an nasopharyngeal airway?\", promptSetID: \"prompt-set-when-oro-vs-naso\" },\n        //         { id: \"answer-use-oro-when-no-gag-reflex\", type: TYPES.ANSWER, label: \"When patient does not have a gag reflex\", promptID: \"prompt-when-oro-vs-naso\" },\n        //         { id: \"answer-use-oro-when-other\", type: TYPES.ANSWER, label: \"Other\", promptID: \"prompt-when-oro-vs-naso\" },\n\n    // als patency interventions\n    { id: \"intv-alternative-rescue-airway\", type: TYPES.INTERV, system: SYS.AW, label: \"Altenative/rescue airway\" },\n        { id: \"prompt-set-alternative-rescue-airway\", type: TYPES.PROMPT_SET },\n            { id: \"prompt-alternative-rescue-airway-type\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"What airway type?\", abbrLabel: \"What type?\", promptSetID: \"prompt-set-alternative-rescue-airway\"},\n                { id: \"answer-alternative-rescue-airway-type-combitube\", type: TYPES.ANSWER, label: \"Combitube\", promptID: \"prompt-alternative-rescue-airway-type\" },\n                { id: \"answer-alternative-rescue-airway-type-lta\", type: TYPES.ANSWER, label: \"Laryngeal tube airway (LTA; King tube)\", promptID: \"prompt-alternative-rescue-airway-type\" },\n                { id: \"answer-alternative-rescue-airway-type-lma\", type: TYPES.ANSWER, label: \"Laryngeal mask airway (LMA)\", promptID: \"prompt-alternative-rescue-airway-type\" },\n                { id: \"answer-alternative-rescue-airway-type-igel\", type: TYPES.ANSWER, label: \"Igel\", promptID: \"prompt-alternative-rescue-airway-type\" },\n                { id: \"answer-alternative-rescue-airway-type-other\", type: TYPES.ANSWER, label: \"Other\", promptID: \"prompt-alternative-rescue-airway-type\" },\n        { id: \"prompt-set-king-tube-size\", type: TYPES.PROMPT_SET },\n            { id: \"prompt-king-tube-size\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"What size tube would you use?\", abbrLabel: \"Tube size?\", promptSetID: \"prompt-set-king-tube-size\" },\n                { id: \"answer-king-tube-size-0\",   type: TYPES.ANSWER, label: \"King tube size 0\",   abbrLabel: \"Size 0\",   promptID: \"prompt-king-tube-size\" },\n                { id: \"answer-king-tube-size-1\",   type: TYPES.ANSWER, label: \"King tube size 1\",   abbrLabel: \"Size 1\",   promptID: \"prompt-king-tube-size\" },\n                { id: \"answer-king-tube-size-2\",   type: TYPES.ANSWER, label: \"King tube size 2\",   abbrLabel: \"Size 2\",   promptID: \"prompt-king-tube-size\" },\n                { id: \"answer-king-tube-size-2-5\", type: TYPES.ANSWER, label: \"King tube size 2.5\", abbrLabel: \"Size 2.5\", promptID: \"prompt-king-tube-size\" },\n                { id: \"answer-king-tube-size-3\",   type: TYPES.ANSWER, label: \"King tube size 3\",   abbrLabel: \"Size 3\",   promptID: \"prompt-king-tube-size\" },\n                { id: \"answer-king-tube-size-4\",   type: TYPES.ANSWER, label: \"King tube size 4\",   abbrLabel: \"Size 4\",   promptID: \"prompt-king-tube-size\" },\n                { id: \"answer-king-tube-size-5\",   type: TYPES.ANSWER, label: \"King tube size 5\",   abbrLabel: \"Size 5\",   promptID: \"prompt-king-tube-size\" },\n        { id: \"prompt-set-igel-tube-size\", type: TYPES.PROMPT_SET },\n            { id: \"prompt-igel-tube-size\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"What size tube would you use?\", abbrLabel: \"Tube size?\", promptSetID: \"prompt-set-igel-tube-size\" },\n                { id: \"answer-igel-tube-size-1\",   type: TYPES.ANSWER, label: \"Igel tube size 1\",   abbrLabel: \"Size 1\",   promptID: \"prompt-igel-tube-size\" },\n                { id: \"answer-igel-tube-size-1-5\", type: TYPES.ANSWER, label: \"Igel tube size 1.5\", abbrLabel: \"Size 1.5\", promptID: \"prompt-igel-tube-size\" },\n                { id: \"answer-igel-tube-size-2\",   type: TYPES.ANSWER, label: \"Igel tube size 2\",   abbrLabel: \"Size 2\",   promptID: \"prompt-igel-tube-size\" },\n                { id: \"answer-igel-tube-size-2-5\", type: TYPES.ANSWER, label: \"Igel tube size 2.5\", abbrLabel: \"Size 2.5\", promptID: \"prompt-igel-tube-size\" },\n                { id: \"answer-igel-tube-size-3\",   type: TYPES.ANSWER, label: \"Igel tube size 3\",   abbrLabel: \"Size 3\",   promptID: \"prompt-igel-tube-size\" },\n                { id: \"answer-igel-tube-size-4\",   type: TYPES.ANSWER, label: \"Igel tube size 4\",   abbrLabel: \"Size 4\",   promptID: \"prompt-igel-tube-size\" },\n                { id: \"answer-igel-tube-size-5\",   type: TYPES.ANSWER, label: \"Igel tube size 5\",   abbrLabel: \"Size 5\",   promptID: \"prompt-igel-tube-size\" },\n\n\n    // als intubation\n    { id: \"intv-orotracheal-intubation\", type: TYPES.INTERV, system: SYS.AW, label: \"Orotracheal intubation\" },\n    { id: \"intv-nasotracheal-intubation\", type: TYPES.INTERV, system: SYS.AW, label: \"Nasotracheal intubation\" },\n\n\n    { id: \"intv-rapid-sequence-intubation\", type: TYPES.INTERV, system: SYS.AW, label: \"Rapid sequence intubation (RSI)\" },\n        { id: \"prompt-set-rsi\", type: TYPES.PROMPT_SET },\n            { id: \"prompt-rsi\", type: TYPES.PROMPT, selectionType: ST.NONE, label: \"RSI is not in the paramedic’s scope of practice in Pennsylvania.  Only trained PHTN’s can perform RSI.\", promptSetID: \"prompt-set-rsi\"},\n    { id: \"intv-sedation-assisted-intubation\", type: TYPES.INTERV, system: SYS.AW, label: \"Sedation-assisted intubation\" },\n        { id: \"prompt-set-sedation-assisted-intubation\", type: TYPES.PROMPT_SET },\n                { id: \"prompt-sedation-assisted-intubation-medication\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"What medication would you administer?\", abbrLabel: \"What sedation medication?\", promptSetID: \"prompt-set-sedation-assisted-intubation\"},\n                    { id: \"answer-sedation-assisted-intubation-medication-etomidate\", type: TYPES.ANSWER, label: \"Etomidate\", promptID: \"prompt-sedation-assisted-intubation-medication\" },\n                    { id: \"answer-sedation-assisted-intubation-medication-midazolam\", type: TYPES.ANSWER, label: \"Midazolam\", promptID: \"prompt-sedation-assisted-intubation-medication\" },\n                    { id: \"answer-sedation-assisted-intubation-medication-diazepam\",  type: TYPES.ANSWER, label: \"Diazepam\",  promptID: \"prompt-sedation-assisted-intubation-medication\" },\n                    { id: \"answer-sedation-assisted-intubation-medication-lorazepam\", type: TYPES.ANSWER, label: \"Lorazepam\", promptID: \"prompt-sedation-assisted-intubation-medication\" },\n                    { id: \"answer-sedation-assisted-intubation-medication-other\",     type: TYPES.ANSWER, label: \"Other\",     promptID: \"prompt-sedation-assisted-intubation-medication\" },\n                // { id: \"prompt-sedation-assisted-intubation-actions-prior-to-administration\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"What should you do before administering this drug?\", abbrLabel: \"What should you do before drug admin?\", promptSetID: \"prompt-set-sedation-assisted-intubation\"},\n                //     { id: \"answer-sedated-assisted-intubation-actions-prior-to-administration-contact-medical-command\", type: TYPES.ANSWER, label: \"Contact medication command\", promptID: \"prompt-sedation-assisted-intubation-actions-prior-to-administration\" },\n                //     { id: \"answer-sedated-assisted-intubation-actions-prior-to-administration-contact-medical-other\",   type: TYPES.ANSWER, label: \"Other\", promptID: \"prompt-sedation-assisted-intubation-actions-prior-to-administration\" },\n\n    // als crico interventions\n    { id: \"intv-needle-cricothyrotomy\", type: TYPES.INTERV, system: SYS.AW, label: \"Needle cricothyrotomy\"},\n    { id: \"intv-surgical-cricothyrotomy\", type: TYPES.INTERV, system: SYS.AW, label: \"Surgical cricothyrotomy\" },\n\n\n    // breating interventions -supplemental oxygen\n    { id: \"intv-supplemental-oxygen-device-non-rebreather-mask\", type: TYPES.INTERV, system: SYS.BR, label: \"Non-rebreather mask\" },\n        { id: \"prompt-set-non-rebreather-mask-details\", type: TYPES.PROMPT_SET },\n            { id: \"prompt-non-rebreather-mask-flow-rate\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"What oxygen flow rate would you administer?\", abbrLabel: \"Oxygen flow rate?\", promptSetID: \"prompt-set-non-rebreather-mask-details\" },\n                { id: \"answer-non-rebreather-mask-flow-rate-10-15-liters-min\", type: TYPES.ANSWER, label: \"NBR flow rate 10-15 liters/min\", abbrLabel: \"10-15 liters/min\", promptID: \"prompt-non-rebreather-mask-flow-rate\" },\n                { id: \"answer-non-rebreather-mask-flow-rate-other\",            type: TYPES.ANSWER, label: \"NBR flow rate other\",            abbrLabel: \"Other\",            promptID: \"prompt-non-rebreather-mask-flow-rate\" },\n            { id: \"prompt-non-rebreather-mask-target-saturation\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"What is your target oxygen saturation range?\", abbrLabel: \"Target saturation?\", promptSetID: \"prompt-set-non-rebreather-mask-details\" },\n                { id: \"answer-non-rebreather-mask-target-saturation-gt-90-pct\", type: TYPES.ANSWER, label: \"NBR target saturation: > 90%\", abbrLabel: \"> 90%\", promptID: \"prompt-non-rebreather-mask-target-saturation\" },\n                { id: \"answer-non-rebreather-mask-target-saturation-other\",     type: TYPES.ANSWER, label: \"NBR target saturation: other\", abbrLabel: \"Other\", promptID: \"prompt-non-rebreather-mask-target-saturation\" },\n\n    { id: \"intv-supplemental-oxygen-device-nasal-cannula\", type: TYPES.INTERV, system: SYS.BR, label: \"Nasal cannula\" },\n        { id: \"prompt-set-nasal-cannula-details\", type: TYPES.PROMPT_SET },\n            { id: \"prompt-nasal-cannula-flow-rate\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"Oxygen flow rate?\", promptSetID: \"prompt-set-nasal-cannula-details\" },\n                { id: \"answer-oxygen-therapy-flow-rate-1-6-lpm\", type: TYPES.ANSWER, label: \"Nasal cannula flow rate 1-6 liters/min\", abbrLabel: \"1-6 liters/min\", promptID: \"prompt-nasal-cannula-flow-rate\" },\n                { id: \"answer-oxygen-therapy-flow-rate-other\",   type: TYPES.ANSWER, label: \"Nasal cannula flow rate other\",          abbrLabel: \"Other\",          promptID: \"prompt-nasal-cannula-flow-rate\" },\n            { id: \"prompt-nasal-cannula-target-saturation\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"What is your target oxygen saturation range?\", promptSetID: \"prompt-set-nasal-cannula-details\" },\n                { id: \"answer-nasal-cannula-target-saturation-gt-90-pct\", type: TYPES.ANSWER, label: \"Nasal cannula target saturation: > 90%\", abbrLabel: \"> 90%\", promptID: \"prompt-nasal-cannula-target-saturation\" },\n                { id: \"answer-nasal-cannula-target-saturation-other\",     type: TYPES.ANSWER, label: \"Nasal cannula target saturation: other\", abbrLabel: \"Other\", promptID: \"prompt-nasal-cannula-target-saturation\" },\n\n    // breathing - ventilation\n    { id: \"intv-ventilation-technique-bag-valve-mask\", type: TYPES.INTERV, system: SYS.BR, label: \"Bag-valve mask\" },\n // { id: \"intv-ventilation-technique-automatic-transport-ventilator\", type: TYPES.INTERV, system: SYS.BR, label: \"Automatic transport ventilator\" },\n        { id: \"prompt-set-bvm-details\", type: TYPES.PROMPT_SET },\n            { id: \"prompt-bvm-ventilation-rate\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"At what rate will you ventilate the patient?\", promptSetID: \"prompt-set-bvm-details\" },\n                { id: \"answer-bvm-ventilation-rate-10-12-bpm\", type: TYPES.ANSWER, label: \"BVM ventilation rate: 10-12 BPM\", abbrLabel: \"10-12 breaths/minute\", promptID: \"prompt-bvm-ventilation-rate\" },\n                { id: \"answer-bvm-ventilation-rate-other\",     type: TYPES.ANSWER, label: \"BVM ventilation rate: other\",     abbrLabel: \"Other\",                promptID: \"prompt-bvm-ventilation-rate\" },\n            { id: \"prompt-bvm-flow-rate\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"What flow rate would you administer?\", abbrLabel: \"Flow rate?\", promptSetID: \"prompt-set-bvm-details\" },\n                { id: \"answer-bvm-flow-rate-15-ltm-or-gt\", type: TYPES.ANSWER, label: \"BVM flow rate: 15 liters/min or greater\", abbrLabel: \"15 liters/min or greater\", promptID: \"prompt-bvm-flow-rate\"},\n                { id: \"answer-bvm-flow-rate-other\",        type: TYPES.ANSWER, label: \"BVM flow rate: other\",                    abbrLabel: \"Other\",                    promptID: \"prompt-bvm-flow-rate\"},\n\n\n    // breathing - managage injuries\n    { id: \"intv-occlusive-dressing\", type: TYPES.INTERV, system: SYS.BR, label: \"Occlusive dressing\" },\n        { id: \"prompt-set-occlusive-dressing\", type: TYPES.PROMPT_SET },\n            { id: \"prompt-occlusive-dressing-injury-type\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"What type of injury are you trying to manage?\", abbrLabel: \"For what type of injury?\", promptSetID: \"prompt-set-occlusive-dressing\" },\n    { id: \"answer-occulsivive-dressing-injury-type-open-pneumothorax\", type: TYPES.ANSWER, label: \"Occlusive dressing injury type: open pnuemothorax (sucking chest wound)\", abbrLabel: \"Open pnuemothorax (sucking chest wound)\", promptID: \"prompt-occlusive-dressing-injury-type\" },\n                { id: \"answer-occulsivive-dressing-injury-type-other\",             type: TYPES.ANSWER, label: \"Occlusive dressing injury type: other\",                       abbrLabel: \"Other\", promptID: \"prompt-occlusive-dressing-injury-type\" },\n            // { id: \"prompt-occlusive-dressing-method\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"How would you create a release valve on an occlusive dressing?\", promptSetID: \"prompt-set-occlusive-dressing\" },\n            //     { id: \"answer-occulsive-dressing-method-leave-one-side-untaped\",            type: TYPES.ANSWER, label: \"Leave one side untaped\", promptID: \"prompt-occlusive-dressing-method\" },\n            //     { id: \"answer-occulsive-dressing-method-leave-dressing-with-one-way-valve\", type: TYPES.ANSWER, label: \"Dressing with one-way valve (eg.Hyfin chest seal, Asherman chest seal)\", promptID: \"prompt-occlusive-dressing-method\" },\n            //     { id: \"answer-occulsive-dressing-method-other\",                             type: TYPES.ANSWER, label: \"Occlusive dressing method: other\", abbrLabel: \"Other\",promptID: \"prompt-occlusive-dressing-method\" },\n\n    { id: \"intv-pleural-decompression\", type: TYPES.INTERV, system: SYS.BR, label: \"Pleural decompression\" },\n        { id: \"prompt-set-pleural-decompression\", type: TYPES.PROMPT_SET, label: \"Pleural decompression\" },\n            { id: \"prompt-pleural-decompression-injury-type\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"What type of injury are you trying to manage?\", abbrLabel: \"For what type of injury?\", promptSetID: \"prompt-set-pleural-decompression\" },\n                { id: \"answer-pleural-decompression-injury-type-tension-pneumothorax\", type: TYPES.ANSWER, label: \"Pleural decompression injury type: ension pneumothorax\", abbrLabel: \"Tension pneumothorax\", promptID: \"prompt-pleural-decompression-injury-type\"},\n                { id: \"answer-pleural-decompression-injury-type-other\",                type: TYPES.ANSWER, label: \"Pleural decompression injury type: other\",               abbrLabel: \"Other\",                promptID: \"prompt-pleural-decompression-injury-type\"},\n            { id: \"prompt-pleural-decompression-needle-placement-side-of-the-body\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"On which side of the body would you place the needle?\", promptSetID: \"prompt-set-pleural-decompression\" },\n                { id: \"answer-pleural-decompression-needle-placement-side-of-the-body-right\", type: TYPES.ANSWER, label: \"Pleural Decompression needle placement: right side\", abbrLabel: \"Right\", promptID: \"prompt-pleural-decompression-needle-placement-side-of-the-body\" },\n                { id: \"answer-pleural-decompression-needle-placement-side-of-the-body-left\",  type: TYPES.ANSWER, label: \"Pleural Decompression needle placement: left side\",  abbrLabel: \"Left\", promptID: \"prompt-pleural-decompression-needle-placement-side-of-the-body\" },\n                { id: \"answer-pleural-decompression-needle-placement-side-of-the-body-other\", type: TYPES.ANSWER, label: \"Pleural Decompression needle placement: other\",      abbrLabel: \"Other\", promptID: \"prompt-pleural-decompression-needle-placement-side-of-the-body\" },\n\n            { id: \"prompt-pleural-decompression-needle-placement-anatomical-landmark\", type: TYPES.PROMPT, selectionType: ST.OOM, label: \"At what anatomical landmark?\", promptSetID: \"prompt-set-pleural-decompression\" },\n                { id: \"answer-pleural-decompression-needle-placement-anatomical-landmark-2nd-or-3rd-intercostal-space-mid-clavicular\", type: TYPES.ANSWER, label: \"Second or third intercostal space mid-clavicular line\",                promptID: \"prompt-pleural-decompression-needle-placement-anatomical-landmark\" },\n                { id: \"answer-pleural-decompression-needle-placement-anatomical-landmark-4th-or-5th-intercostal-space-mid-axillary\",   type: TYPES.ANSWER, label: \"Fourth or fifth intercostal space mid-axillary line\",                  promptID: \"prompt-pleural-decompression-needle-placement-anatomical-landmark\" },\n                { id: \"answer-pleural-decompression-needle-placement-anatomical-landmark-other\",                                       type: TYPES.ANSWER, label: \"Pleural decompression anatomical landmark: other\", abbrLabel: \"Other\", promptID: \"prompt-pleural-decompression-needle-placement-anatomical-landmark\" },\n            { id: \"prompt-pleural-decompression-needle-size\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"What size needle do you want to use?\", promptSetID: \"prompt-set-pleural-decompression\" },\n                { id: \"answer-pleural-decompression-needle-size-large-bore\", type: TYPES.ANSWER, label: \"Large bore (14 or 16 gauge)\",                                  promptID: \"prompt-pleural-decompression-needle-size\" },\n                { id: \"answer-pleural-decompression-needle-size-other\",      type: TYPES.ANSWER, label: \"Pleural Decompression needle size: other\", abbrLabel: \"Other\", promptID: \"prompt-pleural-decompression-needle-size\" },\n            { id: \"prompt-pleural-decompression-needle-length\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"How long a needle would you use?\", abbrLabel: \"Needle length?\", promptSetID: \"prompt-set-pleural-decompression\" },\n                { id: \"answer-pleural-decompression-needle-length-2-inches-or-longer\", type: TYPES.ANSWER, label: \"Pleural Decompression needle size: 2 or more inches\", abbrLabel: \"2 or more inches\", promptID: \"prompt-pleural-decompression-needle-length\" },\n                { id: \"answer-pleural-decompression-needle-length-other\",              type: TYPES.ANSWER, label: \"Pleural Decompression needle size: other\",            abbrLabel: \"Other\",             promptID: \"prompt-pleural-decompression-needle-length\" },\n\n    // shared between all severe bleeding interventions\n    { id: \"prompt-set-control-severe-bleeding-wound-location\", type: TYPES.PROMPT_SET },\n        { id: \"prompt-control-severe-bleeding-wound-location\", type: TYPES.PROMPT, selectionType: ST.OOM, label: \"Where is the wound with serious or uncontrolled bleeding?\", abbrLabel: \"Where is the wound?\", promptSetID: \"prompt-set-control-severe-bleeding-wound-location\"},\n            { id: \"answer-wound-location-head\", type: TYPES.ANSWER, label: \"Wound location head\", abbrLabel: \"Head\", promptID: \"prompt-control-severe-bleeding-wound-location\"},\n            { id: \"answer-wound-location-neck\", type: TYPES.ANSWER, label: \"Wound location neck\", abbrLabel: \"Neck\", promptID: \"prompt-control-severe-bleeding-wound-location\" },\n            { id: \"answer-wound-location-chest\", type: TYPES.ANSWER, label: \"Wound location chest\", abbrLabel: \"Chest\", promptID: \"prompt-control-severe-bleeding-wound-location\" },\n            { id: \"answer-wound-location-abdomen-pelvis\", type: TYPES.ANSWER, label: \"Wound location abdomen/pelvis\", abbrLabel: \"Abdomen/pelvis\", promptID: \"prompt-control-severe-bleeding-wound-location\" },\n            { id: \"answer-wound-location-posterior\", type: TYPES.ANSWER, label: \"Wound location posterior thorax, lumbar, or buttocks\", abbrLabel: \"Posterior thorax, lumbar, or buttocks\", promptID: \"prompt-control-severe-bleeding-wound-location\" },\n            { id: \"answer-wound-location-genitalia\", type: TYPES.ANSWER, label: \"Wound location genitalia\", abbrLabel: \"Genitalia\", promptID: \"prompt-control-severe-bleeding-wound-location\" },\n            { id: \"answer-wound-location-lower-extremity\", type: TYPES.ANSWER, label: \"Wound location lower extremity\", abbrLabel: \"Lower extremity\", promptID: \"prompt-control-severe-bleeding-wound-location\" },\n            { id: \"answer-wound-location-upper-extremity\", type: TYPES.ANSWER, label: \"Wound location upper extremity\", abbrLabel: \"Upper extremity\", promptID: \"prompt-control-severe-bleeding-wound-location\" },\n            { id: \"answer-wound-location-other\", type: TYPES.ANSWER, label: \"Wound location other\", abbrLabel: \"Other\", promptID: \"prompt-control-severe-bleeding-wound-location\" },\n\n\n    { id: \"intv-control-severe-bleeding-technique-direct-pressure\", type: TYPES.INTERV, system: SYS.BL, label: \"Apply direct pressure\" },\n    { id: \"intv-control-severe-bleeding-technique-tourniquet\", type: TYPES.INTERV, system: SYS.BL, label: \"Apply tourniquet\" },\n        { id: \"prompt-set-tourniquet\", type: TYPES.PROMPT_SET },\n            { id: \"prompt-tourniquet-placement\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"Where would you place the tourniquet?\", promptSetID: \"prompt-set-tourniquet\" },\n                { id: \"answer-tourniquet-placement-close-to-core-far-from-wound\", type: TYPES.ANSWER, label: \"As far from wound and close to the core as possible\", promptID: \"prompt-tourniquet-placement\" },\n                { id: \"answer-tourniquet-placement-other\", type: TYPES.ANSWER, label: \"Place tourniquet other\", abbrLabel: \"Other\", promptID: \"prompt-tourniquet-placement\" },\n            // { id: \"prompt-tourniquet-stop-tightening-when\", type: TYPES.PROMPT, selectionType: ST.OOM, label: \"When do you know when to stop tightening the tourniquet?\", promptSetID: \"prompt-set-tourniquet\" },\n            //     { id: \"answer-tourniquet-stop-tightening-when-bleeding-has-stopped\", type: TYPES.ANSWER, label: \"When bleeding has stopped\", promptID: \"prompt-tourniquet-stop-tightening-when\" },\n            //     { id: \"answer-tourniquet-stop-tightening-when-distal-pulse-is-absent\", type: TYPES.ANSWER, label: \"When distal pulse is absent\", promptID: \"prompt-tourniquet-stop-tightening-when\" },\n            //     { id: \"answer-tourniquet-stop-tightening-when-other\", type: TYPES.ANSWER, label: \"Stop tightening tourniquet other\", abbrLabel: \"Other\", promptID: \"prompt-tourniquet-stop-tightening-when\" },\n    { id: \"intv-control-severe-bleeding-technique-2nd-tourniquet\", type: TYPES.INTERV, system: SYS.BL, label: \"Apply second tourniquet\" },\n        { id: \"prompt-set-2nd-tourniquet\", type: TYPES.PROMPT_SET },\n            { id: \"prompt-2nd-tourniquet-placement\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"Where would you place the 2nd tourniquet?\", promptSetID: \"prompt-set-2nd-tourniquet\" },\n                { id: \"answer-2nd-tourniquet-placement-adjacent-to-initial-tourniquet\", type: TYPES.ANSWER, label: \"Adjacent to initial tourniquet\", promptID: \"prompt-2nd-tourniquet-placement\" },\n                { id: \"answer-2nd-tourniquet-placement-other\", type: TYPES.ANSWER, label: \"Other\", promptID: \"prompt-2nd-tourniquet-placement\" },\n    { id: \"intv-control-severe-bleeding-technique-pack-wound-with-gauze\", type: TYPES.INTERV, system: SYS.BL, label: \"Pack wound with gauze\" },\n    { id: \"intv-control-severe-bleeding-technique-pressure-bandage\", type: TYPES.INTERV, system: SYS.BL, label: \"Apply pressure bandage\" },\n    // { id: \"intv-control-severe-bleeding-technique-hemostatic-gauze\", type: TYPES.INTERV, system: SYS.BL, label: \"Apply hemostatic gauze\" },\n    { id: \"intv-control-severe-bleeding-technique-load-and-go\", type: TYPES.INTERV, system: SYS.BL, label: \"Load and go (if uncontrolled)\" },\n\n\n    // shock interventions\n    { id: \"intv-control-shock-technique-keep-patient-warm\", type: TYPES.INTERV, system: SYS.SH, label: \"Keep patient warm (e.g., apply blankets)\" },\n    { id: \"intv-control-shock-technique-administer-high-concentration-o2\", type: TYPES.INTERV, system: SYS.SH, label: \"Administer high concentration of oxygen\" },\n    { id: \"intv-control-shock-technique-place-patient-supine-position\", type: TYPES.INTERV, system: SYS.SH, label: \"Place or maintain patient in supine position\" },\n    { id: \"intv-control-shock-technique-administer-iv-boluses\", type: TYPES.INTERV, system: SYS.SH, label: \"Administer IV fluid resuscitation\" },\n\n    // are these prompts shared at all interventions which establish ivs???\n    { id: \"prompt-set-administer-iv-fluids-iv-placement\", type: TYPES.PROMPT_SET },\n        { id: \"prompt-admininster-iv-fluids-iv-placement\", type: TYPES.PROMPT, selectionType: ST.ONE, label:\"\", abbrLabel: \"\", promptSetID: \"prompt-set-administer-iv-fluids-iv-placement\"},\n            { id: \"answer-administer-iv-fluids-iv-placement-left-arm\", type: TYPES.ANSWER, label: \"IV placement left upper extremity\", abbrLabel: \"Left arm\", promptID: \"prompt-admininster-iv-fluids-iv-placement\"},\n            { id: \"answer-administer-iv-fluids-iv-placement-right-arm\", type: TYPES.ANSWER, label: \"IV placement right upper extremity\", abbrLabel: \"Right arm\", promptID: \"prompt-admininster-iv-fluids-iv-placement\"},\n\n    { id: \"prompt-set-control-shock-technique-administer-iv-fluid-details\", type: TYPES.PROMPT_SET },\n        { id: \"prompt-control-shock-iv-fluid\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"What type of fluid?\", promptSetID: \"prompt-set-control-shock-technique-administer-iv-boluses\" },\n            { id: \"answer-control-shock-iv-fluid-saline\", type: TYPES.ANSWER, label: \"Normal saline\", promptID: \"prompt-control-shock-iv-fluid\" },\n            { id: \"answer-control-shock-iv-fluid-other\", type: TYPES.ANSWER, label: \"Other\", promptID: \"prompt-control-shock-iv-fluid\" },\n        { id: \"prompt-control-shock-iv-volume\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"At what volume?\", promptSetID: \"prompt-set-control-shock-technique-administer-iv-boluses\" },\n            { id: \"answer-control-shock-iv-volume-20-cc-per-kilo\", type: TYPES.ANSWER, label: \"20 cc/kilo\", promptID: \"prompt-control-shock-iv-volume\" },\n            { id: \"answer-control-shock-iv-volume-other\", type: TYPES.ANSWER, label: \"Other\", promptID: \"prompt-control-shock-iv-volume\" },\n        { id: \"prompt-control-shock-iv-target-bp\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"What is your target BP?\", promptSetID: \"prompt-set-control-shock-technique-administer-iv-boluses\" },\n            { id: \"answer-control-shock-iv-target-bp-80-90\", type: TYPES.ANSWER, label: \"SBP 80-90, if bleeding is controlled\", promptID: \"prompt-control-shock-iv-target-bp\" },\n            { id: \"answer-control-shock-iv-target-bp-other\", type: TYPES.ANSWER, label: \"Other\", promptID: \"prompt-control-shock-iv-target-bp\" },\n\n    // transport patient to ambulance\n    { id: \"intv-transfers-patient-method-walk-patient\", type: TYPES.INTERV, label: \"Walk patient to ambulance\" },\n    { id: \"intv-transfers-patient-method-scoop-stretcher\", type: TYPES.INTERV, label: \"Place on scoop stretcher\" },\n    { id: \"intv-transfers-patient-method-short-board\", type: TYPES.INTERV, label: \"Place on short board (e.g., KED)\" },\n    { id: \"intv-transfers-patient-method-long-backboard\", type: TYPES.INTERV, label: \"Place on long back board (LBB)\" },\n    { id: \"intv-transfers-patient-method-place-directly-on-stretcher\", type: TYPES.INTERV, label: \"Place directly on stretcher\" },\n    // { id: \"intv-transfers-patient-method-other\", type: TYPES.INTERV, label: \"Other\" },\n\n    // transport\n    { id: \"intv-transport\", type: TYPES.INTERV, label: \"Transport\" },\n        { id: \"prompt-set-transport-decisions\", type: TYPES.PROMPT_SET },\n            { id: \"prompt-transport-facility-choice\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"What care facility will you transport the patient to?\", promptSetID: \"prompt-set-transport-decisions\" },\n                { id: \"answer-transport-facility-choice-level-1-or-2-trauma-center\", type: TYPES.ANSWER, label: \"The closest level 1 or 2 trauma center\", promptID: \"prompt-transport-facility-choice\" },\n                { id: \"answer-transport-facility-choice-level-3-or-4-trauma-center\", type: TYPES.ANSWER, label: \"The closet level 3 or 4 trauma center\", promptID: \"prompt-transport-facility-choice\" },\n                { id: \"answer-transport-facility-choice-closest\", type: TYPES.ANSWER, label: \"Closest receiving facility\", promptID: \"prompt-transport-facility-choice\" },\n                { id: \"answer-transport-facility-choice-other\", type: TYPES.ANSWER, label: \"Other\", promptID: \"prompt-transport-facility-choice\" },\n            { id: \"prompt-transport-method\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"Would you transport this patient by air or ground?\", promptSetID: \"prompt-set-transport-decisions\" },\n                { id: \"answer-transport-method-ambulance\",  type: TYPES.ANSWER, label: \"Ambulance\", promptID: \"prompt-transport-method\" },\n                { id: \"answer-transport-method-helicopter\", type: TYPES.ANSWER, label: \"Helicopter\", promptID: \"prompt-transport-method\" },\n            { id: \"prompt-transport-lights-siren-decision\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"Would you use lights and sirens with this patient?\", promptSetID: \"prompt-set-transport-decisions\" },\n                { id: \"answer-transport-lights-sirens-yes\", type: TYPES.ANSWER, label: \"Use ambulance lights and sirens\", abbrLabel: \"Yes\", promptID: \"prompt-transport-lights-siren-decision\" },\n                { id: \"answer-transport-lights-sirens-no\",  type: TYPES.ANSWER, label: \"Don't use ambulance lights and sirens\", abbrLabel: \"No\", promptID: \"prompt-transport-lights-siren-decision\" },\n                { id: \"answer-transport-lights-sirens-na\",  type: TYPES.ANSWER, label: \"Use of lights and sirens is not appliciable\", abbrLabel: \"NA\", promptID: \"prompt-transport-lights-siren-decision\" },\n\n    // spinal immobilization\n    { id: \"intv-spinal-immobilization-technique-manual-c-spine\",     type: TYPES.INTERV, label: \"Manual c-spine stabilization\" },\n    { id: \"intv-spinal-immobilization-technique-cervical-collar\",    type: TYPES.INTERV, label: \"Cervical collar\" },\n    { id: \"intv-spinal-immobilization-technique-transfer-to-device\", type: TYPES.INTERV, label: \"Transfer patient to immobilization device\" },\n    { id: \"intv-spinal-immobilization-technique-attach-cid\",         type: TYPES.INTERV, label: \"Attach cervical immobilization device (CID)\" },\n\n    // manage injuries\n    { id: \"intv-apply-sterile-dressings\", type: TYPES.INTERV, label: \"Apply sterile dressings\" },\n        { id: \"prompt-set-sterile-dressings-details\", type: TYPES.PROMPT_SET },\n            { id: \"prompt-sterile-dressings-wound-location\", type: TYPES.PROMPT, selectionType: ST.OOM, label: \"Where is the wound?\", abbrLabel: \"Wound location?\", promptSetID: \"prompt-set-sterile-dressings-details\" },\n                {id : \"answer-sterile-dressings-wound-location-head\",            type: TYPES.ANSWER, label: \"Sterile dressings wound location: head\",                                  abbrLabel: \"Head\",                                  promptID: \"prompt-sterile-dressings-wound-location\" },\n                { id: \"answer-sterile-dressings-wound-location-neck\",            type: TYPES.ANSWER, label: \"Sterile dressings wound location: neck\",                                  abbrLabel: \"Neck\",                                  promptID: \"prompt-sterile-dressings-wound-location\" },\n                { id: \"answer-sterile-dressings-wound-location-chest\",           type: TYPES.ANSWER, label: \"Sterile dressings wound location: chest\",                                 abbrLabel: \"Chest\",                                 promptID: \"prompt-sterile-dressings-wound-location\" },\n                { id: \"answer-sterile-dressings-wound-location-abdomen-pelvis\",  type: TYPES.ANSWER, label: \"Sterile dressings wound location: abdomen/pelvis\",                        abbrLabel: \"Abdomen/pelvis\",                        promptID: \"prompt-sterile-dressings-wound-location\" },\n                { id: \"answer-sterile-dressings-wound-location-posterior\",       type: TYPES.ANSWER, label: \"Sterile dressings wound location: posterior thorax, lumbar, or buttocks\", abbrLabel: \"Posterior thorax, lumbar, or buttocks\", promptID: \"prompt-sterile-dressings-wound-location\" },\n                { id: \"answer-sterile-dressings-wound-location-genitalia\",       type: TYPES.ANSWER, label: \"Sterile dressings wound location: genitalia\",                             abbrLabel: \"Genitalia\",                             promptID: \"prompt-sterile-dressings-wound-location\" },\n                { id: \"answer-sterile-dressings-wound-location-lower-extremity\", type: TYPES.ANSWER, label: \"Sterile dressings wound location: lower extremity\",                       abbrLabel: \"Lower extremity\",                       promptID: \"prompt-sterile-dressings-wound-location\" },\n                { id: \"answer-sterile-dressings-wound-location-upper-extremity\", type: TYPES.ANSWER, label: \"Sterile dressings wound location: upper extremity\",                       abbrLabel: \"Upper extremity\",                       promptID: \"prompt-sterile-dressings-wound-location\" },\n                { id : \"answer-sterile-dressings-wound-location-other\",          type: TYPES.ANSWER, label: \"Sterile dressings wound location: other\",                                 abbrLabel: \"Other\",                                 promptID: \"prompt-sterile-dressings-wound-location\" },\n\n    { id: \"intv-splint-fractures\", type: TYPES.INTERV, system: SYS.BR, label: \"Splint fractures\" },\n        { id: \"prompt-set-splint-fractures\", type: TYPES.PROMPT_SET },\n            { id: \"prompt-fracture-location\", type: TYPES.PROMPT, selectionType: ST.OOM, label: \"Where are the fracture(s), or suspected fracture(s)?\", abbrLabel: \"Fracture location?\", promptSetID: \"prompt-set-splint-fractures\" },\n                { id: \"answer-fracture-location-arm\",             type: TYPES.ANSWER, label: \"Fracture location arm\",                   abbrLabel: \"Arm\",                   promptID: \"prompt-fracture-location\"},\n                { id: \"answer-fracture-location-femur\",           type: TYPES.ANSWER, label: \"Fracture location leg (femur)\",           abbrLabel: \"Leg - femur\",           promptID: \"prompt-fracture-location\" },\n                { id: \"answer-fracture-location-tibia-or-fibula\", type: TYPES.ANSWER, label: \"Fracture location leg (tibia or fibula)\", abbrLabel: \"Leg - tibia or fibula\", promptID: \"prompt-fracture-location\" },\n            { id: \"prompt-splint-type\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"What type of splint would you use?\", abbrLabel: \"Type?\", promptSetID: \"prompt-set-splint-fractures\" },\n                { id: \"answer-split-type-board\",    type: TYPES.ANSWER, label: \"Splint type: board\",    abbrLabel: \"Board splint\",    promptID: \"prompt-splint-type\"},\n                { id: \"answer-split-type-moldable\", type: TYPES.ANSWER, label: \"Splint type: moldable\", abbrLabel: \"Moldable splint\", promptID: \"prompt-splint-type\" },\n                { id: \"answer-split-type-traction\", type: TYPES.ANSWER, label: \"Splint type: traction\", abbrLabel: \"Traction splint\", promptID: \"prompt-splint-type\" },\n                { id: \"answer-split-type-other\",    type: TYPES.ANSWER, label: \"Splint type: other\",    abbrLabel: \"Other\",           promptID: \"prompt-splint-type\" },\n\n    // cross-listed under bleeding and renamed\n    // { id: \"intv-manage-secondary-injuries-technique-splint-fractures\", type: TYPES.INTERV, label: \"Splint fractures\" },\n    // { id: \"intv-manage-secondary-injuries-technique-other\", type: TYPES.INTERV, label: \"Other\" },\n    // dup of intv-apply-sterile-dressings, not using\n    // { id: \"intv-sterile-dressing-soft-tissue\", type: TYPES.INTERV, label: \"Sterile dressing over soft tissue\" },\n    { id: \"intv-retrieve-amputated-body-part\", type: TYPES.INTERV, label: \"Retrieve avulsed/amputated part\" },\n\n\n    { id: \"intv-establish-ivs\", type: TYPES.INTERV, label: \"Establish IVs\" },\n    // { id: \"intv-apply-bandages\", type: TYPES.INTERV, label: \"Apply bandages\" },\n\n    { id: \"intv-replace-bls-airway-with-als-airway\", type: TYPES.INTERV, label: \"Replace basic airway with advanced airway\" },\n    { id: \"intv-replace-bandages\",                   type: TYPES.INTERV, label: \"Replace bandages\" },\n    { id: \"intv-replace-oxygen-tank\",                type: TYPES.INTERV, label: \"Replace oxygen tank\" },\n    { id: \"intv-adjust-iv-replace-bolus\",            type: TYPES.INTERV, label: \"Adjust an IV (e.g., hang second bag)\" },\n    { id: \"intv-turn-up-heat-in-ambulance\",          type: TYPES.INTERV, label: \"Turn up heat in ambulance\" },\n    { id: \"intv-reassess-intv-other\",                type: TYPES.INTERV, label: \"Reassess other intervention\", abbrLabel: \"Other\" },\n\n    { id: \"intv-reassess-vital-signs\", type: TYPES.INTERV, label: \"Reassess vital signs\" },\n        { id: \"prompt-set-reassess-vital-signs\", type: TYPES.PROMPT_SET },\n            { id: \"prompt-reassess-vital-signs-frequency\", type: TYPES.PROMPT, selectionType: ST.ONE, label: \"How often will you reassess vitals?\", promptSetID: \"prompt-set-reassess-vital-signs\" },\n                { id: \"answer-reassess-vital-signs-frequency-5-min\", type: TYPES.ANSWER, label: \"Every 5 minutes\", promptID: \"prompt-reassess-vital-signs-frequency\" },\n                { id: \"answer-reassess-vital-signs-frequency-15-min\", type: TYPES.ANSWER, label: \"Every 15 minutes\", promptID: \"prompt-reassess-vital-signs-frequency\" },\n                { id: \"answer-reassess-vital-signs-frequency-other\", type: TYPES.ANSWER, label: \"Other\", promptID: \"prompt-reassess-vital-signs-frequency\" },\n\n\n]\n\nexport const MEDS = [\n    { id: \"acetaminophen\", label: \"Acetaminophen\" },\n    { id: \"aspirin\", label: \"Aspirin\" },\n    { id: \"diazepam\", label: \"Diazepam\" },\n    { id: \"etomidate\", label: \"Etomidate\" },\n    { id: \"fentanyl\", label: \"Fentanyl\" },\n    { id: \"ibuprofen\", label: \"Ibuprofen\" },\n    { id: \"ketamine\", label: \"Ketamine\" },\n    { id: \"ketorolac\", label: \"Ketorolac\" },\n    { id: \"lorazepam\", label: \"Lorazepam\" },\n    { id: \"midazolam\", label: \"Midazolam\" },\n    { id: \"morphineSulfate\", label: \"Morphine Sulfate\" },\n    { id: \"nitrousOxide\", label: \"Nitrous Oxide\" },\n    { id: \"ondansetron\", label: \"Ondansetron\" }\n]\n\nconst MED_PURPOSES = [\n    [\"pain-management\", \"Pain management\"],\n    [\"airway-management\", \"Airway management\"],\n    [\"relieve-nausea\", \"Relieve nausea\"],\n    [\"other\", \"Other\"]\n]\n\nconst MED_PROMPT_TYPES = [\n    [\"initial\", \"dosage\"],\n    [\"repeat\", \"dosage\"],\n    [\"repeat\", \"frequency\"],\n    [\"max\", \"dosage\"]\n]\n\nconst MED_OPTIONS = [\"lower\", \"correct\", \"higher\"]\nconst MED_ADMINISTRATIVE_ROUTES = [\n    [\"oral\", \"Oral\"],\n    [\"iv\", \"IV\"],\n    [\"io\", \"IO\"],\n    [\"inhalation\", \"Inhalation\"],\n    [\"other\", \"Other\"]\n]\n\nconst titleCase = (txt) => {\n    return txt.charAt(0).toUpperCase() + txt.slice(1)\n}\n\nconst createRec = (data) => {\n    INTV_META_DATA.push(data)\n}\n\nconst mkMedPurposePromptSet = (medID) => {\n    const promptSetID = `prompt-set-medication-purpose-${medID}`\n    createRec({ id: promptSetID, type: TYPES.PROMPT_SET })\n    const promptID = `prompt-medication-purpose-${medID}`\n    createRec({ id: promptID, type: TYPES.PROMPT, selectionType: ST.ONE, label: \"What is the purpose of administering this medication\", abbrLabel: \"Purpose?\", promptSetID: promptSetID})\n    MED_PURPOSES.forEach(([_id, _label]) => {\n        createRec({\n            id: `answer-medication-purpose-${medID}-${_id}`,\n            type: TYPES.ANSWER,\n            label: _label,\n            promptID: promptID\n        })\n    })\n}\nconst mkMedPromptSet = (medID) => {\n    let promptSetID = `prompt-set-medication-${medID}`\n    let promptID\n    // prompt set for med dosages/frequencies\n    createRec(\n        { id: promptSetID, type: TYPES.PROMPT_SET }\n    )\n    MED_PROMPT_TYPES.forEach(rec => {\n        let [prompt, type] = rec\n        promptID = `prompt-${medID}-${prompt}-${type}`\n        createRec(\n            {id: promptID, type: TYPES.PROMPT, selectionType: ST.ONE, label: `${titleCase(prompt)} ${type}`, promptSetID: promptSetID}\n        )\n        MED_OPTIONS.forEach(option => {\n            let answerID = `answer-${medID}-${prompt}-${type}-${option}-${type}`\n            if(\"correct\" !== option) {\n                createRec(\n                    {id: answerID, type: TYPES.ANSWER, label: `${titleCase(option)} ${type}`, promptID: promptID}\n                )\n            } else {\n                createRec(\n                    { id: answerID, type: TYPES.ANSWER, label: `scenario.correctMedicationDosages.${medID}.${prompt}${titleCase(type)}`, promptID: promptID }\n                )\n            }\n        })\n    })\n    // prompt set for administrative-route\n    promptSetID = `prompt-set-${medID}-administration-route`\n    createRec(\n        { id: promptSetID, type: TYPES.PROMPT_SET}\n    )\n    promptID = `prompt-${medID}-administration-route`\n    createRec(\n        { id: promptID, type: TYPES.PROMPT, selectionType: ST.ONE, label: \"How would you administer this medication--through what route?\", promptSetID: promptSetID}\n    )\n    MED_ADMINISTRATIVE_ROUTES.forEach(rec => {\n        let [routeID, label] = rec\n        createRec(\n            {id: `answer-${medID}-administration-route-${routeID}`, type: TYPES.ANSWER, label: label, promptID}\n        )\n    })\n\n}\n\nconst genMedInterventionsAndPrompts = () => {\n    MEDS.forEach(med => {\n        createRec(\n            { id: `intv-medication-${med.id}`, type: TYPES.INTERV, label: med.label }\n        )\n        mkMedPurposePromptSet(med.id)\n        mkMedPromptSet(med.id)\n    })\n}\ngenMedInterventionsAndPrompts()\n\n// INTV_META_DATA.filter(rec => rec.type === TYPES.INTERV).forEach(rec => console.log(rec.id, rec.id.length))","export const deepCopy = (object) => {\n    return JSON.parse(JSON.stringify(object))\n}\n\n// returns subset of records from array 'arr' whose type field matches 'type'\nexport const getRecsOfType = (arr, type) => {\n    return arr.filter(rec => rec.type === type)\n}\n\n// returns if any of the arrays passed to this have lengths > 0\n// perhaps this should be written as a non-1-liner for clarity\nexport const anyHaveValues = (...arrs) => {\n    return arrs.map((arr) => arr.length > 0).filter(val => val === true).length > 0\n}\n","\nimport {\n    MDB_TYPES as TYPES,\n    PREFIXES as PFX,\n    SELECTION_TYPES as ST,\n    SYSTEMS as SYS,\n    HEADING,\n} from \"./constants.js\"\n\n\nimport {\n    CHECKLIST_META_DATA,\n    INTV_META_DATA,\n    MEDS,\n} from \"./traumaScenarioV2MetaData.js\"\n\nimport { deepCopy, getRecsOfType, anyHaveValues } from \"./utils.js\"\n\n// exported constants (need to move more up here, but they are currently js literals)\nexport const INTV_FORMS = {}\n\n// non-exprted constants used within this file\nconst PHASES = getRecsOfType(CHECKLIST_META_DATA, TYPES.PHASE)\nconst SUBPHASES = getRecsOfType(CHECKLIST_META_DATA, TYPES.SUB_PHASE)\nconst ASSESSMENTS = getRecsOfType(CHECKLIST_META_DATA, TYPES.ASSESS)\nconst ASSESS_WITH_OPTIONS = getRecsOfType(CHECKLIST_META_DATA, TYPES.AWO)\nconst ASSESS_OPTIONS = getRecsOfType(CHECKLIST_META_DATA, TYPES.ASSESS_OPTION)\nconst REQ_ACTIONS = getRecsOfType(CHECKLIST_META_DATA, TYPES.REQURED)\nconst DECISIONS = getRecsOfType(CHECKLIST_META_DATA, TYPES.DECISION)\nconst DECISION_OPTIONS = getRecsOfType(CHECKLIST_META_DATA, TYPES.DECISION_OPTION)\nconst CL_PROMPTS = getRecsOfType(CHECKLIST_META_DATA, TYPES.CL_PROMPT)\n\nconst INTVS = getRecsOfType(INTV_META_DATA, TYPES.INTERV)\nconst PROMPT_SETS = getRecsOfType(INTV_META_DATA, TYPES.PROMPT_SET)\nconst PROMPTS = getRecsOfType(INTV_META_DATA, TYPES.PROMPT)\nconst ANSWERS = getRecsOfType(INTV_META_DATA, TYPES.ANSWER)\n\n\n//\n// functions for accessing meta-data\n//\n\n// looksup a record by id in CHECKLIST_META_DATA, and returns a subset of its fields\nconst getChecklistData = (id) => {\n    let retVal = {id,}\n    const metaData = CHECKLIST_META_DATA.find((rec) => rec.id === id)\n    if (metaData === undefined) {\n        throw(`getChecklistData() id: ${id} not found in CHECKLIST_META_DATA`)\n    }\n    retVal.type = metaData.type,\n    retVal.label = metaData.label\n\n    // for assessment-with-options and decision types, lookup other checklist\n    // items which have it's ID as their promptID and add them as an \"items\"\n    // attribute\n    if ([TYPES.AWO, TYPES.DECISION].includes(metaData.type)) {\n        retVal.items = CHECKLIST_META_DATA.filter(rec => rec.promptID === id)\n    }\n    return retVal\n}\n\n// returns an IDs label (if found in CHECKLIST_META_DATA)\nconst getLabel = (id) => {\n    const metaData = CHECKLIST_META_DATA.find((rec) => rec.id === id)\n    if (metaData === undefined) {\n        throw (`getLabel() id: ${id} not found in CHECKLIST_META_DATA`)\n    }\n    return metaData.label\n}\n\n// const getIntvLabel = (id) => {\n//     const metaData = INTV_META_DATA.find((rec) => rec.id === id)\n//     if (metaData === undefined) {\n//         throw (`getIntvLabel() id: ${id} not found in INTV_META_DATA`)\n//     }\n//     return metaData.label\n// }\n\nconst getIntvData = (id) => {\n    const metaData = INTV_META_DATA.find((rec) => rec.id === id)\n    if (metaData === undefined) {\n        throw (`getIntvData() id: ${id} not found in INTV_META_DATA`)\n    }\n    return metaData\n}\n\n\n\n// const getPromptSet = ({id, intervention, constraints = null, dataEntry = true}) => {\n//     let prompts = PROMPTS.filter((rec) => rec.promptSetID === id)\n//     prompts = prompts.map((prompt) => {\n//         let newPrompt = Object.assign({}, prompt)\n//         const options = ANSWERS.filter(rec => rec.promptID === prompt.id)\n//         newPrompt.options = options.map(opt => Object.assign(opt, {prompt: prompt.label}))\n//         newPrompt.dataEntry = dataEntry\n//         if (null !== constraints) {\n//             newPrompt.showConstraints = constraints\n//         }\n//         return newPrompt\n//     })\n//     return prompts\n// }\n\nconst expandPromptSetToPromptList = ({id, constraints = null, dataEntry = true}) => {\n    const prompts = PROMPTS.filter(rec => rec.promptSetID === id)\n    return prompts.map(prompt => {\n        const data = {\n            id: prompt.id,\n            dataEntry: dataEntry\n        }\n        if (!!constraints) {\n            data.showConstraints = constraints\n        }\n        return data\n    })\n}\n\nconst getSystemIntvs = (system) => {\n    return INTV_META_DATA.filter(rec => rec.type === TYPES.INTERV && rec.system === system)\n}\n\nconst getIntervention = (intvID, depth) => {\n    const obj = Object.assign({}, getIntvData(intvID), { depth: depth })\n    if (undefined === INTV_FORMS[intvID]) {\n        throw Error(`intervention ${intvID} not listed in INTV_FORMS`)\n    }\n\n    if (!!obj.system) {\n        delete obj.system\n    }\n    return obj\n}\n\n\n//\n// functions for generating derived data\n//\n\nconst createInterventionForm = ({ intv, prompts = [] }) => {\n    const data = Object.assign({}, getIntvData(intv))\n    data.prompts = []\n    // pass this intervention down so that it can be associatied with the options so we\n    // know the context of what intervention was being performed when that answe was selected\n        // prompts.forEach(prompt => data.prompts.push(...getPromptSet(prompt)))\n    prompts.forEach(prompt => data.prompts.push(...expandPromptSetToPromptList(prompt)))\n    INTV_FORMS[intv] = data\n}\n\n\n\nconst mkPhase = ({ phaseType, phase, id, items = [], subPhases = [], interventionsMenu = [], dataEntry = true }) => {\n    const headingID = (phaseType === TYPES.PHASE) ? `${PFX.PHASE}${id}` : `${PFX.SUB_PHASE}${id}`\n    let obj = getChecklistData(headingID)\n    obj.id = id\n    obj.type = phaseType\n    obj.dataEntry = dataEntry\n    if (subPhases.length && items.length) {\n        throw Error(`a ${phaseType} cannot have both subPhases AND checklist items`)\n    }\n    if (subPhases.length) {\n        obj.subPhases = subPhases.map(sp => {\n            let cld = getChecklistData(`${PFX.SUB_PHASE}${sp}`)\n            cld.id = sp\n            return cld\n        })\n    } else {\n        obj.items = items.map(it => {\n            let cld = Object.assign({}, getChecklistData(it), { phase: phase })\n            return cld\n        })\n    }\n    return obj\n}\n\nconst createPhase = ({ id, items = [], subPhases = [], interventionsMenu = [], dataEntry = true }) => {\n    return mkPhase({ phaseType: TYPES.PHASE, phase: id, id, items, subPhases, interventionsMenu, dataEntry })\n}\n\nconst createSubPhase = ({ id, phase, items = [], subPhases = [], interventionsMenu = [], dataEntry = true }) => {\n    return mkPhase({ phaseType: TYPES.SUB_PHASE, phase, id, items, subPhases, interventionsMenu, dataEntry })\n}\n\n// Intervention form creation\n\n// bls open-airway interventions\ncreateInterventionForm({ intv: \"intv-open-airway-method-head-tilt\" })\ncreateInterventionForm({ intv: \"intv-open-airway-method-modified-jaw-thrust\" })\n// createInterventionForm({ intv: \"intv-open-airway-method-jaw-thrust\" })\n// createInterventionForm({ intv: \"intv-open-airway-method-other\" })\n\n// bls establish airway patency interventions\ncreateInterventionForm({\n    intv: \"intv-airway-patency-technique-suction-airway\",\n    prompts: [{ id: \"prompt-set-airway-patency-suction\"}]\n})\n// createInterventionForm({\n//     intv: \"intv-airway-patency-technique-remove-foreign-body-obstructions\",\n//     prompts: [{ id: \"prompt-set-airway-patency-remove-foreign-body-obstructions\"}]\n// })\ncreateInterventionForm({ intv: 'intv-manual-finger-sweep' })\ncreateInterventionForm({ intv: 'intv-magill-forceps-assisted' })\ncreateInterventionForm({ intv: 'intv-slat' })\n\n// bls insert adjunct interventions\ncreateInterventionForm({\n    intv: \"intv-oropharyngeal-airway\",\n    // prompts: [{ id: \"prompt-set-when-naso-vs-oro\" }]\n})\ncreateInterventionForm({\n    intv: \"intv-nasopharyngeal-airway\",\n    // prompts: [{id: \"prompt-set-when-oro-vs-naso\"}]\n})\n\n// als airway interventions\n\n// als adjuncts\ncreateInterventionForm({\n    intv: \"intv-alternative-rescue-airway\",\n    prompts: [\n        { id: \"prompt-set-alternative-rescue-airway\" },\n        { id: \"prompt-set-king-tube-size\", constraints: \"answer-alternative-rescue-airway-type-lta\"},\n        { id: \"prompt-set-igel-tube-size\", constraints: \"answer-alternative-rescue-airway-type-igel\" },\n        { id: \"prompt-set-confirm-tube-placement\", constraints: \"answer-alternative-rescue-airway-type-lta OR answer-alternative-rescue-airway-type-igel\"}\n    ]\n})\n// als intubations\ncreateInterventionForm({\n    intv: \"intv-orotracheal-intubation\",\n    prompts: [\n        { id: \"prompt-set-et-tube-size\" },\n        { id: \"prompt-set-confirm-tube-placement\" }\n    ]\n})\ncreateInterventionForm({ intv: \"intv-nasotracheal-intubation\" })\n// medication facilitated intubations\ncreateInterventionForm({\n    intv: \"intv-rapid-sequence-intubation\",\n    prompts: [{id: \"prompt-set-rsi\", dataEntry: false }]\n})\ncreateInterventionForm({\n    intv: \"intv-sedation-assisted-intubation\",\n    prompts: [\n        { id: \"prompt-set-sedation-assisted-intubation\" },\n        { id: \"prompt-set-etomidate-administration-route\", dataEntry: false, constraints: \"answer-sedation-assisted-intubation-medication-etomidate\" },\n        { id: \"prompt-set-midazolam-administration-route\", dataEntry: false, constraints: \"answer-sedation-assisted-intubation-medication-midazolam\" },\n        { id: \"prompt-set-diazepam-administration-route\", dataEntry: false, constraints: \"answer-sedation-assisted-intubation-medication-diazepam\" },\n        { id: \"prompt-set-lorazepam-administration-route\", dataEntry: false, constraints: \"answer-sedation-assisted-intubation-medication-lorazepam\" },\n        { id: \"prompt-set-iv-details\", dataEntry: false, constraints:\n        \"(answer-sedation-assisted-intubation-medication-etomidate AND answer-etomidate-administration-route-iv) OR \" +\n        \"(answer-sedation-assisted-intubation-medication-midazolam AND answer-midazolam-administration-route-iv) OR \" +\n        \"(answer-sedation-assisted-intubation-medication-diazepam AND answer-diazepam-administration-route-iv) OR \" +\n        \"(answer-sedation-assisted-intubation-medication-lorazepam AND answer-lorazepam-administration-route-iv)\"\n        },\n        { id: \"prompt-set-medication-etomidate\", dataEntry: false, constraints: \"answer-sedation-assisted-intubation-medication-etomidate\"},\n        { id: \"prompt-set-medication-midazolam\", dataEntry: false, constraints: \"answer-sedation-assisted-intubation-medication-midazolam\" },\n        { id: \"prompt-set-medication-diazepam\", dataEntry: false,  constraints: \"answer-sedation-assisted-intubation-medication-diazepam\" },\n        { id: \"prompt-set-medication-lorazepam\", dataEntry: false, constraints: \"answer-sedation-assisted-intubation-medication-lorazepam\" },\n        { id: \"prompt-set-et-tube-size\", dataEntry: false },\n        { id: \"prompt-set-confirm-tube-placement\" }\n    ]\n})\n\n// als crico interventions\ncreateInterventionForm({ intv: \"intv-needle-cricothyrotomy\" })\ncreateInterventionForm({\n    intv: \"intv-surgical-cricothyrotomy\",\n    prompts: [\n        { id: \"prompt-set-et-tube-size\" },\n        { id: \"prompt-set-confirm-tube-placement\" }\n    ]\n})\n\n// breathing interventions - supplemental oxygen\ncreateInterventionForm({\n    intv: \"intv-supplemental-oxygen-device-non-rebreather-mask\",\n    prompts: [{ id: \"prompt-set-non-rebreather-mask-details\" }]\n})\ncreateInterventionForm({\n    intv: \"intv-supplemental-oxygen-device-nasal-cannula\",\n    prompts: [{ id: \"prompt-set-nasal-cannula-details\" }]\n})\n\n// breathing interventions - ventilation\ncreateInterventionForm({\n    intv: \"intv-ventilation-technique-bag-valve-mask\",\n    prompts: [{ id: \"prompt-set-bvm-details\"}]\n})\n\n// breathing interventions - manage injuries\ncreateInterventionForm({\n    intv: \"intv-occlusive-dressing\",\n    prompts: [{ id: \"prompt-set-occlusive-dressing\" }]\n})\ncreateInterventionForm({\n    intv: \"intv-pleural-decompression\",\n    prompts: [{ id: \"prompt-set-pleural-decompression\" }]\n})\n\n// severe external bleeding interventions\ncreateInterventionForm({\n    intv: \"intv-control-severe-bleeding-technique-direct-pressure\",\n    prompts: [{id: \"prompt-set-control-severe-bleeding-wound-location\"}]\n})\ncreateInterventionForm({\n    intv: \"intv-control-severe-bleeding-technique-tourniquet\",\n    prompts: [\n        { id: \"prompt-set-control-severe-bleeding-wound-location\" },\n        { id: \"prompt-set-tourniquet\"},\n    ]\n})\ncreateInterventionForm({\n    intv: \"intv-control-severe-bleeding-technique-2nd-tourniquet\",\n    prompts: [\n        { id: \"prompt-set-control-severe-bleeding-wound-location\" },\n        { id: \"prompt-set-2nd-tourniquet\"}\n    ]\n})\ncreateInterventionForm({\n    intv: \"intv-control-severe-bleeding-technique-pack-wound-with-gauze\",\n    prompts: [{ id: \"prompt-set-control-severe-bleeding-wound-location\" }]\n})\ncreateInterventionForm({\n    intv: \"intv-control-severe-bleeding-technique-pressure-bandage\",\n    prompts: [{ id: \"prompt-set-control-severe-bleeding-wound-location\" }]\n})\n// should this ask about wound location?\ncreateInterventionForm({\n    intv: \"intv-control-severe-bleeding-technique-load-and-go\",\n    prompts: [{ id: \"prompt-set-control-severe-bleeding-wound-location\" }]\n})\n\n\n// internal bleeding interventions\ncreateInterventionForm({\n    intv: \"intv-splint-fractures\",\n    prompts: [{ id: \"prompt-set-splint-fractures\"}]\n})\n\n// control shock interventions\ncreateInterventionForm({ intv: \"intv-control-shock-technique-keep-patient-warm\" })\ncreateInterventionForm({ intv: \"intv-control-shock-technique-administer-high-concentration-o2\" })\ncreateInterventionForm({ intv: \"intv-control-shock-technique-place-patient-supine-position\" })\ncreateInterventionForm({\n    intv: \"intv-control-shock-technique-administer-iv-boluses\",\n    prompts: [\n        { id: \"prompt-set-administer-iv-fluids-iv-placement\" },\n        { id: \"prompt-set-iv-details\", dataEntry: false },\n        { id: \"prompt-set-control-shock-technique-administer-iv-fluid-details\" }\n    ]\n})\n\n// transfer to ambulance interventions\ncreateInterventionForm({ intv: \"intv-transfers-patient-method-walk-patient\" })\ncreateInterventionForm({ intv: \"intv-transfers-patient-method-scoop-stretcher\" })\ncreateInterventionForm({ intv: \"intv-transfers-patient-method-short-board\" })\ncreateInterventionForm({ intv: \"intv-transfers-patient-method-long-backboard\" })\ncreateInterventionForm({ intv: \"intv-transfers-patient-method-place-directly-on-stretcher\" })\n// createInterventionForm({ intv: \"intv-transfers-patient-method-other\" })\n\n// transport\ncreateInterventionForm({\n    intv: \"intv-transport\",\n    prompts: [{id: \"prompt-set-transport-decisions\"}]\n})\n\n// spinal immobilization interventions\ncreateInterventionForm({ intv: \"intv-spinal-immobilization-technique-manual-c-spine\" })\ncreateInterventionForm({ intv: \"intv-spinal-immobilization-technique-cervical-collar\" })\ncreateInterventionForm({ intv: \"intv-spinal-immobilization-technique-transfer-to-device\" })\ncreateInterventionForm({ intv: \"intv-spinal-immobilization-technique-attach-cid\" })\n// createInterventionForm({ intv: \"intv-spinal-immobilization-technique-ked\" })\n// createInterventionForm({ intv: \"intv-spinal-immobilization-technique-lbb\" })\n\n// manage injuries interventions\ncreateInterventionForm({\n    intv: \"intv-apply-sterile-dressings\",\n    prompts: [{ id: \"prompt-set-sterile-dressings-details\" }]\n})\ncreateInterventionForm({ intv: \"intv-retrieve-amputated-body-part\" })\n\n// createInterventionForm({ intv: \"intv-manage-secondary-injuries-technique-splint-fractures\" })\n// createInterventionForm({ intv: \"intv-manage-secondary-injuries-technique-other\" })\n\n// auto-generated MED interevntions\nMEDS.forEach(med => {\n    createInterventionForm({\n        intv: `intv-medication-${med.id}`,\n        prompts: [\n            {\n                id: `prompt-set-medication-purpose-${med.id}`\n            },\n            {\n                id: `prompt-set-medication-${med.id}`,\n                dataEntry: false,\n            },\n            {\n                id: `prompt-set-${med.id}-administration-route`,\n                dataEntry: true\n            },\n            {\n                id: \"prompt-set-iv-details\",\n                dataEntry: false,\n                constraints: `answer-${med.id}-administration-route-iv`\n            },\n\n        ]\n    })\n})\n\n\n// IVS\ncreateInterventionForm({\n    intv: \"intv-establish-ivs\",\n    prompts: [{ id: \"prompt-set-iv-details\", dataEntry: false }]\n})\n\n// ongoing mgmg plan intvs\n\n\n//reassess modify interventions\ncreateInterventionForm({ intv: \"intv-replace-bls-airway-with-als-airway\" })\ncreateInterventionForm({ intv: \"intv-replace-bandages\" })\ncreateInterventionForm({ intv: \"intv-replace-oxygen-tank\" })\ncreateInterventionForm({ intv: \"intv-adjust-iv-replace-bolus\" })\ncreateInterventionForm({ intv: \"intv-turn-up-heat-in-ambulance\" })\ncreateInterventionForm({ intv: \"intv-reassess-intv-other\" })\n// perform additional intvs\ncreateInterventionForm({\n    intv: \"intv-reassess-vital-signs\",\n    prompts: [{ id: \"prompt-set-reassess-vital-signs\" }]\n})\n\n// createInterventionForm({ intv: \"intv-apply-bandages\" })\n\n// console.log(JSON.stringify(INTV_FORMS, null, 4))\n// process.exit(0)\n\nexport const INTV_MENUS = [\n    {\n        id: \"airway\",\n        label: getLabel(\"airway\"),\n        items: [\n            { id: \"heading-bls\", type: HEADING, depth: 1, label: \"BLS\" },\n                { id: \"heading-open-airway\", type: HEADING, depth: 2, label: \"Open airway\" },\n                    getIntervention(\"intv-open-airway-method-head-tilt\", 3),\n                    getIntervention(\"intv-open-airway-method-modified-jaw-thrust\", 3),\n                { id: \"heading-establish-patency\", type: HEADING, depth: 2, label: \"Establish patency\" },\n                    getIntervention(\"intv-airway-patency-technique-suction-airway\", 3),\n                    {id: \"heading-remove-foreign-body-obstructions\", type: HEADING, depth: 3, label: \"Remove foreign body obstructions\"},\n                        getIntervention(\"intv-manual-finger-sweep\", 4),\n                        getIntervention(\"intv-magill-forceps-assisted\", 4),\n                        getIntervention(\"intv-slat\", 4),\n                { id: \"heading-insert-adjunct\", type: HEADING, depth: 2 , label: \"Insert adjunct\"},\n                    getIntervention(\"intv-nasopharyngeal-airway\", 3),\n                    getIntervention(\"intv-oropharyngeal-airway\", 3),\n            { id: \"heading-als\", type: HEADING, depth: \"1\", label: \"ALS\" },\n                { id: \"heading-als-adjunct\", type: HEADING, depth: 2, label: \"Insert adjunct\" },\n                    getIntervention('intv-alternative-rescue-airway', 3),\n                    getIntervention(\"intv-orotracheal-intubation\", 3),\n                    getIntervention(\"intv-nasotracheal-intubation\", 3),\n                    { id: \"heading-medication-facilitated-intubations\", type: HEADING, depth: 3, label: \"Medication Facilitated Intubation\" },\n                        getIntervention(\"intv-rapid-sequence-intubation\", 4),\n                        getIntervention(\"intv-sedation-assisted-intubation\", 4),\n                { id: \"heading-cricothyrotomy\", type: HEADING, depth: 2, label: \"Cricothyrotomy\"},\n                    getIntervention(\"intv-needle-cricothyrotomy\", 2),\n                    getIntervention(\"intv-surgical-cricothyrotomy\", 2),\n        ]\n    },\n    {\n        id: \"breathing\",\n        label: getLabel(\"breathing\"),\n        items: [\n            { id: \"heading-supplemental-oxygen\", type: HEADING, depth: 1, label: \"Supplemental Oxygen\" },\n                getIntervention(\"intv-supplemental-oxygen-device-nasal-cannula\", 2),\n                getIntervention(\"intv-supplemental-oxygen-device-non-rebreather-mask\", 2),\n            { id: \"heading-ventilation\", type: HEADING, depth: 1, label: \"Ventilation\" },\n                getIntervention(\"intv-ventilation-technique-bag-valve-mask\", 2),\n            { id: \"heading-manage-breathing-injury\", type: HEADING, depth: 1, label: \"Manage breathing-compromising Wounds\" },\n                getIntervention(\"intv-occlusive-dressing\", 2),\n                getIntervention(\"intv-pleural-decompression\", 2)\n        ]\n    },\n    {\n        id: \"circulation\",\n        label: \"Circulation\",\n        items: [\n            { id: \"heading-manage-severe-external-bleeding\", type: HEADING, depth: 1, label: \"Manage severe external bleeding\" },\n                getIntervention(\"intv-control-severe-bleeding-technique-direct-pressure\", 2),\n                getIntervention(\"intv-control-severe-bleeding-technique-tourniquet\", 2),\n                getIntervention(\"intv-control-severe-bleeding-technique-2nd-tourniquet\", 2),\n                getIntervention(\"intv-control-severe-bleeding-technique-pack-wound-with-gauze\", 2),\n                getIntervention(\"intv-control-severe-bleeding-technique-pressure-bandage\", 2),\n                getIntervention(\"intv-control-severe-bleeding-technique-load-and-go\", 2),\n            { id: \"heading-manage-internal-bleeding\", type: HEADING, depth: 1, label: \"Manage suspected internal bleeding\" },\n                getIntervention(\"intv-splint-fractures\", 2),\n                { id: \"heading-spinal-immobilization\", type: HEADING, depth: 2, label: \"Spinal immobilization\" },\n                    getIntervention(\"intv-spinal-immobilization-technique-manual-c-spine\", 3),\n                    getIntervention(\"intv-spinal-immobilization-technique-cervical-collar\", 3),\n                    getIntervention(\"intv-transfers-patient-method-short-board\", 3),\n                    getIntervention(\"intv-transfers-patient-method-long-backboard\", 3),\n                    getIntervention(\"intv-spinal-immobilization-technique-transfer-to-device\", 3),\n                    getIntervention(\"intv-spinal-immobilization-technique-attach-cid\", 3),\n            { id: \"heading-manage-shock\", type: HEADING, depth: 1, label: \"Manage shock\" },\n                getIntervention(\"intv-control-shock-technique-keep-patient-warm\", 2),\n                getIntervention(\"intv-control-shock-technique-administer-high-concentration-o2\", 2),\n                getIntervention(\"intv-control-shock-technique-place-patient-supine-position\", 2),\n                getIntervention(\"intv-control-shock-technique-administer-iv-boluses\", 2),\n        ]\n    },\n    {\n        id: \"transfer-to-ambulance\",\n        label: \"Transfer to ambulance\",\n        items: [\n            getIntervention(\"intv-transfers-patient-method-walk-patient\", 1),\n            getIntervention(\"intv-transfers-patient-method-scoop-stretcher\", 1),\n            getIntervention(\"intv-transfers-patient-method-short-board\", 1),\n            getIntervention(\"intv-transfers-patient-method-long-backboard\", 1),\n            getIntervention(\"intv-transfers-patient-method-place-directly-on-stretcher\", 1),\n            // getIntervention(\"intv-transfers-patient-method-other\", 1),\n        ]\n    },\n    {\n        id: \"transport\",\n        label: \"Transport\",\n        items: [\n            getIntervention('intv-transport', 1),\n        ]\n    },\n    {\n        id: \"spinal-motion-restriction\",\n        label: \"Spinal motion restriction\",\n        items: [\n            getIntervention(\"intv-spinal-immobilization-technique-manual-c-spine\", 1),\n            getIntervention(\"intv-spinal-immobilization-technique-cervical-collar\", 1),\n            getIntervention(\"intv-transfers-patient-method-short-board\", 1),\n            getIntervention(\"intv-transfers-patient-method-long-backboard\", 1),\n            getIntervention(\"intv-spinal-immobilization-technique-transfer-to-device\", 1),\n            getIntervention(\"intv-spinal-immobilization-technique-attach-cid\", 1),\n        ]\n    },\n    {\n        id: \"manage-wounds-and-specific-injuries\",\n        label: \"Manage wounds and specific injuries\",\n        items: [\n            getIntervention(\"intv-apply-sterile-dressings\", 1),\n            getIntervention(\"intv-splint-fractures\", 1),\n            {id: 'manage-amputation', type: HEADING, depth: 1, label: \"Manage amputation\" },\n                getIntervention(\"intv-apply-sterile-dressings\", 2),\n                getIntervention(\"intv-retrieve-amputated-body-part\", 2)\n        ]\n    },\n    {\n        id: \"heading-administer-medications\",\n        label: \"Administer Medications\",\n        items: MEDS.map(med => getIntervention(`intv-medication-${med.id}`))\n    },\n    {\n        id: \"heading-ivs\",\n        label: \"IVs\",\n        items: [\n            getIntervention(\"intv-establish-ivs\", 1),\n        ]\n    },\n    {\n        id: \"heading-ongoing-mgmt-plan\",\n        label: \"Ongoing Assessment and Management Plan\",\n        items: [\n            { id: \"heading-reassess-intvs\", type: HEADING, depth: 1, label: \"Reassess all interventions' modify as needed\" },\n                getIntervention(\"intv-replace-bls-airway-with-als-airway\", 2),\n                getIntervention(\"intv-replace-bandages\", 2),\n                getIntervention(\"intv-replace-oxygen-tank\", 2),\n                getIntervention(\"intv-adjust-iv-replace-bolus\", 2),\n                getIntervention(\"intv-turn-up-heat-in-ambulance\", 2),\n                getIntervention(\"intv-reassess-intv-other\", 2),\n            { id: \"heading-perform-addl-intvs\", type: HEADING, depth: 1, label: \"Perform additional interventions as indicated\" },\n                getIntervention(\"intv-reassess-vital-signs\", 2 ),\n        ]\n    },\n\n\n]\n\n\nexport const PHASE_DATA = [\n    createPhase({id: \"bsi\", items: [\"required-action-apply-ppe\"]}),\n\n    createPhase({\n        id: \"scene-size-up\",\n        items: [\n            \"assess-scene-safety\",\n            \"assess-injury-mechanism\",\n            \"assess-num-patients\",\n            \"assess-need-additional-help\",\n            \"required-action-considers-stabilize-spine\"\n        ],\n    }),\n    createPhase({\n        id: \"primary-survey\",\n        subPhases: [\n            \"general-impression\",\n            \"airway\",\n            \"breathing\",\n            \"circulation\",\n            \"transport-decision\"\n        ]\n    }),\n    createSubPhase({\n        id: \"general-impression\",\n        phase: \"primary-survey\",\n        items: [\n            \"assess-patient-condition\",\n            \"assess-loc\",\n            \"assess-life-threats\"\n        ]\n    }),\n    createSubPhase({\n        id: \"airway\",\n        phase: \"primary-survey\",\n        items: [\n            \"assess-airway\",\n        ],\n    }),\n    createSubPhase({\n        id: \"breathing\",\n        phase: \"primary-survey\",\n        items: [\n            \"assess-breathing\",\n        ],\n    }),\n    createSubPhase({\n        id: \"circulation\",\n        phase: \"primary-survey\",\n        items: [\n            \"assess-pulse\",\n            \"assess-skin\",\n            \"assess-major-bleeding\",\n        ],\n    }),\n    createSubPhase({\n        id: \"transport-decision\",\n        phase: \"primary-survey\",\n        items: [\n           \"decision-is-load-and-go\"\n        ]\n    }),\n\n    createPhase({\n        id: \"history-taking\",\n        items: [\n            \"required-action-obtains-vitals\",\n            \"required-action-attempt-obtain-sample\",\n            \"assess-opqrst-info\"\n        ]\n    }),\n    createPhase({\n        id: \"secondary-assessment\",\n        subPhases: [\n            \"trauma-expose\",\n            \"head\",\n            \"neck\",\n            \"shoulders\",\n            \"clavicle\",\n            \"chest\",\n            \"abdomen-pelvis\",\n            \"lower-extremities\",\n            \"upper-extremities\",\n            \"posterior\"\n        ]\n    }),\n    createSubPhase({\n        id: \"trauma-expose\",\n        phase: \"secondary-assessment\",\n        items: [\"required-action-remove-patient-clothing-as-needed\"],\n    }),\n    createSubPhase({\n        id: \"head\",\n        phase: \"secondary-assessment\",\n        items: [\n            \"assess-inspects-head\",\n            \"assess-palpate-skull\",\n            \"assess-eyes-reactiveness\",\n            \"assess-eyes-ears-nose-mouth\"\n        ],\n    }),\n    createSubPhase({\n        id: \"neck\",\n        phase: \"secondary-assessment\",\n        items: [\n            \"assess-inspects-neck\",\n            \"assess-trachea\",\n            \"assess-jugular\",\n            \"assess-palpate-cervical-spine\"\n        ],\n    }),\n    createSubPhase({\n        id: \"shoulders\",\n        phase: \"secondary-assessment\",\n        items: [\n            \"assess-check-shoulders\"\n        ],\n    }),\n    createSubPhase({\n        id: \"clavicle\",\n        phase: \"secondary-assessment\",\n        items: [\n            \"assess-inspect-clavicle\"\n        ],\n    }),\n    createSubPhase({\n        id: \"chest\",\n        phase: \"secondary-assessment\",\n        items: [\n            \"assess-inspect-chest\",\n            \"assess-palpate-chest\",\n            \"assess-auscultate-chest\"\n        ],\n    }),\n    createSubPhase({\n        id: \"abdomen-pelvis\",\n        phase: \"secondary-assessment\",\n        items: [\n            \"assess-inspects-abdomen\",\n            \"assess-palpate-abdomen\",\n            \"assess-pelvis\",\n            \"assess-genitalia-perineum\"\n        ],\n    }),\n    createSubPhase({\n        id: \"lower-extremities\",\n        phase: \"secondary-assessment\",\n        items: [\n            \"assessment-with-options-legs-inspects\",\n            \"assessment-with-options-legs-motor-function\",\n            \"assessment-with-options-legs-sensory-function\",\n            \"assessment-with-options-legs-pulse\"\n        ],\n    }),\n    createSubPhase({\n        id: \"upper-extremities\",\n        phase: \"secondary-assessment\",\n        items: [\n            \"assessment-with-options-arms-inspects\",\n            \"assessment-with-options-arms-motor-function\",\n            \"assessment-with-options-arms-sensory-function\",\n            \"assessment-with-options-arms-pulse\"\n        ],\n    }),\n    createSubPhase({\n        id: \"posterior\",\n        phase: \"secondary-assessment\",\n        items: [\n            \"assess-posterior-inspects\",\n            \"assess-palpate-posterior-thorax\"\n        ],\n    }),\n    createPhase({\n        id: \"ongoing-mgmt-plan\",\n        subPhases: [\n            \"repeat-primary-survey\",\n            \"repeat-secondary-survey\",\n            \"contact-facility\"\n        ]\n    }),\n    createSubPhase({\n        id: \"repeat-primary-survey\",\n        phase: \"ongoing-mgmt-plan\",\n        items: [\n            \"required-action-reassess-loc\",\n            \"required-action-reassess-airway\",\n            \"required-action-reassess-breathing\",\n            \"required-action-reassess-circulation\"\n        ]\n    }),\n    createSubPhase({\n        id: \"repeat-secondary-survey\",\n        phase: \"ongoing-mgmt-plan\",\n        items: [\n            \"required-action-reassess-vital-signs\",\n            \"required-action-reassess-head-to-toe\"\n        ]\n    }),\n    createSubPhase({\n        id: \"contact-facility\",\n        phase: \"ongoing-mgmt-plan\",\n        items: [\n            \"required-action-radio-receiving-facility\"\n        ]\n    })\n]\n\n\nexport const SYSTEM_INTVS = {\n    airway: { id: \"airway\", label: \"Airway\", intvs: getSystemIntvs(SYS.AW) },\n    breathing: { id: \"breathing\", label: \"Breathing\", intvs: getSystemIntvs(SYS.BR) },\n    bleeding: { id: \"bleeding\", label: \"Bleeding\", intvs: getSystemIntvs(SYS.BL) },\n    shock: { id: \"shock\", label: \"Shock\", intvs: getSystemIntvs(SYS.SH) }\n}\n\n//\n// meta-data/derived-data sanity checking routines\n//\n\nconst checkForDupIDs = () => {\n    let errors = []\n    let IDs = {}\n    CHECKLIST_META_DATA.forEach((rec) => {\n        if (!(rec.id in IDs)) {\n            IDs[rec.id] = 1\n        } else {\n            IDs[rec.id]++\n        }\n    })\n    INTV_META_DATA.forEach((rec) => {\n        if (!(rec.id in IDs)) {\n            IDs[rec.id] = 1\n        } else {\n            IDs[rec.id]++\n        }\n    })\n    const dupIDs = Array.from(Object.entries(IDs)).filter(([id, count]) => count > 1)\n    if (dupIDs.length > 0) {\n        errors.push(\"Duplicate IDs found!\")\n        // console.error()\n        errors.push(JSON.stringify(dupIDs, null, 4))\n    }\n    return errors\n}\n\nconst enforceNamingConventions = () => {\n    let errors = []\n    // const badPhases = getNamingConventionViolations(PHASES, PFX.PHASE)\n    // const badSubPhases = getNamingConventionViolations(SUBPHASES, PFX.SUB_PHASE)\n    const badAssessments = getNamingConventionViolations(ASSESSMENTS, PFX.ASSESS)\n    const badAwos = getNamingConventionViolations(ASSESS_WITH_OPTIONS, PFX.AWO)\n    const badAssessOptions = getNamingConventionViolations(ASSESS_OPTIONS, PFX.ASSESS_OPTION)\n    const badRequiredActions = getNamingConventionViolations(REQ_ACTIONS, PFX.REQURED)\n    const badDecisions = getNamingConventionViolations(DECISIONS, PFX.DECISION)\n    const badDecisionOptions = getNamingConventionViolations(DECISION_OPTIONS, PFX.DECISION_OPTION)\n    const badCheckListPrompts = getNamingConventionViolations(CL_PROMPTS, PFX.CL_PROMPT)\n    const badIntvs = getNamingConventionViolations(INTVS, PFX.INTERV)\n    const badPromptSets = getNamingConventionViolations(PROMPT_SETS, PFX.PROMPT_SET)\n    const badPrompts = getNamingConventionViolations(PROMPTS, PFX.PROMPT)\n    const badAnswers = getNamingConventionViolations(ANSWERS, PFX.ANSWER)\n\n    if (anyHaveValues(\n        // badPhases,\n        // badSubPhases,\n        badAssessments,\n        badAwos,\n        badAssessOptions,\n        badRequiredActions,\n        badDecisions,\n        badDecisionOptions,\n        badPromptSets,\n        badCheckListPrompts,\n        badPrompts,\n        badIntvs,\n        badAnswers)) {\n        // errors.concat(reportViolations(\"phases\",                   PFX.PHASE,           badPhases))\n        // errors.concat(reportViolations(\"sub phases\",               PFX.SUB_PHASE,       badSubPhases))\n        errors.concat(reportViolations(\"assessments\",              PFX.ASSESS,          badAssessments))\n        errors.concat(reportViolations(\"assessments with options\", PFX.AWO,             badAwos))\n        errors.concat(reportViolations(\"assement options\",         PFX.ASSESS_OPTION,   badAssessOptions))\n        errors.concat(reportViolations(\"required actions\",         PFX.REQURED,         badRequiredActions))\n        errors.concat(reportViolations(\"decisions\",                PFX.DECISION,        badDecisions))\n        errors.concat(reportViolations(\"decision options\",         PFX.DECISION_OPTION, badDecisionOptions))\n        errors.concat(reportViolations(\"checklist prompts\",        PFX.CL_PROMPT,       badCheckListPrompts))\n        errors.concat(reportViolations(\"interventions\",            PFX.INTERV,          badIntvs))\n        errors.concat(reportViolations(\"prompt sets\",              PFX.PROMPT_SET,      badPromptSets))\n        errors.concat(reportViolations(\"prompts\",                  PFX.PROMPT,          badPrompts))\n        errors.concat(reportViolations(\"answers\",                  PFX.ANSWER,          badAnswers))\n    }\n    return errors\n}\n\nconst checkPrompts = () => {\n    let errors = []\n    const missingSelectionType = PROMPTS.filter((rec) => !(\"selectionType\" in rec))\n    const badSelectionType = PROMPTS.filter((rec) => ![ST.ONE, ST.OOM, ST.NONE].includes(rec.selectionType))\n\n    if (!!missingSelectionType.length) {\n        errors.push(\"missingSelectionType\", missingSelectionType)\n    }\n    if (!!badSelectionType.length) {\n        errors.push(\"badSelectionType\", badSelectionType)\n    }\n    return errors\n}\n\nconst checkAssessments = () => {\n    let errors = []\n    const missingTabLabels = ASSESSMENTS.filter((rec) => !(\"abbrLabel\" in rec))\n    if (!!missingTabLabels.length) {\n        errors.push(\"Assessments missing tabLabels:\", missingTabLabels)\n    }\n    return errors\n}\n\nconst checkPromptsForMissingPromptSetIDs = () => {\n    let errors = []\n    const promptsMissingPromptSet = PROMPTS.filter((rec) => !(\"promptSetID\" in rec))\n    if (promptsMissingPromptSet.length) {\n        errors.push(\"prompts withing promptSetID\")\n        errors.push(promptsMissingPromptSet)\n    }\n    return errors\n}\n\nconst checkForInvalidPromptSetIDs = () => {\n    let errors = []\n    const promptsWithBadPromptSetIDs = PROMPTS\n        .filter(rec => \"promptSetID\" in rec)\n        .filter(rec => undefined === PROMPT_SETS.find(ps => ps.id === rec.promptSetID))\n    if (promptsWithBadPromptSetIDs.length) {\n        errors.push(\"prompts with bad promptsSetIDs\")\n        errors.push(promptsWithBadPromptSetIDs)\n    }\n    return errors\n}\n\n\n// looks like I got interupted in the middle of implementing this (UNUSED)\nconst checkPromptOptions = () => {\n    INTV_META_DATA.filter((rec) => rec.type === TYPES.ANSWER)\n}\n\nconst getNamingConventionViolations = (list, prefix) => {\n    return list.filter(rec => !rec.id.startsWith(prefix))\n}\n\nconst reportViolations = (label, properPrefix, violations) => {\n    let errors = []\n    if (violations.length > 0) {\n        errors.push(`\nThe following ${label} don't begin with the prefix \"${properPrefix}\"\n--------------------------------------------------------------------------------`)\n        violations.forEach((rec) => errors.push(rec.id))\n    }\n    return errors\n}\n\nconst assessments = CHECKLIST_META_DATA.filter(rec => [TYPES.ASSESS, TYPES.ASSESS_OPTION].includes(rec.type))\n// console.log(\"assessments\", assessments)\nconst checkScenarioForMissingAssessmentFindings = (scenario) => {\n    // check for missing assessment findings in scenario data\n    return assessments.filter(rec => !(rec.id in scenario.assessmentFindings))\n}\n\nconst checkScenarioForInvalidAssessmentFindings = (scenario) => {\n    // check for assessment findings in scenario data which aren't valid\n    let invalids = []\n    Object.keys(scenario.assessmentFindings).forEach((af) => {\n        const found = assessments.find((rec) => rec.id === af)\n        // console.log(af, found)\n        if (found === undefined) {\n            invalids.push(af)\n        }\n    })\n    return invalids\n}\n\nconst checkForMissingInterventionForms = () => {\n    let errors = []\n    INTVS.forEach((intv) => {\n        // console.log(rec)\n        if (!(intv.id in INTV_FORMS)) {\n            errors.push(`missing from INTV_FORMS`)\n            errors.push(JSON.stringify(intv, null, 4))\n        }\n    })\n    return errors\n}\n\n// entry point for sanity checking routines\nexport const performSanityChecking = (scenarioData) => {\n    let errors = []\n    errors.concat(checkForDupIDs())\n    errors.concat(enforceNamingConventions())\n    errors.concat(checkPromptsForMissingPromptSetIDs())\n    errors.concat(checkForInvalidPromptSetIDs())\n    errors.concat(checkPrompts())\n    errors.concat(checkAssessments())\n    const missingFindings = checkScenarioForMissingAssessmentFindings(scenarioData)\n    const invalidFindings = checkScenarioForInvalidAssessmentFindings(scenarioData)\n    if (!!missingFindings.length) {\n        errors.push(\"scenario missing assessmentFindings\", missingFindings)\n    }\n    if (!!invalidFindings.length) {\n        errors.push(\"scenario invalid assessment findings\", invalidFindings)\n    }\n    errors.concat(checkForMissingInterventionForms())\n    return errors\n}\n\n\n// merges generic scenario-type data into scenarioSpecificData\nexport const dataMerger = (scenarioSpecificData) => {\n    let data = deepCopy(scenarioSpecificData)\n    // mix in scenario-type stuff\n    data.interventionForms = deepCopy(INTV_FORMS)\n    data.interventionMenus = deepCopy(INTV_MENUS)\n    data.phaseData = deepCopy(PHASE_DATA)\n    data.systemInterventions = deepCopy(SYSTEM_INTVS)\n    return data\n}\n","\nimport { INTV_FORMS, INTV_MENUS, PHASE_DATA, SYSTEM_INTVS } from \"./traumaScenarioV2.js\"\nimport { INTV_META_DATA } from \"./traumaScenarioV2MetaData.js\"\nimport { getRecsOfType, deepCopy } from \"./utils.js\"\n\nimport { MDB_TYPES as TYPES } from \"./constants.js\"\n\n// the rest of these imports can go away soon\nimport { criticalActions } from \"./crit-actions.js\"\n\nimport { CHECKLIST_META_DATA as CMDV0, INTV_META_DATA as IMDV0 } from \"./traumaScenarioV0MetaData.js\"\nimport { CHECKLIST_META_DATA as CMDV1, INTV_META_DATA as IMDV1 } from \"./traumaScenarioV1MetaData.js\"\nimport { CHECKLIST_META_DATA as CMDV2, INTV_META_DATA as IMDV2 } from \"./traumaScenarioV2MetaData.js\"\n\n\nexport const getScenarios = (db, scenarioType, schemaVersion) => {\n    const query = db.collection(\"scenarios\")\n             .where(\"scenarioType\", \"==\", scenarioType)\n             .where(\"schemaVersion\", \"==\", schemaVersion)\n    return query.get()\n        .then(snapShot => {\n            const scenarios = []\n            if (snapShot.size > 0) {\n                snapShot.docs.forEach(doc => {\n                    const data = doc.data()\n                    scenarios.push({\n                        id: data.id,\n                        name: data.name,\n                        scenarioType: data.scenarioType,\n                        schemaVersion: data.schemaVersion\n                    })\n                })\n            }\n            return scenarios\n        })\n}\nexport const getPublishedScenarioByID = (db, scenarioID) => {\n    return db.collection(\"published-scenarios\").doc(scenarioID).get().then(doc => doc.data())\n}\n\nexport const getScenarioByID = (db, scenarioID) => {\n    return db.collection(\"scenarios\").doc(scenarioID).get()\n        .then(doc => doc.data())\n        // .then(scenData => mergeData(db, scenData))\n}\n\nexport const getScenarioByName = (db, scenarioName, schemaVersion) => {\n    return db.collection(\"scenarios\")\n             .where(\"name\", \"==\", scenarioName)\n             .where(\"schemaVersion\", \"==\", schemaVersion)\n             .limit(1)\n             .get()\n            .then(snapShot => {\n                if (snapShot.size === 1) {\n                    return snapShot.docs[0].data()\n                } else {\n                    throw new Error(\"document not found\")\n                }\n            })\n            // .then(scenData => mergeData(db, scenData))\n            // .catch(error => error)\n\n}\n\nexport const getScenarioType = (db, scenarioType, schemaVersion) => {\n    return db.collection(\"scenario-types\")\n            .where(\"name\", \"==\", scenarioType)\n            .where(\"schemaVersion\", \"==\", schemaVersion)\n            .limit(1)\n            .get()\n            .then(snapShot => {\n                if (snapShot.size === 1) {\n                    return fixupScenarioTypeData(snapShot.docs[0].data())\n                } else {\n                    throw new Error(\"document not found\")\n                }\n            })\n}\n\n//uses the new collection\nconst getRequiredActions = (db, scenario) => {\n    return db.collection(\"problem-solutions\")\n    // return db.collection(\"scenario-required-actions\")\n        .where(\"scenarioName\", \"==\", scenario.name)\n        .where(\"schemaVersion\", \"==\", scenario.schemaVersion)\n        .limit(1)\n        .get()\n        .then(snapShot => {\n            if (snapShot.size === 1) {\n                const doc = snapShot.docs[0].data()\n                return {\n                    problems: doc.problems,\n                    // criticalActions: doc.criticalActions,\n                    associations: doc.associations\n                }\n            } else {\n                return {\n                    problems: [],\n                    // criticalActions: [],\n                    associations: {}\n                }\n            }\n        })\n}\n\nconst mergeAllData = (scenData, requiredActions, scenarioTypeData) => {\n    const scenario = deepCopy(scenData)\n    scenario.associations    = deepCopy(requiredActions.associations)\n    //scenario.criticalActions = deepCopy(requiredActions.criticalActions)\n    scenario.problems = deepCopy(requiredActions.problems)\n\n    scenario.checkListMetaData = deepCopy(scenarioTypeData.checkListMetaData)\n    scenario.hierarchy         = deepCopy(scenarioTypeData.hierarchy)\n    scenario.medications       = deepCopy(scenarioTypeData.medications)\n\n    // info still maintained in files\n    scenario.intvMetaData        = deepCopy(INTV_META_DATA)\n    scenario.interventionMenus   = deepCopy(INTV_MENUS)\n    scenario.systemInterventions = deepCopy(SYSTEM_INTVS)\n    // FIXME: scenario-specific substitutions in prompt answers still need to be performed\n    scenario.interventionForms = deepCopy(INTV_FORMS)\n    // this will be replaced by scenarioType.hierarchy\n    scenario.phaseData = deepCopy(PHASE_DATA)\n    return scenario\n}\n\nconst fixupScenarioTypeData = (scenarioTypeData) => {\n    // TEMPORARY HACK - due to subphase items not having a \"phase\" attribute. track subPhases \"phase\"\n    const subPhase2Phase = {}\n    const checklistMetaData = scenarioTypeData.checklist.map(rec => {\n        if (\"sub-phase\" === rec.type) {\n            subPhase2Phase[rec.id] = rec.phase\n        }\n        delete rec.relation\n        delete rec.items\n        delete rec.subPhases\n        if (\"sub-phase\" in rec) {\n            const sp = rec[\"sub-phase\"]\n            delete rec[\"sub-phase\"]\n            rec.subPhase = sp\n            rec.phase = subPhase2Phase[sp]\n        }\n        return rec\n    })\n    delete scenarioTypeData.checklist\n    scenarioTypeData.checkListMetaData = checklistMetaData\n    return scenarioTypeData\n}\n\nconst mergeData = async (db, scenData) => {\n    const requiredActions = await getRequiredActions(db, scenData)\n    const scenTypeData = await getScenarioType(db, scenData.scenarioType, scenData.schemaVersion)\n    return mergeAllData(scenData, requiredActions, scenTypeData)\n}\n\n\nexport const getPromptAndOptions = (scenario, promptID) => {\n    const prompt = scenario.intvMetaData.find(rec => rec.id === promptID)\n    const options = scenario.intvMetaData.filter(rec => rec.promptID === promptID)\n    prompt.options = options.map(opt => {\n        // not sure this is neccessary anymore since we have direct access to this now\n        // as compared to being preprocessed\n        opt.prompt = prompt.label\n        return opt\n    })\n    return prompt\n}\n\n//\n// the rest of these functions can go away soon (if not already)\n//\n\nconst mergeGenericTraumaScenarioData = (scenario) => {\n    // this is truama-scenario generic data\n    scenario.intvMetaData = deepCopy(INTV_META_DATA)\n    scenario.interventionMenus = deepCopy(INTV_MENUS)\n    scenario.systemInterventions = deepCopy(SYSTEM_INTVS)\n    // TODO: perform some scenario-specific substitutions here\n    scenario.interventionForms = deepCopy(INTV_FORMS)\n    // this will be replaced by scenarioType.hierarchy\n    scenario.phaseData = deepCopy(PHASE_DATA)\n\n    return scenario\n}\n\nconst reconstructChecklistMetaData = (scenario) => {\n    const checkListMetaData = []\n    const subPhasePhases = {}\n\n    const addFlattenedItem = (item, phase, subphase) => {\n        const obj = Object.assign({}, item)\n        delete obj.items\n        delete obj.dataEntry\n        obj.phase = phase\n        obj.subPhase = (!!subphase) ? subphase : null\n        checkListMetaData.push(obj)\n        // item.items are related assess-options or decision-options\n        item.items?.map(option => {\n            option.phase = phase\n            option.subPhase = (!!subphase) ? subphase : null\n            checkListMetaData.push(option)\n        })\n    }\n\n    scenario.phaseData.forEach(rec => {\n        if (rec.type === TYPES.PHASE) {\n            const phaseID = rec.id\n            const phaseObj = Object.assign({}, rec)\n            delete phaseObj.items\n            delete phaseObj.subPhases\n            delete phaseObj.dataEntry\n            checkListMetaData.push(phaseObj)\n            rec.items?.forEach(item => addFlattenedItem(item, phaseID, null))\n            rec.subPhases?.forEach(sp => subPhasePhases[sp.id] = phaseID)\n        } else if (rec.type === TYPES.SUB_PHASE) {\n            const subPhase = rec.id\n            const phase = subPhasePhases[subPhase]\n            const subPhaseObject = Object.assign({}, rec)\n            delete subPhaseObject.items\n            delete subPhaseObject.dataEntry\n            subPhaseObject.phase = phase\n            checkListMetaData.push(subPhaseObject)\n            rec.items.forEach(item => addFlattenedItem(item, phase, subPhase))\n        }\n    })\n    scenario.checkListMetaData = checkListMetaData\n    return scenario\n}\n\nexport const getMetaData = async (db, scenarioType, schemaVersion) => {\n    if (\"trauma\" !== scenarioType) {\n        throw(`ERROR: scenario type: ${scenarioType} isn't supported`)\n    }\n    switch (schemaVersion) {\n        case \"V0\":\n            return { \"CHECKLIST_META_DATA\": CMDV0, \"INTV_META_DATA\": IMDV0 }\n        case \"V1\":\n            return { \"CHECKLIST_META_DATA\": CMDV1, \"INTV_META_DATA\": IMDV1 }\n        case \"V2\":\n            return { \"CHECKLIST_META_DATA\": CMDV2, \"INTV_META_DATA\": IMDV2 }\n        default:\n            return Promise.reject(new Error(`ERROR: unknown schema version: ${schemaVersion}`))\n    }\n}\n\nexport const getInterventionForms = async (db, scenarioType, schemaVersion) => {\n    if (\"trauma\" !== scenarioType) {\n        return Promise.reject(new Error(`ERROR: scenario type: ${scenarioType} isn't supported`))\n    }\n    if (schemaVersion !== \"V2\") {\n        return {}\n    } else {\n        return INTV_FORMS\n    }\n}\n\nexport const getCriticalActions = async (db, scenario, schemaVersion) => {\n    if (scenario !== \"PHTC M2CA\") {\n        return Promise.reject(new Error(`ERROR: scenario ${scenario} not found`))\n    }\n    if (schemaVersion !== \"V0\" && schemaVersion !== 'V2') {\n        return Promise.reject(new Error(`ERROR: currently no critical actions for schema version ${schemaVersion}`))\n    }\n    return criticalActions\n}\n\n","import { db } from \"@meddbriefer/mdb-firebase\";\nimport { getMetaData } from \"@meddbriefer/scenario-data\";\n\n// Check if a document with the given name already exists\nexport const verifyDocument = async (collectionId, documentName) => {\n    let document = await db.collection(collectionId).doc(documentName).get();\n    return document.data() != null;\n};\n\n// Upload document object to database\nexport const publishDocument = async (collectionId, documentName, documentObject) => {\n    await db.collection(collectionId).doc(documentName).set(documentObject);\n    console.log(`Successfully published '${documentName}'.`);\n};\n\n// Pull document from database as object\nexport const getDocument = async (collectionId, documentName) => {\n    let document = await db.collection(collectionId).doc(documentName).get();\n    return document.data();\n};\n\n// Pull collection from database as array of document objects\nexport const getCollection = async (collectionId) => {\n    let collection = await db.collection(collectionId).get();\n    return collection.docs.map(item => item.data());\n};\n\n// Permanently delete document\nexport const deleteDocument = async (collectionId, documentName) => {\n    await db.collection(collectionId).doc(documentName).delete();\n    console.log(`'${documentName}' permanently deleted.`);\n    return true;\n};\n\n// Get a list of document names and a copy of each document\nexport const listDocumentNames = async (collectionId) => {\n  let documentList = db.collectionGroup(collectionId);\n  let documentDictionary = {};\n  documentList.get().then((querySnapshot) => {\n      querySnapshot.forEach((doc) => {\n          documentDictionary[doc.id] = doc.data();\n      });\n  });\n  return documentDictionary;\n}\n\nexport const getLogs = () => {\n    return db.collection(\"logs\").get()\n    .then(querySnapshot => {\n        return querySnapshot.docs.map(doc => {\n            const data = doc.data()\n            return {\n                id: doc.id,\n                label: data.label,\n                scenario: data.scenarioName,\n                userName: data.userName,\n                timestamp: data.timestamp\n            }\n        })\n    })\n}\n\n\nexport const getLog = (logID) => {\n    return db.collection(\"logs\").doc(logID).get()\n        .then((doc) => {\n            const data = doc.data()\n            data.id = doc.id\n            //let scenario = data.scenario;   //temporary until DB scenario name is fixed but won't hurt anything\n            //scenario = scenario.replace(\"PHTC \",\"\");  //temporary until DB scenario name is fixed but won't hurt anything\n            //data.scenario = scenario;\n            return data\n        })\n}\n\nexport const getDebriefLog = (logID) => {\n    return db.collection(\"debriefing-feedback-logs\").doc(logID).get()\n        .then((doc) => {\n            const data = doc.data()\n            data.id = doc.id\n            //let scenario = data.scenario;   //temporary until DB scenario name is fixed but won't hurt anything\n            //scenario = scenario.replace(\"PHTC \",\"\");  //temporary until DB scenario name is fixed but won't hurt anything\n            //data.scenario = scenario;\n            return data\n        })\n}\n// TODO: May need to update this when more data is moved to the database\nexport const retrieveCriticalActions = async (scenario, schemaVersion) => {\n    // return getCriticalActions(db, scenario, schemaVersion);\n    const docRef = db.collection(\"scenario-required-actions\").doc(scenario)\n    return docRef.get().then(doc => doc.exists ? doc.data() : null)\n}\n\n// TODO: May need to update this when more data is moved to the database\nexport const retrieveMetaData = async (scenarioType, schemaVersion) => {\n  return getMetaData(db, scenarioType, schemaVersion)\n}","import { useEffect, useState } from \"react\"\n\nimport { Link } from \"react-router-dom\"\nimport { getLogs } from \"../scripts/connect-firebase\"\n\nimport { Table } from \"reactstrap\"\nconst LogList = () => {\n    const [logs, setLogs] = useState([])\n    const [logsLoaded, setLogsLoaded] = useState(false)\n\n    useEffect(\n        () => {\n            getLogs()\n            .then(result => {\n                setLogs(result)\n                // console.log(result)\n                setLogsLoaded(true)\n            })\n            .catch(error => console.log('error fetching logs', error))\n        },\n        []\n    )\n\n    if (!logsLoaded) {\n        return (<h4>fetching log data</h4>)\n    }\n    return (\n        <Table striped={true} borderless size=\"sm\" hover>\n            <thead>\n                <tr>\n                    <th>Label</th>\n                    <th>Scenario</th>\n                    <th>Username</th>\n                    <th>Timestamp</th>\n                </tr>\n            </thead>\n            <tbody>\n                {logs.map(log => (\n                    <tr key={log.id}>\n                        <td>{log.label}</td>\n                        <td>{log.scenario}</td>\n                        <td>{log.userName}</td>\n                        <td>{log.timestamp}</td>\n                        <td>\n                            <Link to={`/logs/${log.id}`}>Analyze</Link>&nbsp;&nbsp;&nbsp;&nbsp;\n                            <Link to={`/debriefing-feedback-logs/${log.id}`}>Review</Link>\n                        </td>\n                    </tr>\n                ))}\n            </tbody>\n        </Table>\n    )\n\n}\n\nexport default LogList","import { formatAsMinSecs } from \"../utils\"\n\n// defines which assessment steps are not required per scenario.  Provides feedback on\n// why the step is not required.\nexport const exceptionDefs = \n[{scenarioName: \"M2CA\", exceptions: [[\"assess-opqrst-info\", \"This cannot be assessed when GCS < 15\"]]}\n  ]\n\nconst colorTypes = {\n    \"Good\": \"text-success\",\n    \"Caution\": \"text-warning\",\n    \"Problem\": \"text-danger\",\n    \"Not implemented\": \"text-muted\"\n}\n\nconst iconTypes = {\n    \"Good\": \"sentiment_satisfied\",\n    \"Caution\": \"report_problem\",\n    \"Problem\": \"highlight_off\",\n    \"Not implemented\": \"sentiment_neutral\"\n}\n\n//Feedback substitute commands for feedback template\n//@ means substitute this entry field into the feedback template and if no value in field say this in feedback, \n//? means substitute this entry field into the feedback template if the value exists,\n//+bos adds period to end sentence, two spaces and capitalizes first letter of what follows\n//+eos adds a period with no preceding spaces\n\nconst assessmentEntries = {\n    // state: [categorization for feedback, feedback template]\n    \"contraindicated\": [\"Problem\", \"This is contraindicated +bos @contraindicatedWhy +eos\"],\n    \"missingMinimal\": [\"Problem\", \"This is recommended by protocol @protocol +bos @why +eos\"],\n    \"missingOptional\": [\"Caution\", \"This is according to @protocol +bos but you could do it because @why +eos\"],\n    \"missingRequired\": [\"Problem\", \"This is recommended by protocol @protocol +bos @why +eos\"],\n    \"missingStandard\": [\"Problem\", \"This is recommended by protocol @protocol +bos @why +eos\"],\n    \"missingAssessment\": [\"Problem\", \"You did not do this assessment. +bos ?assessmentFB +eos\"],\n    \"notNecessary\": [\"Caution\", \"This was unnecessary +bos @why +eos\"],\n    \"assessment\": [\"Good\", \"\"],\n    \"assessment-option\": [\"Good\", \"\"],\n    \"decision-option\": [\"Good\", \"\"],\n    \"required-action\": [\"Good\", \"\"],\n    \"assessment-option-incorrect\": [\"Problem\", \"You chose the wrong assessment option +bos @incorrectAnswerFB +eos \"],\n    \"decision-option-incorrect\": [\"Problem\", \"You chose the wrong decision option +bos @incorrectAnswerFB +eos \"],\n    \"standard\": [\"Good\", \"\"],\n    \"standard-incorrect-answers\": [\"Problem\", \"The intervention is correct but there is a problem with the details you provided +bos @incorrectAnswersFB +eos\"],\n    \"minimal-incorrect-answers\": [\"Problem\", \"This would solve the problem but does not follow protocol @protocol +bos @minimalWhy +bos also there is a problem with the details you provided +bos @incorrectAnswersFB +eos\"],\n    \"minimal\": [\"Caution\", \"You solved the problem but did not follow protocol @protocol +bos @minimalWhy +eos\"],\n    \"green\": [\"Good\", \"\"],  //just for headers\n    \"red\": [\"Problem\", \"\"], //just for headers\n    \"yellow\": [\"Caution\", \"\"], //just for headers\n    //\"notFound\": [\"Not implemented\", \"Assessment knowledge is not yet specified\", []],\n    \"default\": [\"Not implemented\", \"Possible system issue.  This was not noted in the expert solution.\"]\n}\n\nconst getAssessmentEntry = (currentEntry,aIndex) => {\n    let assessmentEntry = \"\"\n    if (!assessmentEntries[currentEntry.status]){\n        assessmentEntry = assessmentEntries[\"default\"]}\n    else{assessmentEntry = assessmentEntries[currentEntry.status]}\n    return assessmentEntry[aIndex];\n}\n\nexport const getAssessmentIcon = (currentEntry) => {  \n    let val = iconTypes[getAssessmentEntry(currentEntry,0)]\n    return val;\n}\n\nexport const getColor = (currentEntry) => {\n    return colorTypes[getAssessmentEntry(currentEntry,0)];\n}\n\n//add protexted spaces after a . except for the very last .  \n//Otherwise html reduces continguous regular spaces to a single space.\n//Need this for text strings that will appear in one array entry because\n//of substitution\nconst fixStrSp = (textString) => {\n    let textArray = textString.split(\" \");\n    let lenTextArray = textArray.length;\n    textArray.forEach((item, i) => {\n        let newItem = item.trim()\n        if (newItem[item.length-1] === \".\" && i < lenTextArray-1){\n            //add protected space to the string\n            newItem = newItem + \"\\xa0\\xa0\"}\n        textArray[i] = newItem \n    })\n    let newString\n    for (let item of textArray){\n        if (!!newString){\n          newString = newString + \" \" + item;}\n        else{newString = item}\n\n    }\n    //console.log(newString, textArray)\n    return newString\n}\n\nexport const getFeedback = (currentEntry) => {\n    let feedbackTemplate = fixStrSp(getAssessmentEntry(currentEntry,1)).trim()\n    //Find any @ actions in the template and substitute with the indicated entry field\n    let feedbackArray = feedbackTemplate.split(\" \");\n    //Process all @ substitutions first since +eos does one forward action\n    feedbackArray.forEach((item, i) => {\n        let firstChar = item.charAt(0)\n        let newString = item.substring(1)\n        //trim off excess blanks before and after each word\n        feedbackArray[i] = feedbackArray[i].trim()\n        switch(firstChar){\n            case \"@\":\n                if (!!currentEntry[newString])\n                    //replace eos spacing with protected spaces in the substitution string\n                    { feedbackArray[i] = fixStrSp(currentEntry[newString]) }\n                else {\n                    feedbackArray[i] = \"[value for \" + newString + \" is missing]\" }\n                break\n            case \"?\":\n                if (!!currentEntry[newString])\n                //replace eos spacing with protected spaces in the substitution string\n                    { feedbackArray[i] = fixStrSp(currentEntry[newString]) }\n                else {\n                    feedbackArray[i] = \"\"  \n                    if (feedbackArray[i-1]  === \"+bos\"){feedbackArray[i-1] = \"\"}\n                    if (feedbackArray[i+1]  === \"+eos\"){feedbackArray[i+1] = \"\"}\n                }\n                break  \n            default:\n        }\n    })\n    //Now address the + actions in the template\n    feedbackArray.forEach((item, i) => {\n        let firstChar = item.charAt(0)\n        let previousString = \"\"\n        switch(firstChar){\n        case \"+\":\n            let afterPlusChar = item.substring(1)\n            switch(afterPlusChar){\n            case \"eos\":\n                //removes existing/redundant . if present so can be certain putting in single . \n                previousString = feedbackArray[i-1].trim();\n                if (previousString[previousString.length-1] === \".\"){\n                    previousString = previousString.slice(0,-1);}\n                //now add end of sentence and a protected space.  When stiched back into\n                //a single string a protected space will be added between each substring\n                feedbackArray[i-1] = previousString + \".\\xa0\"\n                feedbackArray[i] = \"\"  //get rid of the command since was applied\n                break\n            case \"bos\":\n                //removes existing/redundant . if present so can put in single .\n                previousString = feedbackArray[i-1].trim();\n                if (previousString[previousString.length-1] === \".\"){\n                    previousString = previousString.slice(0,-1);}\n                //now add end of sentence .\n                feedbackArray[i-1] = previousString + \".\\xa0\"\n                feedbackArray[i] = \"\" //get rid of the command since was applied\n                //Captitalize the beginning of the sentence\n                let nextString = feedbackArray[i+1].trim()\n                feedbackArray[i+1] = nextString.charAt(0).toUpperCase() + nextString.slice(1);\n                break\n            default:\n            }\n            break\n        default:\n    }}\n    )\n    //stitch back into a single string\n    let feedbackString\n    for (let item of feedbackArray){\n        if (!!feedbackString) {\n            if (item !== \"\"){\n                feedbackString = feedbackString + \"\\xa0\" + item;}} \n        else {if (item !== \"\"){feedbackString = item}}\n    }\n    //console.log(feedbackString)\n    return feedbackString\n}\n    \n\n\nexport const getTimestamp = (currentEntry) => {\n    if (currentEntry.status === \"criticalActionHeader\") {\n        return \"\";\n    }\n    if (currentEntry.timestamp === -1) {\n        return \"N/A\";  // formatAsMinSecs would convert this to 59:59\n    }\n    return formatAsMinSecs(currentEntry.timestamp);\n}\n\nexport const retrieveDebriefing = (log) => { \n    //console.log(log.events) \n    return (log.events)  \n}  \n","export const formatAsMinSecs = (seconds) => {\n    return new Date(seconds * 1000).toISOString().substr(14, 5)\n}","import React, { useContext } from 'react';\n\nimport {\n    Button,\n    Nav,\n    Navbar,\n    NavbarBrand,\n    NavbarText,\n} from \"reactstrap\";\n\nimport { AuthContext } from \"@meddbriefer/mdb-auth\"\n\n// {/* <Button color=\"primary\" onClick={prefsToggler}>\n//     Preferences\n// </Button> */}\n\n\nconst MDBNavBar = ({title, leftNav = null, rightNav = null }) => {\n\n    const { isAuthenticated, userName, signOutUser } = useContext(AuthContext)\n\n    return (\n        <Navbar color=\"dark\" dark>\n\n            <NavbarBrand href=\"#\">\n                MedDBriefer\n            </NavbarBrand>\n\n            {!!leftNav &&\n                <Nav>\n                {leftNav}\n                </Nav>\n            }\n\n            {!!title &&\n                <NavbarText tag=\"h3\">{title}</NavbarText>\n            }\n\n            <Nav>\n                {isAuthenticated &&\n                <>\n                    <NavbarText>\n                        Welcome, {userName} &nbsp;\n                    </NavbarText>\n                    <Button\n                        color=\"danger\"\n                        onClick={signOutUser}\n                    >\n                        Sign Out\n                    </Button>\n                </>\n                }\n                {!!rightNav &&\n                    rightNav\n                }\n            </Nav>\n\n        </Navbar>\n    )\n}\n\nexport default MDBNavBar;\n","import React, { useState, useEffect } from 'react';\nimport { Button, Table } from 'reactstrap';\nimport MDBNavBar from \"./MDBNavBar\"\nimport { getAssessmentIcon, getColor, getFeedback, getTimestamp} from \"./debriefingUtils\"\nimport { db } from \"@meddbriefer/mdb-firebase\"\n//import { getDebriefLog } from '../scripts/connect-firebase';\n\nconst _ = require(\"lodash\"); \n\n\n\nconst saveDebriefingLog = (log, actions) => {\n    console.log(\"In savingDebriefingLog\")\n    const docRef = db.collection(\"debriefing-feedback-logs\").doc(log.id)\n    let data = {\n        userName: log.userName,\n        ObserverFileCreater: log.userName,\n        label: log.label,\n        ObserverFileName: log.label,\n        commenter: \"\",\n        scenarioID: log.scenarioID,\n        scenarioName: log.scenarioName,\n        schemaVersion: log.schemaVersion,\n        timestamp: Date().toLocaleString()\n    }\n\n    let newActionsList = [];\n    let newObj = {};\n    let filterUnknown = false;\n\n    //for debugging puposes only\n    actions.forEach(function (logObj, index){\n        for (let [key, val] of Object.entries(logObj)) {\n            if (undefined === val) {\n                console.log(index, key, val)\n                filterUnknown = true;}\n             }\n        }\n    )\n        \n    if (filterUnknown) {\n        actions.forEach(function (logObj, index) {\n            newObj = _.pickBy(logObj, function (value, key) {\n                return !(value === undefined);\n            });\n            newActionsList.push(newObj)\n        })\n        data[\"events\"] = newActionsList\n    }\n    else (data[\"events\"] = actions);\n\n\n    //data[\"events\"] = formattedActions;\n    //console.log(JSON.stringify(data, null, 4))\n    docRef.set(data) \n}\n\n\n\n\n\nconst DisplayBaseDebriefing = ({log, actions, scenario, context}) => {\n    const [showCommentColumn, setShowCommentColumn] = useState(false);\n    // eslint-disable-next-line\n    //const [events, setEvents] = useState(log.events);\n    const [formattedActions, setFormattedActions] = useState(undefined);\n\n// const Debriefing = ({ log, metaData, criticalActions, associations }) => {\n    /* const toggleCommentColumn = () => {\n        setShowCommentColumn(!showCommentColumn);\n    } */\n    \n\n    const saveDebriefingLogLocally = () => {\n        saveDebriefingLog(log,formattedActions)\n    }\n\n    const toggleComments = () => {\n        setShowCommentColumn(!showCommentColumn)\n    }\n\n    const dispHeaderRow = (entry) => {\n        return (\n            <>\n                {entry.id ===  \"assessmentHeader\"\n                    ? <td colSpan=\"4\" className={getColor(entry)}>\n                        {entry.label}\n                    </td>\n                    : <td colSpan=\"10\" className={\"black\"} >\n                        <div><em>\n                        &nbsp;&nbsp;&nbsp;Intervention Group: {entry.probLabel}</em></div>\n                    </td>}\n            </>\n        )\n    }\n    \n    function getLabel(entry) {\n        return(\n            <>\n            {entry.type === \"obtain-vital-sign\"\n                ? vitalLabel(entry)\n                : regularLabel(entry)\n            }\n            </>\n    \n        )\n    }\n    \n    function getStatusLabel(entry){\n        let metaData = scenario.intvMetaData\n        let metaEntry = metaData.find(me => (entry.vital === me.id))\n        return(<>{metaEntry.label}</>)\n    }\n    \n    function vitalLabel(entry){\n        return(\n            <>\n            {entry.vitalType === \"intervention-status\"\n                ? <>Requested intervention status for: {getStatusLabel(entry)}, <p>Found: <i>{entry.value}</i></p></>\n                : <>Requested vital: {entry.vital}, <p>Found: <i>{entry.value}</i></p></>\n            }\n            </>\n        )\n    }\n    \n    function regularLabel(entry) {\n        return(\n            <>\n            {entry.subPhase && entry.type !== \"intervention\"\n                ? <><b>{entry.subPhase}:</b> {entry.actionDescription}.  {findingsData(entry)}</>\n                : <>{phaseLabel(entry)}</>\n        }\n            </>\n        )\n    }\n    \n    function phaseLabel(entry){\n        return(\n            <>\n            {entry.type === \"intervention\"\n                ? <>Intervention: {entry.actionDescription}. {findingsData(entry)} </>\n                : <>{entry.actionDescription}.  {findingsData(entry)}</>\n                }\n            </>\n        )\n    }\n        \n    function findingsData(entry){\n        return(\n            <>\n            {entry.finding\n            ?<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Findings: <i>{entry.finding}</i></p>\n            :<></>\n        }\n            </>\n        )\n    \n    }\n    \n    \n     function saveComment(val) {\n        let orig = val.target.defaultValue;\n        let comment = val.target.value;\n        let entryID = val.target.id;\n        if (orig !== comment){\n            let entry = formattedActions.find(entry => (entry.id === entryID))\n            // if (entry) { entry.comment = comment }}\n            const newEntry = Object.assign({}, entry, {comment: comment})\n            updateFormattedAction(newEntry)\n        }\n    }\n    \n    const dispDataRow = (entry) => {\n        return (\n            <>\n                <td>{entry.numericalID}</td>\n                <td>{getTimestamp(entry)}</td>\n                <td className={getColor(entry)}>\n                    <span className=\"material-icons-outlined\">{getAssessmentIcon(entry)}</span>\n                    {getLabel(entry)}\n                </td>\n                <td>{getFeedback(entry)}</td>\n\n                {showCommentColumn && <td><textarea rows=\"2\" cols=\"50\" defaultValue={entry.comment} onBlur={saveComment} id={`${entry.id}`}/></td>}\n            </>\n        )\n    }\n\n    \n    const updateFormattedAction = (record) => {\n        const index = formattedActions.findIndex(rec => rec.id === record.id)\n        setFormattedActions([\n            ...formattedActions.slice(0, index),\n            record,\n            ...formattedActions.slice(index+1)\n        ])\n    }    \n\n\n    async function displayIt () {\n        \n        \n        if (context === \"review\"){\n            //console.log(\"displaying for review\")\n            //setFormattedActions(actions)\n            setShowCommentColumn(true)        \n        }\n        else {\n            //console.log(\"displaying for non-review\")\n            //setFormattedActions(actions)\n            setShowCommentColumn(false)\n              }\n\n        setFormattedActions(actions)\n    \n        \n    }\n\n    \n   \n\n\n// eslint-disable-next-line\nuseEffect(\n    () => {\n        displayIt()\n        // eslint-disable-next-line\n    }, [] // empty list means this code will only be run on initial render\n)\n\n\n\nif (undefined === formattedActions) {\n    return (<h3>processing</h3>)\n}\n\nreturn (\n        <>\n            {context === \"review\"\n                ? <><MDBNavBar\n                    title={`Review of: ${log.label}`}\n                    leftNav={\n                        <Button\n                            color=\"primary\"\n                            onClick={saveDebriefingLogLocally}>Save Debriefing Log\n                        </Button>}\n                    rightNav={\n                        <Button\n                            color=\"primary\"\n                            onClick={toggleComments}>Toggle Comments\n                        </Button>}\n                     /></>\n                : <><MDBNavBar\n                    title={`Analysis for: ${log.label}`}\n                    /></>\n            }\n            <form>\n            <div style={{ overflowY: \"auto\", maxHeight: \"700px\" }}>\n                <Table borderless size=\"sm\">\n                    <thead>\n                        <tr>\n                            <th className=\"table-header\"> ID </th>\n                            <th className=\"table-header\"> Timestamp </th>\n                            <th className=\"table-header\"> Action Description </th>\n                            <th className=\"table-header\"> Feedback </th>\n                            {showCommentColumn && <th className=\"table-header\"> Comments </th>}\n                        </tr>\n                    </thead>\n                    <tbody className=\"scrolling\">\n                        {formattedActions.map((currentEntry, index) => (\n                            <tr key={index}>\n                                {currentEntry.type === \"header\"\n                                    ? dispHeaderRow(currentEntry)\n                                    : dispDataRow(currentEntry)\n                                }\n                            </tr>\n                        ))}\n                    </tbody>\n                </Table>\n            </div>\n        </form>\n        </>\n\n    )\n}\n\nexport {saveDebriefingLog}  \nexport default DisplayBaseDebriefing","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom'\nimport { MDB_TYPES } from '@meddbriefer/scenario-data/constants.js';\nimport {exceptionDefs} from \"./debriefingUtils\"\nimport { db } from \"@meddbriefer/mdb-firebase\"\nimport DisplayBaseDebriefing , {saveDebriefingLog} from './displayBaseDebriefing';\nimport { getDebriefLog, getLog, verifyDocument } from '../scripts/connect-firebase'\nimport { getPublishedScenarioByID } from '@meddbriefer/scenario-data'\n\n\nasync function analyzeEvents(scenario, log) {\n    let events = log.events;\n    console.log(\"in analyzeEvents\")\n    \n    const setupProblems = (problemDefs) => {\n        let problems = [];\n        for (let problemDef of problemDefs) {\n            let problem = {};\n            problem.findings = problemDef.findings;\n            problem.allProblemProtocols = problemDef.protocol;\n            problem.probLabel = problemDef.problem;\n            problem.critical = false;\n            if (problemDef.type === \"critical\") { problem.critical = true; };\n            let solution = problemDef.solutions[0];\n            problem.actions = solution.actions;\n            problem.contraindications = solution.contraindications;\n            problem.minimalWhy = solution.minimalWhy;\n            problem.protocols = solution.protocols;\n            problems.push(problem);\n        }\n        return (problems);\n\n        //console.log(problems)\n    };\n\n\n\n    const insertInPhaseInOrder = (phaseNames, phases, object, objIndex) => {\n        let phase = object.when;\n        let phaseIndex = phaseNames.lastIndexOf(phase);\n        let phaseObjects = phases[phaseIndex];\n        if (!phaseObjects) { phaseObjects = []; }\n        phaseObjects.splice(objIndex - 1, 0, object);\n        phases[phaseIndex] = phaseObjects;\n    };\n\n    const getLastSubPhase = (inPhaseId, phaseNames) => {\n        let subPhases = getSubPhases(inPhaseId);\n        let subPhaseName;\n        let reversedSubPhases = [...subPhases].reverse();\n        for (let subPhase of reversedSubPhases) {\n            subPhaseName = phaseNames.find(id => id === subPhase.id);\n            if (!!subPhaseName) { break; }\n        }\n        return subPhaseName;\n    };\n\n    const getLastSubPhaseIndex = (inPhaseId, phaseNames) => {\n        let subPhaseName = getLastSubPhase(inPhaseId, phaseNames);\n        let index = phaseNames.lastIndexOf(subPhaseName);\n        //console.log(subPhaseName,index)\n        return index;\n    };\n\n    const getSubPhases = (phaseId) => {\n        let mainPhases = findPhases();\n        let phaseEntry = mainPhases.find(phase => phase.id === phaseId);\n        return (phaseEntry.subPhases);\n    };\n\n\n\n\n    const findHeaderFor = (numericalID, log) => {\n        let candidateHeader = {};\n        let foundHeader = {};\n        for (let entry of log) {\n            if (entry.id === \"problemHeader\") {\n                candidateHeader = entry;\n            }\n            else {\n                if (entry.numericalID === numericalID) {\n                    foundHeader = candidateHeader;\n                    break;\n                }\n            }\n        }\n        return (foundHeader);\n    };\n\n    const getPhaseLabel = (scenario, phaseID) => {\n        let data = scenario.phaseData;\n        let result = data.find(entry => entry.id === phaseID);\n        //console.log(result.label)\n        return result.label;\n    };\n\n\n    // this is a hack to approximate a good placement for a missing intervention based on ordering of interventions\n    // in the problems definitions, what appears in the log that is just before and just after\n    // the item to be inserted, and what is marked as required that is in the log just before and after.  An approach that\n    // utilizes partial ordering constraints would be better.  Also it is not clear what to do for really badly ordered\n    // actions on the part of the student.  Note that it only looks for two anchor points before and two anchor points after\n    // rather than all potential anchor points.  Also it does not deal with a phase that is split into multiple time periods\n    // within a log\n    const insertInPhaseRelativeToSuggestedOrder = (phaseNames, phases, object, orderedArrayObjects, objIndex) => {\n        // if expertPhase in object is a phase then find the last subphase and insert there instead of at the beginning\n        let phaseIndex = -1;\n        //console.log(object);\n        if (requiredSubphases.includes(object.expertPhase) || !getSubPhases(object.expertPhase)) {\n            phaseIndex = phaseNames.lastIndexOf(object.expertPhase);\n        }\n        else {\n            phaseIndex = getLastSubPhaseIndex(object.expertPhase, phaseNames);\n            //update object when field\n            object.when = phaseNames[phaseIndex];\n            //object.expertPhase = object.when\n            //console.log(phaseIndex)\n        }\n\n        let objectsBefore = orderedArrayObjects.slice(0, objIndex - 1);\n        let objectBefore = orderedArrayObjects[objIndex - 1];\n        // console.log(\"Objects before in def\", {...objectsBefore})\n        let requiredObjectBefore = [...objectsBefore].reverse().find(entry => entry.required);\n        let objectAfter = orderedArrayObjects[objIndex + 1];\n        let objectsAfter = orderedArrayObjects.slice(objIndex + 1);\n        let requiredObjectAfter = objectsAfter.find(entry => entry.required);\n        //let phaseIndex = phaseNames.lastIndexOf(object.expertPhase);\n        let phaseObjects = [...phases[phaseIndex]]; //trying for a deep copy of the array mainly for debug via console.log\n\n        //console.log(phaseObjects)\n        let indexBefore = -1;\n        let indexAfter = -1;\n        let indexRequiredBefore = -1;\n        let indexRequiredAfter = -1;\n        let insertionIndex = false;\n        if (objectBefore) { indexBefore = phaseObjects.findIndex(entry => entry.id === objectBefore.id); }\n        if (objectAfter) { indexAfter = phaseObjects.findIndex(entry => entry.id === objectAfter.id); }\n        if (requiredObjectBefore) { indexRequiredBefore = phaseObjects.findIndex(entry => entry.id === requiredObjectBefore.id); }\n        if (requiredObjectAfter) { indexRequiredAfter = phaseObjects.findIndex(entry => entry.id === requiredObjectAfter.id); }\n        if (objectAfter) { indexAfter = phaseObjects.findIndex(entry => entry.id === objectAfter.id); }\n        /* console.log(\"Phase Objects\", {...phaseObjects})\n        console.log(\"Object to insert\", {...object})\n        console.log(\"Object before\",{...objectBefore})\n        console.log(\"Object After\",{...objectAfter})\n        console.log(\"Required Object Before\", {...requiredObjectBefore})\n        console.log(\"Required Object After\", {...requiredObjectAfter}) */\n        // There is a more compact way to do the below but this made\n        // it easier for me to get the logic right\n        // insert according to required before first as we want to follow something that was required\n        if (indexRequiredBefore !== -1) {\n            insertionIndex = indexRequiredBefore + 2;\n            // but if the just before object is greater then insert relative to it\n            if (indexBefore > indexRequiredBefore) { insertionIndex = indexBefore + 2; }\n        }\n        //if no required before and not required after then insert relative to\n        //required item after in actions definition\n        if (!insertionIndex && indexRequiredAfter !== -1) {\n            insertionIndex = indexRequiredAfter + 1;\n            // unless the just after is smaller then override and insert relative to it\n            if (indexAfter < indexRequiredAfter) { insertionIndex = indexAfter + 1; }\n        }\n        //otherwide if have a just before insert relative to it\n        if (!insertionIndex && indexBefore !== -1) {\n            insertionIndex = indexBefore + 2;\n        }\n        //otherwise if have a just after insert relative to it\n        if (!insertionIndex && indexAfter !== -1) {\n            insertionIndex = indexAfter + 1;\n        }\n        //otherwise put at end of phase\n        if (!insertionIndex) {\n            insertionIndex = phaseObjects.length + 2;\n        }\n        insertInPhaseInOrder(phaseNames, phases, object, insertionIndex);\n\n    };\n\n    //to display the log using the phase structures accumulated\n    // i.e. puts the phases data together in the order in which\n    // should be displayed in debriefing log\n    const organizeLogDisplay = (phaseNames, phases) => {\n        let phaseIndex = -1;\n        let displayObjects = [];\n        let entryIndex = 1;\n        let phaseObjects = [];\n        //console.log(phases, phaseNames)\n        phaseNames.forEach(phase => {\n            let problemHeaderColor = \"green\";\n            phaseIndex++;\n            phaseObjects = phases[phaseIndex];\n            phaseObjects.forEach(phaseObject => {\n                if ([\"contraindicated\", \"missingAssessment\", \"missingRequired\"].includes(phaseObject.status)) {\n                    problemHeaderColor = \"red\";\n                }\n                // Red has a higher priority than yellow\n                if ([\"missingStandard\", \"standard-incorrect-answers\"].includes(phaseObject.status) && problemHeaderColor !== \"red\") {\n                    problemHeaderColor = \"yellow\";\n                }\n                phaseObject.numericalID = entryIndex;\n                entryIndex++;\n            });\n\n            if (!requiredSubphases.includes(phase)) {\n                let tempHeaderObject = {\n                    \"id\": \"assessmentHeader\",\n                    \"type\": \"header\",\n                    \"numericalID\": 1,\n                    \"status\": problemHeaderColor,\n                    \"why\": \"\",\n                    \"label\": getPhaseLabel(scenario, phase),\n                    \"protocol\": \"\"\n                };\n                //console.log(phaseObjects);\n                displayObjects.push(tempHeaderObject);\n            }\n            displayObjects = displayObjects.concat(phaseObjects);\n        });\n        return displayObjects;\n    };\n\n    const evalForIncorrectAnswer = (promptID, answerID, isIntervention) => {\n        //check each prompt and if is the appropriate one then  \n        let answers = undefined\n        if (isIntervention){\n            answers = scenario.associations[promptID];\n        }\n        else {answers = scenario.checkListCorrectness[promptID];}\n\n        if (answers === undefined){console.log(\"didn't find answers for \", promptID); return(false)}  //can't grade if answers not found in spec\n\n        if (Array.isArray(answers)) {\n            //returns bool regarding whether answerID NOT in answers\n            return !(answers.find(ansId => ansId === answerID));\n\n        }\n        else {\n            return !(answers === answerID);\n        }\n    };\n\n    const getCorrectAnswerLabel = (promptID, isIntervention) => {\n        let answers \n        let metaData\n        if (isIntervention){\n            answers = scenario.associations[promptID];\n            metaData = scenario.intvMetaData}\n        else {answers = scenario.checkListCorrectness[promptID];\n            metaData = scenario.checkListMetaData}\n        //console.log (\"in getCorrectAnswerLabel\", answers)\n        let answerLabels = \"\";\n        if (Array.isArray(answers)) {\n            answers.forEach((answer, j) => {\n                metaData.forEach((entry, i) => {\n                    if (entry.id === answer) {\n                        if (answerLabels === \"\") {\n                            answerLabels = entry.label;\n                        }\n                        else { answerLabels = answerLabels + \", \"; }\n                        return;\n                    }\n                });\n            });\n        }\n\n        else {\n            \n            metaData.forEach((entry, i) => {\n                /* //needed to find out what the types are for debugging\n                let answertypes = []\n                if (!answertypes.find(type => type === entry.type)){\n                    answertypes.push(entry.type)} */\n\n                if (entry.id === answers) {\n                    answerLabels = entry.label;\n                }\n            });\n        }\n        //answerLabels = answerLabels.charAt(0).toLowerCase() + answerLabels.slice(1);\n        return \"'\" + answerLabels + \"'\";\n    };\n\n    const getAnswerLabel = (answerID, isIntervention) => {\n        let metaData\n        if (isIntervention){\n            metaData = scenario.intvMetaData}\n        else {metaData = scenario.checkListMetaData}\n        let answerLabel = \"\";    \n        metaData.forEach((entry, i) => {\n                if (entry.id === answerID) {\n                    answerLabel = entry.label;\n                }\n            });\n        console.log(\"in getAnswerLabel\", answerID ,metaData, answerLabel)\n        return answerLabel ;\n    }\n\n    const findRequiredPhases = () => {\n        let phases = [];\n        scenario.phaseData.forEach((entry, i) => {\n            phases.push(entry.id);\n        });\n        return phases;\n    };\n\n    const findSubphases = () => {\n        let subphases = [];\n        scenario.phaseData.forEach((entry, i) => {\n            if (entry.type === \"sub-phase\") {\n                subphases.push(entry.id);\n            }\n        });\n        return subphases;\n    };\n\n    const findPhases = () => {\n        let mainPhases = [];\n        scenario.phaseData.forEach((entry, i) => {\n            if (entry.type === \"phase\") {\n                mainPhases.push(entry);\n            }\n        });\n        return mainPhases;\n    };\n\n    /* const insertInPhase = (phaseNames, phases, object) => {\n        let phase = object.phase;\n        let phaseIndex = phaseNames.lastIndexOf(phase);\n        let phaseObjects = phases[phaseIndex];\n        if (!phaseObjects) { phaseObjects = []; }\n        phaseObjects.push(object);\n        phases[phaseIndex] = phaseObjects;\n    } */\n    // temporarily make metaData and events directly accessible from the developer console for dev purposes\n    // window.metaData = metaData\n    //preprocess some of data from problems/solutions\n    //and for now just flatten it some to set up to \n    //look more like the original criticalActions in scenario\n    // assumes just one solution for now.\n    let problemDefs = scenario.problems;\n    let problems = setupProblems(problemDefs);\n    //console.log(problemDefs);\n    //for now just dealing with the first solution for each problem\n    let requiredPhaseNames = findRequiredPhases();\n    let requiredSubphases = findSubphases();\n    //window.events = events;\n\n    let tempFormattedActions = [];\n    let tempConfirmedActions = [];\n    //instead of a multi-dimensional array, am using an array of phase names e.g. \"BSI\", \"prinary\" and\n    let phaseNames = [];\n    let phases = []; //and another array with the actual content for each phase.  I can search phaseNames for the last\n\n\n    // phases entry of that name and then use that index to retrieve the appropriate phase entried to\n    //add on the missing items (assessment or intervention) for that phase\n    let phaseObjects = [];\n    let priorPhase = \"\";\n    let phaseIndex = 0;\n\n    // sts 08/13/21 the following block of code (terminated by another comment) could be categorizeAndAnnotateActions()\n    // created a formated object for each event\n    events.forEach((event, i) => {\n        // Each tempObject is one of the lines in the displayed log\n        // Set up fields for extra annotations for this event after analyzing each event\n        let tempObject = {\n            \"comment\": \"\",\n            \"numericalID\": i,\n            \"status\": \"\",\n            \"contraindicatedWhy\": \"\",\n            \"minimalWhy\": \"\",\n            \"why\": \"\",\n            \"displayLabel\": \"\",\n            \"answerCorrect\": true,\n            \"expertPhase\": \"\",\n            \"protocol\": \"\",\n            \"probLabel\": \"\",\n            \"findings\": \"\",\n            \"required\": false,\n            \"actionDescription\": \"\",\n            \"assessmentFB\": \"\",\n            \"incorrectAnswersFB\": \"\",\n            \"processingState\": \"good\" // values of good/bad used to filter out events not needed for analysis or displaying\n        };\n\n        // copy over the event fields that exist in the input log from observer UI (which is type dependent)\n        const EVENT_FIELDS = [\"id\", \"label\", \"finding\", \"phase\", \"subPhase\", \"vitalType\", \"vital\", \"value\", \"type\", \"prompt\", \"promptID\", \"intervention\", \"timestamp\"];\n        EVENT_FIELDS.forEach(fldName => {\n            if (!!event[fldName]) {\n                tempObject[fldName] = event[fldName];\n            }\n        });\n\n        //copy event fields if defined to initialize some of the above annotation fields\n        if (!!event.label) { tempObject.actionDescription = event.label; }\n        if (!!event.type) { tempObject.status = event.type; }\n        // prefer subPhase if available\n        if (!!event.subPhase) { tempObject.expertPhase = event.subPhase; }\n        else {\n            if (!!event.phase) { tempObject.expertPhase = event.phase; }\n        }\n\n        //if current phase not the same as prior then keep on with the current phase\n        // then save that phase and initialize for a new phase\n        if (priorPhase !== tempObject.expertPhase && priorPhase !== \"\") {\n            phases[phaseIndex] = phaseObjects;\n            priorPhase = tempObject.expertPhase;\n            phaseObjects = [];\n            phaseIndex = phaseIndex + 1;\n            phaseNames[phaseIndex] = tempObject.expertPhase;\n        }\n        else {\n            if (priorPhase === \"\") {\n                phaseNames[phaseIndex] = tempObject.expertPhase;\n                priorPhase = tempObject.expertPhase;\n            }\n        }\n\n\n        let tempType = tempObject.type;\n        // List of types in log that are currently processed.  Rest are filtered out.\n        let processedTypes = [\"assessment\", \"required-action\", \"intervention\", \"answer\", \"obtain-vital-sign\", \"decision-option\", \"assessment-option\"];\n\n        //skip over adding anything not of these types to the debriefing display for now\n        if (!processedTypes.includes(tempType)) {\n            tempObject.processingState = \"bad\";\n        }\n\n        // when get an answer for an intervention, the intervention itself is later in the event log, so \n        // accumulate the answers and then when an intervention is later found we can use the correct label\n        // and add the answers to it\n        let priortempObject = [];\n        if (tempType === \"answer\") {\n            //currently returns correct answer-id if has answered incorrectly or false if answered correctly\n            let wrongAnswer = evalForIncorrectAnswer(event.promptID, event.id, true);\n             \n            \n            if (tempConfirmedActions.includes(tempObject.intervention)) {\n                priortempObject = phaseObjects.pop();\n                tempObject.answerCorrect = priortempObject.answerCorrect; \n                //add the answer student gave to the action description  \n                tempObject.actionDescription = priortempObject.actionDescription + \", \" + getAnswerLabel(event.id, true); \n                if (wrongAnswer) {\n                    tempObject.answerCorrect = false;\n                    let answerLabel = getCorrectAnswerLabel(event.promptID, true);\n                    if (priortempObject.incorrectAnswersFB === \"\") {\n                        if (answerLabel !== \"\") {\n                            tempObject.incorrectAnswersFB = \"should have responsed \" + answerLabel;\n                        }\n                        else { tempObject.incorrectAnswersFB = \"[could not assess responses to: \" + tempObject.prompt + \"]\"; }\n                    }\n                    else {\n                        if (answerLabel !== \"\") {\n                            tempObject.incorrectAnswersFB = priortempObject.incorrectAnswersFB + \", and \" + answerLabel;\n                        }\n                        else { tempObject.incorrectAnswersFB = \"[could not assess responses to: \" + tempObject.prompt + \"]\"; }\n                    }\n                }\n                else {\n                    tempObject.incorrectAnswersFB = priortempObject.incorrectAnswersFB;\n                    tempObject.answerCorrect = priortempObject.answerCorrect;\n                }\n            }\n            else {\n                //put the answer student gave in the action description\n                tempObject.actionDescription = getAnswerLabel(event.id, true);\n                if (wrongAnswer) {\n                    let answerLabel = getCorrectAnswerLabel(event.promptID, true);\n                    tempObject.answerCorrect = false;\n                    if (answerLabel !== \"\") {\n                        tempObject.incorrectAnswerFB = \"should have responded \" + answerLabel;\n                    }\n                    else { tempObject.incorrectAnswerFB = \"[currently unable to assess responses for: \" + tempObject.prompt + \"]\"; }\n                }\n\n                else { tempObject.incorrectAnswersFB = \"\"; }\n                tempConfirmedActions.push(tempObject.intervention);\n            }\n        }\n\n        if (tempType === \"intervention\") {\n            priortempObject = phaseObjects.slice(-1)[0]; //slice returns an array rather than the last object in array\n            if (priortempObject && priortempObject.type === \"answer\" && priortempObject.intervention === tempObject.id) {\n                priortempObject = phaseObjects.pop();\n                tempObject.answerCorrect = priortempObject.answerCorrect;\n                tempObject.incorrectAnswersFB = priortempObject.incorrectAnswersFB;\n                tempObject.actionDescription = tempObject.actionDescription + \".\\xa0\\xa0\" + priortempObject.actionDescription\n                /* if (priortempObject.incorrectAnswersFB === \"\") {\n                    tempObject.incorrectAnswersFB = tempObject.label;\n                }\n                else {\n                    tempObject.incorrectAnswersFB = tempObject.label + \", \" + priortempObject.incorrectAnswersFB;\n                } */\n            }\n        }\n\n        if (tempObject.processingState === \"good\") {\n            \n\n            // currently we only need to examine critical actions if the action \n            // is of type intervention\n            if (tempObject.type === \"intervention\") {\n\n                // iterate through all problem actions looking how to format the\n                // data structue for the current \"event\"\n                problems.forEach((prob, j) => {\n                    // We're going through things in the order standard, contraindicated since\n                    // it is possible but unlikely to have multiple matches and we want the last one to win.\n                    // Also, we are assuming minimal is always a subset of standard\n\n\n                    const PROBLEM_ACTION_FIELDS = [\"findings\", \"protocol\", \"phase\", \"why\"];\n\n                    // check for this action to be an intervention for a problem\n                    prob.actions?.forEach((action, k) => {\n                        if (action.id === tempObject.id) {\n                            if (!action.optional) { tempObject.required = true; }\n                            if (tempObject.answerCorrect) {\n                                tempObject.status = \"standard\";\n                            }\n                            else { tempObject.status = \"standard-incorrect-answers\"; }\n                            tempObject.probLabel = prob.probLabel;\n                            PROBLEM_ACTION_FIELDS.forEach(fldName => {\n                                if (!!action[fldName]) {\n                                    tempObject[fldName] = action[fldName];\n                                }\n                            });\n                            if (!!action[\"id-label\"]) { tempObject[\"label\"] = action[\"id-label\"]; }\n                        }\n                    });\n\n\n                    // check for this action to be a contraindication for a problem solution\n                    prob.contraindications?.forEach((contra, j) => {\n                        if (contra.id === tempObject.id) {\n                            tempObject.status = \"contraindicated\";\n                            if (!!contra.why) { tempObject.contraindicatedWhy = contra.why; }\n                            if (!!contra[\"id-label\"]) { tempObject.label = contra[\"id-label\"]; }\n                            if (!!contra.protocol) { tempObject.protocol = contra.protocol; }\n                            if (!!prob.probLabel) { tempObject.probLabel = prob.probLabel; }\n                        }\n                    });\n\n                });\n                // add the formatted object to our list of formatted objects for the current phase and the id to our set of confirmed ids\n            }\n            if (tempObject.type === \"decision-option\"){\n                let wrongAnswer = evalForIncorrectAnswer(event.promptID, event.id, false);\n                if (wrongAnswer){\n                    tempObject.status = \"decision-option-incorrect\"\n                    tempObject.answerCorrect = false\n                    tempObject.incorrectAnswerFB = \"You should have responded \" + getCorrectAnswerLabel(event.promptID, false);\n                    }\n            }\n        \n            if (tempObject.type === \"assessment-option\"){\n                let wrongAnswer = evalForIncorrectAnswer(event.promptID, event.id, false);\n                if (wrongAnswer){\n                    tempObject.status = \"assessment-option-incorrect\"\n                    tempObject.answerCorrect = false\n                    tempObject.incorrectAnswerFB = \"You should have responded \" + getCorrectAnswerLabel(event.promptID, false);\n                    }\n            }\n            tempConfirmedActions.push(tempObject.id);\n            phaseObjects.push(tempObject);\n\n        }\n    });\n\n    // store the last phase processed\n    phases[phaseIndex] = phaseObjects;\n    //console.log(phases)\n    // sts 08/13/21 end of categorizeAndAnnotateActions\n    // sts 08/13/21 start of categorizeAndAnnotateMissingActions()\n    //add missing phase names to phaseNames\n    requiredPhaseNames.forEach((phase, i) => {\n        if (!phaseNames.includes(phase)) {\n            phaseNames.splice(i, 0, phase); //insert it where it should have appeared\n            phases.splice(i, 0, []); //add the empty array for phase objects\n        }\n    });\n\n\n    // check for missing checklist steps\n    let indexCounter = events.length;\n    var checklistSteps = scenario.checkListMetaData.filter(md => [MDB_TYPES.ASSESS, MDB_TYPES.REQUIRED].includes(md.type));\n    //console.log(\"checkliststeps: \", checklistSteps)\n    // before evaluating assessment steps, deal with exceptional cases where one or more steps is not\n    // necessary for a given scenario.  Because GCS value is a string and not a formatted object\n    // we can't reliably parse out values and units to do more general checks so can only set what \n    // steps should not be assessed for a particular scenario.  Requires info on feedback to give as\n    // well.\n    // Get any exceptional steps associated with the current scenario\n    var exceptions = [];\n    for (let exceptionDef of exceptionDefs) {\n        if (exceptionDef.scenarioName === scenario.name) {\n            exceptions = exceptionDef.exceptions;\n            break;\n        }\n    }\n\n    exceptions.forEach((exception, j) => {\n        // remove the step from the checklist as it is not required \n        checklistSteps = checklistSteps.filter(entry => entry.id !== exception[0]);\n\n        // if the step was done during the observation then mark it as an issue\n        if (tempConfirmedActions.includes(exception[0])) {\n            //console.log(\"marking action as not necessary\")\n            // it could appear in any phase so check all phases and mark \n            // each instancs as unnecessary\n            phases.forEach((phaseObjects, j) => {\n                phaseObjects.forEach((action, i) => {\n                    if (action.id === exception[0]) {\n                        //console.log(\"found action to mark\")\n                        action.why = exception[1];\n                        action.status = \"notNecessary\";\n                    }\n                });\n            });\n        }\n\n    });\n\n    // iterate through all checklist steps for ones for which we don't have formated objects\n    checklistSteps.forEach((cls, i) => {\n        if (!tempConfirmedActions.includes(cls.id)) {\n            // add so we don't check for the missing checklist item again\n            tempConfirmedActions.push(cls.id);\n            let phaseObject = {\n                \"comment\": \"\",\n                \"numericalID\": indexCounter,\n                \"status\": \"missingAssessment\",\n                \"expertPhase\": \"\",\n                \"contraindicatedWhy\": \"\",\n                \"minimalWhy\": \"\",\n                \"why\": \"\",\n                \"probLabel\": \"\",\n                \"protocol\": \"\",\n                \"actionDescription\": \"\",\n                \"assessmentFB\": \"\",\n                \"timestamp\": -1\n            };\n\n            //copy over the step fields that exist (type dependent)\n            const STEP_FIELDS = [\"id\", \"label\", \"finding\", \"phase\", \"subPhase\", \"type\", \"prompt\"];\n            STEP_FIELDS.forEach(fldName => {\n                if (!!cls[fldName]) {\n                    phaseObject[fldName] = cls[fldName];\n                }\n            });\n            if (!!cls.subPhase) { phaseObject.expertPhase = cls.subPhase; }\n            else { if (!!cls.phase) { phaseObject.expertPhase = cls.phase; } }\n            phaseObject.when = phaseObject.expertPhase;\n\n            if (!!phaseObject.label) { phaseObject.actionDescription = phaseObject.label; }\n            let findings = scenario.assessmentFindings[cls['id']]\n            if (!!findings & findings !== \"Unremarkable\" & findings !== \"Stable\"){\n                phaseObject.assessmentFB = \"Thus you missed finding: \" + findings}\n            insertInPhaseInOrder(phaseNames, phases, phaseObject, i);\n            indexCounter++;\n        }\n    });\n\n    \n\n    // search for missing interventions for each action\n    // Doing this separately from the earlier actions loop because\n    // we wanted to add in missing assessment steps first\n    problems.forEach(prob => {\n\n\n        const actions = prob.actions;\n\n\n        // now we just have to examine action ids to see what is missing\n        actions.forEach((action, k) => {\n            if (!tempConfirmedActions.includes(action.id)) {\n                tempConfirmedActions.push(action.id);\n                let phaseObject = {\n                    \"comment\": \"\",\n                    \"numericalID\": indexCounter,\n                    \"status\": \"\",\n                    \"required\": true,\n                    \"when\": \"\",\n                    \"expertPhase\": \"\",\n                    \"probLabel\": prob.probLabel,\n                    \"minimalWhy\": prob.minimalWhy,\n                    \"findingsNeeded\": prob.findings,\n                    \"protocol\": prob.protocols,\n                    \"actionDescription\": \"\",\n                    \"type\": \"intervention\",\n                    \"timestamp\": -1\n                };\n\n                //copy over the step fields that exist (type dependent)\n                const ACTION_FIELDS = [\"id\", \"phase\", \"protocol\", \"why\", \"optional\", \"minimal\"];\n                ACTION_FIELDS.forEach(fldName => {\n                    if (!!action[fldName]) {\n                        phaseObject[fldName] = action[fldName];\n                    }\n                });\n\n                //initialize some fields above that come from action if they are defined\n                if (!!action.optional) { phaseObject.required = !action.optional; }\n                if (!!action[\"id-label\"]) { phaseObject.label = action[\"id-label\"]; }\n                if (!!action[\"id-label\"]) { phaseObject.actionDescription = action[\"id-label\"]; }\n                if (!!action.phase) {\n                    phaseObject.when = action.phase;\n                    phaseObject.expertPhase = action.phase;\n                }\n\n\n                if (phaseObject.required) {\n                    phaseObject.status = \"missingRequired\";\n                }\n                else {\n                    if (!phaseObject.optional) { phaseObject.status = \"missingStandard\"; }\n                    else { phaseObject.status = \"missingOptional\"; }\n                }\n                //assume actions are in the suggested order to solve a problem\n                //console.log(phaseNames,phases,phaseObject,actions,k)\n                if (phaseObject.status !== \"missingOptional\") {\n                    insertInPhaseRelativeToSuggestedOrder(phaseNames, phases, phaseObject, actions, k);\n                    indexCounter++;\n                }\n            }\n\n        });\n    });\n\n\n\n    // sts 08/13/21 end of categorizeAndAnnotateMissingActions()\n    // sts 08/13/21 start of addHeadersToAnnotatedActions()\n    //\n    // I think this bit of code could be simplified further by not modifying the original tmpFormattedActions, and simply iterating\n    // over it and creating a new data structure, which if the current record has a different label, pushes a header prior to pushing\n    // the current record into the new array\n    // put the object phases together into one object to represent the annotated log\n    tempFormattedActions = organizeLogDisplay(phaseNames, phases);\n\n    // Now insert critical action headers;\n    let priorCA = \"N/A\";\n\n    let finalActions = [];\n\n    tempFormattedActions.forEach((tempObject, j) => {\n\n        if (tempObject.type === \"intervention\" && tempObject.probLabel && !(priorCA === tempObject.probLabel)) {\n            //console.log(\"prior & current\", priorCA, tempObject.probLabel)\n            priorCA = tempObject.probLabel;\n            let tempHeaderObject = {\n                \"id\": \"interventionHeader\",\n                \"type\": \"header\",\n                \"numericalID\": 1,\n                \"status\": \"green\",\n                \"why\": \"\",\n                \"probLabel\": tempObject.probLabel,\n                \"protocol\": \"\"\n            };\n            finalActions.push(tempHeaderObject);\n        }\n        finalActions.push(tempObject);\n    });\n\n    // now we analyze all that we've found in the log to see whether\n    // all the actions were done for each problem and reset\n    // the status if not all are there but should be counted\n    // as minimal for the feedback.\n    let pActions = []; //here we will store the actual problem actions\n    let pNames = []; //here we will store the problem names for the above with same order\n    let pIndex = 0;\n    let pActIndex = -1;\n\n    finalActions.forEach((action, j) => {\n        if (action.status.includes(\"standard\", \"standard-incorrect-answers\")) { //only interventions have status of standard\n            if (!pNames.includes(action.probLabel)) {\n                pActIndex = pIndex;\n                pNames[pActIndex] = action.probLabel;\n                pIndex++;\n            }\n            else { pActIndex = pNames.indexOf(action.probLabel); }\n            let actions = pActions[pActIndex];\n            if (!actions) { actions = []; }\n            actions.push(action);\n            pActions[pActIndex] = actions;\n        }\n    });\n    //console.log(finalActions)\n    // If all the minimal were found but not all the action were, then we\n    // need to remark the action objects created for the minimal events\n    // to be minimal instead of standard.  It isn't\n    // appropriate to give this feedback if all actions are present.\n    // Waited until now so that all the events are in one list instead of \n    // a list per phase,\n    let processedIds = tempFormattedActions.map(event => event.id);\n    let pIds = problems.map(a => a.probLabel);\n    // console.log(\"caIds: \", caIds);\n    pNames.forEach((pEntry, j) => {\n        //get the action definition for this problem \n        let pIndex = pIds.indexOf(pEntry);\n        let prob = problems[pIndex];\n        let actionNeeded = prob.actions.filter(obj => !obj.optional).map(obj => obj.id);\n        let minimalNeeded = prob.actions.filter(obj => obj.minimal).map(obj => obj.id);\n        if (minimalNeeded) { //no point in doing anything else if no minimals were defined\n            let foundActions = pActions[j];\n            let found = foundActions.map(a => a.id);\n            //console.log(\"sn: \", actionNeeded, \"mn: \", minimalNeeded, \"found: \", found);\n            let allActionFound = true;\n            let allMinimalFound = true;\n            for (let item of actionNeeded) {\n                if (!found.includes(item)) {\n                    allActionFound = false;\n                    break;\n                }\n            }\n            for (let item of minimalNeeded) {\n                if (!found.includes(item)) {\n                    allMinimalFound = false;\n                    break;\n                }\n            }\n            //console.log(\"all action? \", allActionFound, \"all minimal? \", allMinimalFound)   \n            let numericalIDsChanged = [];\n            if (!allActionFound && allMinimalFound) {\n                minimalNeeded.forEach((foundId, j) => {\n                    let pIndex = processedIds.indexOf(foundId);\n                    let object = tempFormattedActions[pIndex];\n\n                    //console.log(\"object to modify\", object);\n                    object.minimalWhy = prob.minimalWhy;\n                    object.status = \"minimal\";\n                    numericalIDsChanged.push(object.numericalID);\n                    tempFormattedActions[pIndex] = object;\n                });\n                //redo color for header if needed\n                let header = {};\n                numericalIDsChanged.forEach((numericalID, z) => {\n                    header = findHeaderFor(numericalID, tempFormattedActions);\n                    if (header && header.status === \"green\") { header.status = \"yellow\"; }\n                });\n\n            }\n        }\n\n    });\n\n    \n\n    console.log(\"Final Analysis:\", finalActions);\n \n    \n    saveDebriefingLog(log, finalActions);\n    \n    //else {checkOnOverwriting(log, finalActions)}\n    \n\n    return (finalActions);\n\n}\n    \n\n\n\n\n// const Debriefing = ({ log, metaData, criticalActions, associations }) => {\nfunction AnalyzeDebriefing ()  {\n    const { logID } = useParams()\n    const [observerLog, setObserverLog] = useState (undefined)\n    const [log, setLog] = useState(undefined)\n    const [scenario, setScenario] = useState(undefined)\n    const [analyzed, setAnalyzed] = useState(false)\n    const [loaded, setLoaded] = useState(false)\n\n    // eslint-disable-next-line\n    \n    // Set to true once all performed actions have been displayed in the log\n    // const [finishedPerformedActions, setFinishedPerformedActions] = useState(false);\n\n    //console.log (\"logID:\", logID)\n\n    function checkOnOverwriting() {\n        if (window.confirm (\"Are you sure you want to overwrite the existing analysis?  Any prior comments previously added will be lost.\")){\n            analyzeEvents(scenario, observerLog) \n            \n        }\n\n    }\n\n    \n    async function processEvents ()  {\n        //console.log(\"in processEvents to process a new observer file\")\n        if (! await verifyDocument(\"debriefing-feedback-logs\", logID))\n            {analyzeEvents(scenario, observerLog)\n            setAnalyzed(true)} \n        else {checkOnOverwriting()} \n        setAnalyzed(true)\n        return (true)    \n    }\n\n    useEffect(\n        () => {\n          getLog(logID)\n            .then(observerLogData => {  \n              //console.log(\"retrieve observerLogData\", observerLogData) \n              setObserverLog(observerLogData)    \n            })\n            .catch(error => alert('error fetching observer log', error))   \n        // eslint-disable-next-line\n    }, []\n      )\n    \n      useEffect(\n        () => {\n          !!observerLog && getPublishedScenarioByID(db, observerLog.scenarioID, \"V2\")\n            .then(scenData => {\n              console.log(\"retrieve scenario:\", scenData)\n              setScenario(scenData)\n            })\n    \n        }, [observerLog]\n      )\n    \n      useEffect(\n        () => {\n          !!scenario && processEvents()\n          //console.log(\"check on existing analysis\")\n        // eslint-disable-next-line\n        }, [scenario]\n      )\n    \n      useEffect(\n        () => {\n          !!analyzed && getDebriefLog(logID)\n            .then(logData => {\n              //console.log(\"retrieve Debriefing result:\", logData)\n              setLog(logData)  \n            })\n            .catch(error => alert('error fetching debriefing log', error))\n        // eslint-disable-next-line\n        }, [analyzed]\n      )\n    \n      useEffect(\n        () => {\n          !!log && setLoaded(true) \n        }, [log]\n      )\n    \n      if (!loaded) {\n        return (<h3>Loading</h3>)\n      }\n    \n\n\n    return (\n        <DisplayBaseDebriefing\n        log={log}\n        actions={log.events}\n        scenario={scenario}\n        context={\"initial-analysis\"}\n        />\n    )\n}\n\n\nexport default AnalyzeDebriefing\nexport {analyzeEvents}","import { useEffect, useState } from 'react'\n\nimport { useParams } from 'react-router-dom'\n\nimport { db } from \"@meddbriefer/mdb-firebase\"\n\nimport { getLog } from '../scripts/connect-firebase'\n\nimport {\n  //getScenarioByName\n  getPublishedScenarioByID \n} \n  from '@meddbriefer/scenario-data'\n\nimport AnalyzeDebriefing from '../components/AnalyzeDebriefing'\n\nconst Log = () => {\n\n  const { logID } = useParams()\n  const [ log, setLog ] = useState(null)\n  const [ scenario, setScenario] = useState(null)\n  const [loaded, setLoaded] = useState(false)\n\n  useEffect(\n    () => {\n      getLog(logID)\n        .then(logData => {\n          setLog(logData)\n        })\n    }, [logID]\n  )\n\n  useEffect(\n    () => {\n      //!!log && getScenarioByName(db, log.scenarioName, \"V2\")\n      !!log && getPublishedScenarioByID(db, log.scenarioID)\n        .then(scenData => {\n          setScenario(scenData)\n          console.log(\"scenario\", scenData)\n        })\n\n    }, [log]\n  )\n\n  useEffect(\n    () => {\n      !!scenario && setLoaded(true)\n    }, [scenario]\n  )\n\n  if (!loaded) {\n    return (<h3>Loading</h3>)\n  }\n  return ( \n      <AnalyzeDebriefing \n        log={logID} \n      /> \n    )\n\n\n}\n\nexport default Log;\n","import { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { db } from \"@meddbriefer/mdb-firebase\"\nimport { analyzeEvents } from '../components/AnalyzeDebriefing'\n\nimport { getDebriefLog, getLog, verifyDocument} from '../scripts/connect-firebase'\n\n\nimport { getPublishedScenarioByID } from '@meddbriefer/scenario-data'\n\nimport DisplayBaseDebriefing from '../components/displayBaseDebriefing'\n\n\n\nfunction DisplayDebriefing () {\n\n  const { logID } = useParams()\n  const [observerLog, setObserverLog] = useState(undefined)\n  const [log, setLog] = useState(undefined)\n  const [scenario, setScenario] = useState(undefined)\n  const [analyzed, setAnalyzed] = useState(false)\n  const [loaded, setLoaded] = useState(false)\n\n  \n  \n  async function processLog () {\n    //console.log(\"in processLog to display existing analysis\")\n    if (! await verifyDocument(\"debriefing-feedback-logs\", logID))\n          {analyzeEvents(scenario, observerLog) \n          }\n    setAnalyzed(true)\n    return (true)\n  }\n  \n\n  //get observer log first\n\n  useEffect(\n    () => {\n      getLog(logID)\n        .then(observerLogData => {  \n          //console.log(\"retrieve observerLogData\", observerLogData) \n          setObserverLog(observerLogData)    \n        })\n        .catch(error => alert('error fetching observer log', error))   \n    }, [logID]\n  )\n\n  useEffect(\n    () => {\n      !!observerLog && getPublishedScenarioByID(db, observerLog.scenarioID, \"V2\")\n        .then(scenData => {\n          console.log(\"scenario:\", scenData)\n          setScenario(scenData)\n        })\n\n    }, [observerLog]\n  )\n\n  useEffect(\n    () => {\n      !!scenario && processLog()\n      //console.log(\"check on existing analysis\")\n        // eslint-disable-next-line\n        }, [scenario]\n      )\n      \n  useEffect(\n      () => {\n        !!analyzed && getDebriefLog(logID)\n          .then(logData => {\n            //console.log(\"retrieve Debriefing result:\", logData)\n            setLog(logData)  \n          })\n          .catch(error => alert('error fetching debriefing log', error))\n        // eslint-disable-next-line\n        }, [analyzed]\n      )\n\n  useEffect(\n    () => {\n      !!log && setLoaded(true) \n    }, [log]\n  )\n\n  if (!loaded) {\n    return (<h3>Loading</h3>)\n  }\n\n\n  return (\n    <DisplayBaseDebriefing\n      log={log}\n      actions={log.events}\n      scenario={scenario}\n      context={\"review\"} />\n  )\n\n\n}\n\nexport default DisplayDebriefing;\n","import React from \"react\"\n\nimport MDBNavBar from \"./MDBNavBar\"\n\nconst UnauthedLayout = (props) => {\n\n    return (\n        <>\n            <MDBNavBar\n                title=\"MedDBriefer Authentication\"\n            />\n            { props.children }\n        </>\n    )\n}\n\nexport default UnauthedLayout","import React from \"react\"\n\nimport {\n    HashRouter as Router,\n    Switch,\n} from \"react-router-dom\"\n\nimport { AuthProvider, PrivateRoute } from \"@meddbriefer/mdb-auth\"\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport \"./styles.css\";\n\nimport LogList from \"./routes/LogList\"\nimport Log from \"./routes/Log\"\nimport DisplayDebriefing from \"./routes/DisplayDebriefing\"\n\n\nimport UnauthedLayout from \"./components/UnauthedLayout\"\n\nconst App = (props) => {\n\n    return (\n        <AuthProvider>\n            <Router>\n\n                <Switch>\n                    <PrivateRoute\n                        exact path=\"/logs/:logID\"\n                        authFlowLayout={UnauthedLayout}\n                        component={Log}\n                    />\n                    <PrivateRoute\n                        exact path=\"/debriefing-feedback-logs/:logID\"\n                        authFlowLayout={UnauthedLayout}\n                        component={DisplayDebriefing}\n                    />\n                    {/*default (catchall) route*/}\n                    <PrivateRoute\n                        exact match=\"/\"\n                        authFlowLayout={UnauthedLayout}\n                        component={LogList}\n                    />\n                </Switch>\n            </Router>\n        </AuthProvider>\n    )\n}\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}