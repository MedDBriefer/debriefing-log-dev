{"version":3,"sources":["../../../libs/mdb-firebase/index.js","../../../libs/scenario-data/constants.js","../../../libs/scenario-data/index.js","../../../libs/scenario-data/intvPrompts.js","../../../libs/scenario-data/intvMenuItems.js","routes/LogList.js","../../../libs/feedback-data/c1Data.js","../../../libs/feedback-data/c2Data.js","../../../libs/feedback-data/analysisData.js","components/summarizeAnalysis.js","../../../libs/feedback-data/Bogus data for testingA.js","../../../libs/feedback-data/SC8CP_data_PhaseIE.js","components/debriefingUtils.js","components/analyzeEvents.js","utils.js","components/scenarioDataAccesors.js","components/MDBNavBar.js","components/DisplayBaseDebriefing.js","components/AnalyzeDebriefing.js","routes/Log.js","routes/DisplayDebriefing.js","components/UnauthedLayout.js","App.js","reportWebVitals.js","index.js"],"names":["userApp","getOrInitializeApp","appCfg","name","app","appID","matches","firebase","apps","filter","options","appId","length","getApp","initializeApp","process","REACT_APP_APP_ENV","console","log","apiKey","authDomain","projectId","storageBucket","messagingSenderId","measurementId","prodApp","db","auth","firestore","ASSESS","ASSESS_OPTION","AWO","DECISION","DECISION_OPTION","INTERV","PHASE","REQUIRED","SUB_PHASE","MDB_TYPES","Object","freeze","ASSESSO","CL_HEADING","CL_PROMPT","DIST_PROMPT","NESTED_CHECKLIST","REQURED","PROMPT_SET","PROMPT","ANSWER","SELECTION_TYPES","ONE","OOM","NONE","CHECKLIST_STEP_TYPES","AW","BR","BL","SH","OPTION_TYPES","ANALYSIS_TYPES","MIN","OPT","REQ","CONTRA","UNN","IR","getPublishedScenarioByID","ST","interventionID","scenarioID","collection","doc","get","then","data","verifyDocument","collectionId","documentId","a","where","set","empty","getLog","logID","id","getDebriefLog","LogList","useState","logs","setLogs","logsLoaded","setLogsLoaded","useEffect","querySnapshot","docs","map","label","scenario","scenarioName","userName","timestamp","result","catch","error","Table","striped","borderless","size","hover","to","colorTypes","iconTypes","assessmentEntries","phaseStatusList","absent","errors","good","leafStatusList","misordered","misorderedErrors","exceptionDefs","exceptions","globalConstraints","before","beforeOp","after","afterOp","type","conditionalConstraints","scenarioConstraintIDs","intvChecks","intvStatusNeeded","vitalsNeeded","allAssessResults","allProblemResults","getEntriesUnderHeader","headerID","events","level","populate","header","mergeHeaderStatuses","results","itemIDs","filtered","eventItems","e","inPhase","phaseID","subtype","item","includes","push","concat","overallStatus","headerStatuses","headerItems","pushNew","status","translateEvent","event","newEvent","labelID","expertPhase","forEach","fld","topHier","level2Hier","summarizeAnalysis","finalActions","problems","requiredPhaseAndSubPhases","requiredPhaseNames","constraintsViolated","hierAssessResults","hierProblemResults","prob","entries","probLabel","statuses","getPhaseStatus","headerObject","entryToModify","origAction","section","subLevel","topLevel","actions","constraint","arg1","workingPhase","phaseOrderStatus","arg2","summary","newStatus","entry","slice","updateTopHeaders","topLevelSummary","assess","probs","val","c2Input","top","table","key","summarize_topLevel","c2FB","C2_FIELDS","scenarios","Action","feedbackAbsent","feedbackOutOfOrder","feedbackError","subActions","feedbackErrors","examine","prompts","storeLeafActions","action","newAction","fldName","elt","array","itemStatuses","phaseStatuses","value","getStatesForStatus","stateList","state","getAssessmentEntry","currentEntry","aIndex","assessmentEntry","displayColor","getColor","fixStrSp","textString","newString","textArray","split","lenTextArray","i","newItem","trim","getFBField","field","fb","requiredSubphases","version","itemByID","itemByLabel","checklistHierarchy","getFeedback","intvStatus","intvStatusFB","checked","notChecked","foundCk","generateIntvStatusFB","feedbackString","feedbackArray","firstChar","charAt","substring","previousString","nextString","toUpperCase","scenarioConstraints","getEvents","getEventsByIdTime","_","require","saveAnalysisLog","topSummary","docRef","ObserverFileCreater","ObserverFileName","commenter","schemaVersion","Date","toLocaleString","newActionsList","newObj","filterUnknown","logObj","index","undefined","pickBy","getTimestamp","seconds","toISOString","substr","groupByKey","listOfObjs","reduce","hash","obj","getChecklistItemsByType","itemType","checkListMetaData","problemStates","cautionStates","subPhases","answerIDs","promptIDs","initGlobals","scen","constraintIDs","initializeConstraints","subaction","get2HierLevelIDs","interventionPromptAnswers","answer","getAnswerIDs","interventionPrompts","prompt","getPromptIDs","initializeItemLookupByID","initializeItemLookupByLabel","phases","clSteps","stepOptions","step","phChecklistSteps","subPhase","spChecklistSteps","sp","items","phSubphases","ph","getChecklistHierarchy","findPhaseSubphasesOrdered","intvLookupByID","checklistLookupByID","interventions","intvMetaData","assign","intvLookupByLabel","checklistLookupByLabel","subPhIds","updateVital","vitalEntries","updatedEntries","vitalEntry","annotateInputEvents_pre_5_1_22","confirmedEvents","interventionsConfirmed","phaseNames","phaseObjects","trackForStatus","priorPhase","parentPhase","parentIndex","phaseIndex","newPhaseStart","assessmentTypes","eventObj","actionDescription","phase","eventType","processingState","prioreventObj","correctAnswerLabel","getCorrectAnswerLabel","promptID","givenAnswerLabel","getAnswerLabel","wrongAnswer","evalForIncorrectAnswer","answerDetails","intervention","pop","answerCorrect","incorrectAnswersFB","vital","vitalType","j","PROBLEM_ACTION_FIELDS","allActions","k","statusChecking","intv","initialEntry","assessments","assessmentsNeeded","when","suggestedPhase","protocols","protocol","allContras","contra","protocolRelationship","incorrectAnswerFB","annotateInputEvents_post_5_1_22","getItem","answers","processAnswer","findNameNumID","names","occurrence","numericalID","numericalIDStart","numericalIDEnd","unknownItem","findObjByNumerialID","phaseName","hasSubPhases","storeMisOrderedArgs","objToModify","saveFailedConstraint","lateArg","otherArg","constraintID","op","addToListOfFeedback","parPhFB","last","repeating","toLowerCase","checkAgainst2ndArgs","arg1st","args2nd","direction","entryNames","constraintType","endNum1st","startNum1st","label1st","phFB","par1PhFB","par2PhFB","counter","violations","arg","arg2nd","label2nd","startNum2nd","endNum2nd","FB","orderingFB","appendString","storeMisOrderedFB","checkAgainstKB","listOfNames","listOfEntries","uniqueListOfNames","startIndex","endIndex","phaseObjectNames","collectEntriesToCheckConstraints","uniqueEntryNames","firstArg","firstArgItem","constraints","getConstraint","checkConstraintsForArg","insertInPhaseInOrder","object","objIndex","lastIndexOf","splice","getEndSubPhaseIndex","inPhaseId","subPhaseName","getSubPhases","reversedSubPhases","reverse","find","getEndSubPhase","phaseId","determineHLcolor","lowerColor","higherColor","newColor","answerID","isIntervention","associations","checkListCorrectness","Array","isArray","ansId","metaData","answerLabels","answerLabel","insertMissingInterventions","indexCounter","sol","bestFittingSol","bestIndex","finalIndex","bestVal","bestLen","solutions","solVal","found","notFound","f","solLen","solLenFound","findBestSolMatch","phaseObject","phaseVal","string","orderedArrayObjects","objectsBefore","objectBefore","requiredObjectBefore","required","objectAfter","requiredObjectAfter","indexBefore","indexAfter","indexRequiredBefore","indexRequiredAfter","insertionIndex","findIndex","insertInPhaseRelativeToSuggestedOrder","analyzeEvents","problemDefs","problemActions","defs","sols","problemDef","problem","solutionIDs","probSols","problemID","lifeThreat","vitals","assessmentID","solID","solution","otherActions","actEntries","actIDs","act","solutionID","minimalWhy","contraindications","minimal","optional","allProblemProtocols","setupProblems","formattedActions","annotatedResults","annotateInputEvents","intvsTracking","kbUpdates","updatedPhases","priorPh","insertMissingSubphases","postAssessmentReview","neededScenAssessments","collectScenAssessments","checklistSteps","md","exceptionDef","exception","why","cls","assessmentFB","assessmentFindings","checkForMissingAssessments","postInterventionReview","statusTracking","toUpdate","insertMissingIntvChecks","displayObjects","entryIndex","headerIndex","problemHeaderColor","subPhaseColor","subPhaseStatuses","newPhaseObjects","headerObj","subHeaderObj","priorHLPhaseItem","endEntry","iPhaseObjects","subheader","localPhaseName","localPhaseItem","highLevelPhase","highLevelPhaseItem","organizeLogDisplay","pActions","pNames","pIndex","pActIndex","indexOf","processedIds","pIds","pEntry","actionNeeded","minimalNeeded","allActionFound","allMinimalFound","numericalIDsChanged","foundId","z","candidateHeader","foundHeader","findHeaderFor","summaryResults","MDBNavBar","title","leftNav","rightNav","useContext","AuthContext","isAuthenticated","signOutUser","Navbar","color","dark","NavbarBrand","href","Nav","NavbarText","tag","Button","onClick","DisplayBaseDebriefing","context","showCommentColumn","setShowCommentColumn","setFormattedActions","getLabel","vitalLabel","regularLabel","getStatusLabel","metaEntry","me","findingsData","phaseLabel","finding","saveComment","orig","target","defaultValue","comment","entryID","newEntry","updateFormattedAction","dispDataRow","className","rows","cols","onBlur","record","rec","displayIt","style","overflowY","maxHeight","colSpan","AnalyzeDebriefing","useParams","observerLog","setObserverLog","setLog","setScenario","analyzed","setAnalyzed","loaded","setLoaded","checkOnOverwriting","window","confirm","analyzeEventsHook","observerLogData","alert","scenData","processEvents","logData","Log","DisplayDebriefing","processLog","UnauthedLayout","props","children","App","exact","path","authFlowLayout","component","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.62db15e7.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport \"firebase/auth\";\nimport \"firebase/firestore\"\n\nconst prodFirebaseCfg = {\n    apiKey: \"AIzaSyBOgWAbXUGckpad2sk0IUo00hZsV4WxG0E\",\n    authDomain: \"meddbriefer-68cd4.firebaseapp.com\",\n    projectId: \"meddbriefer-68cd4\",\n    storageBucket: \"meddbriefer-68cd4.appspot.com\",\n    messagingSenderId: \"1087114796018\",\n    appId: \"1:1087114796018:web:679fbab38dbf78af0ce96b\",\n    measurementId: \"G-Q7QZKC9KHW\"\n}\n\nconst devFirebaseCfg = {\n    apiKey: \"AIzaSyBqnEMwEstp4D7Mvtbw9OTAiNJ7qza0Ses\",\n    authDomain: \"meddbriefer-dev.firebaseapp.com\",\n    projectId: \"meddbriefer-dev\",\n    storageBucket: \"meddbriefer-dev.appspot.com\",\n    messagingSenderId: \"144940722070\",\n    appId: \"1:144940722070:web:4de179ebb58d84a7679fb7\"\n};\n\n\nconst pamFirebaseCfg = {\n    apiKey: \"AIzaSyB9eVT-fu4TOjxHoPAXqsnz9tCcbTJkTOw\",\n    authDomain: \"pamdev-ea800.firebaseapp.com\",\n    projectId: \"pamdev-ea800\",\n    storageBucket: \"pamdev-ea800.appspot.com\",\n    messagingSenderId: \"366450927885\",\n    appId: \"1:366450927885:web:caa5f022ef1de182a0e844\",\n    measurementId: \"G-JC5XZEPYT1\"\n  };\n\n  const scottFirebaseConfig = {\n  apiKey: \"AIzaSyBEhbIdVW2F2vvvfvpNb2SsCDP9Yoc__z8\",\n  authDomain: \"scottdev-f6528.firebaseapp.com\",\n  projectId: \"scottdev-f6528\",\n  storageBucket: \"scottdev-f6528.appspot.com\",\n  messagingSenderId: \"447730403122\",\n  appId: \"1:447730403122:web:1727020dbac4ad4cf6f92b\"\n\n};\n\n// console.log(`NODE_ENV: ${process.env.NODE_ENV}`)\n\nlet userApp\n\nconst getApp = (appID) => {\n    const matches = firebase.apps.filter(app => app.options.appId === appID)\n    // console.log(\"matches\", matches)\n    return (matches.length === 1) ? matches[0] : null\n}\n\nconst getOrInitializeApp = (appCfg, name) => {\n    const app = getApp(appCfg.appId)\n    // console.log(`${appCfg.appId} already exists: ${!!app}`)\n    return (!!app) ? app : firebase.initializeApp(appCfg, name)\n}\n\n// don't reinitialize app if it already exists\n// const prodApp = !firebase.apps.length ? firebase.initializeApp(prodFirebaseCfg) : firebase.app()\n//const prodApp = getOrInitializeApp(prodFirebaseCfg, \"production\")\nif (\"pam\" === process.env.REACT_APP_APP_ENV) {\n    console.log(\"using pjordan config\")\n    userApp = getOrInitializeApp(pamFirebaseCfg, \"pam\")\n} else if (\"scott\" === process.env.REACT_APP_APP_ENV) {\n    console.log(\"using scott config\")\n    userApp = getOrInitializeApp(scottFirebaseConfig)\n}\nelse {\n    console.log(\"using production config\")\n    userApp = getOrInitializeApp(prodFirebaseCfg, \"production\")\n}\n\nconst prodApp = userApp;\n// const devApp = function() {\n//     if (process.env.NODE_ENV !== \"production\") {\n//         return getOrInitializeApp(devFirebaseCfg, \"development\")\n//      }\n//      return null\n// }()\n\n// console.log(firebase.apps)\n\n\n\n\nexport const auth = prodApp.auth()\nexport const db = prodApp.firestore()\n\n// export const db = function() {\n//     return process.env.NODE_ENV !== \"production\" ? devApp.firestore() : prodApp.firestore()\n// }()\n","// the following constants are deprecated (need to figure out how to handle this)\n// use MDB_TYPES, SELECTION_TYPES, PREFIXES, and SYSTEMS instead\nexport const ANSWER = \"answer\"\nexport const ASSESS = \"assessment\"\nexport const ASSESSO = \"assessment-option\"\nexport const ASSESS_OPTION = \"assessment-option\"\nexport const AWO = \"assessment-with-options\"\nexport const CB = \"checkbox\"\nexport const CL_HEADING = \"checklist-heading\"\nexport const CL_PROMPT = \"checklist-prompt\"\nexport const CRIT_FAIL = \"critical-criteria\"\nexport const DECISION = \"decision\"\nexport const DECISION_OPTION = \"decision-option\"\nexport const DIST_PROMPT = \"distinguishing-prompt\"\nexport const HEADING = \"heading\" //not a leaf node, simply a step which has child steps\nexport const INTERV = \"intervention\" // an action performed on the patient\nexport const INTV_FORM = \"intervention-form\"\nexport const NESTED_CHECKLIST = \"nested-checklist\"\nexport const NONE = \"none\"\nexport const ONE = \"one\"\nexport const OOM = \"one-or-more\"\nexport const OPTION = \"option\"\nexport const PHASE = \"phase\"\nexport const PROMPT = \"prompt\"\nexport const PROMPT_SET = \"prompt-set\"\nexport const REQUIRED = \"required-action\"   // an action the EMT performs, but not on the patient\n// keeping as I had a typo. need to deprecate somehow\nexport const REQURED = REQUIRED\nexport const SUB_PHASE = \"sub-phase\"\n\nexport const MDB_TYPES = Object.freeze({\n    PHASE: PHASE,\n    SUB_PHASE: SUB_PHASE,\n    ASSESS: ASSESS,\n    AWO: AWO,\n    ASSESS_OPTION: ASSESS_OPTION,\n    ASSESSO: ASSESS_OPTION,\n    CL_HEADING: CL_HEADING,\n    CL_PROMPT: CL_PROMPT,\n    DECISION: DECISION,\n    DECISION_OPTION: DECISION_OPTION,\n    DIST_PROMPT: DIST_PROMPT,\n    NESTED_CHECKLIST: NESTED_CHECKLIST,\n    REQUIRED: REQUIRED,\n    REQURED: REQUIRED,\n    INTERV: INTERV,\n    PROMPT_SET: PROMPT_SET,\n    PROMPT: PROMPT,\n    ANSWER: ANSWER,\n})\nexport const SELECTION_TYPES = Object.freeze({\n    ONE: ONE,\n    OOM: OOM,\n    NONE: NONE\n})\nexport const SELECTION_TYPE_LABELS = Object.freeze({\n    ONE: \"One\",\n    OOM: \"One or more\",\n    NONE: \"None\"\n})\nexport const PREFIXES = Object.freeze({\n    PHASE: \"\",\n    SUB_PHASE: \"\",\n    ANSWER: \"answer-\",\n    ASSESS: \"assess-\",\n    AWO: \"assessment-with-options-\",\n    ASSESS_OPTION: \"assess-option-\",\n    CL_PROMPT: \"cl-prompt-\",\n    DECISION: \"decision-\",\n    DECISION_OPTION: \"decision-option-\",\n    INTERV: \"intv-\",\n    PROMPT_SET: \"prompt-set-\",\n    PROMPT: \"prompt-\",\n    REQUIRED: \"required-action-\",\n})\n\nexport const SYSTEMS = Object.freeze({\n    AW: \"airway\",\n    BR: \"breathing\",\n    BL: \"bleeding\",\n    SH: \"shock\",\n})\nexport const SYSTEM_LABELS = Object.freeze({\n    AW: \"Airway\",\n    BR: \"Breathing\",\n    BL: \"Bleeding\",\n    SH: \"Shock\"\n})\n\nexport const CHECKLIST_STEP_TYPES = [ASSESS, AWO, DECISION, REQUIRED]\nexport const OPTION_TYPES = [ASSESS_OPTION, DECISION_OPTION]\nexport const ANALYSIS_TYPES = [ASSESS, AWO, DECISION, REQUIRED, INTERV, PHASE, SUB_PHASE]\n\nexport const PROTOCOL_RELATIONSHIPS = Object.freeze({\n    NONE: \"\",\n    MIN: \"minimal\",\n    OPT: \"optional\",\n    REQ: \"required\",\n    CONTRA: \"contraindicated\",\n    UNN: \"unnecessary\",\n    IR: \"irrelevant\"\n})","\nimport _ from \"lodash\"\n\nimport { MDB_TYPES } from \"./constants.js\"\nimport { ScenarioType, PublishedScenario } from \"./types.js\"\n\n// the rest of these imports can go away soon. simply allows me to delete objects form the db\n// and reload with files. not used if records exist in db\nimport INTVS from \"./intvs.js\"\nimport INTV_PROMPTS from \"./intvPrompts.js\"\nimport INTV_PROMPT_ANSWERS from \"./intvPromptAnswers.js\"\nimport INTV_MENU_CATS from \"./intvMenusCats.js\"\nimport INTV_MENU_ITEMS from \"./intvMenuItems.js\"\n\nexport const loadIntvs = () => {\n    const tmp = INTVS.map(e => {\n        const rec = {...e}\n        if (!e.abbrLabel) {\n            rec.abbrLabel = e.label\n        }\n        if (!e.distPrompts) {\n            rec.distPrompts = []\n        }\n        if (!e.prompts) {\n            rec.prompts = []\n        }\n        return rec\n    })\n    return tmp\n}\n\nexport const loadIntvPrompts = () => {\n    const tmp = INTV_PROMPTS.map(e => {\n        const rec = {...e}\n        if (!!e.interventionID) {\n            const found = INTVS.find(i => i.id === e.interventionID)\n            if (!found) {\n                console.log(`loadIntvPrompts(${e.id}) ${e.interventionID} not found`)\n            }\n        }\n        if (!e.abbrLabel) {\n            rec.abbrLabel = \"\"\n        }\n        if (!e.feedback) {\n            rec.feedback = rec.label\n        }\n        if (!e.answers) {\n            rec.answers = []\n        }\n        return rec\n    })\n    return tmp\n}\n\nexport const loadIntvPromptAnswers = () => {\n    const tmp = INTV_PROMPT_ANSWERS.map(e => {\n        if (!e.abbrLabel) {\n            e.abbrLabel = \"\"\n        }\n        const found = INTV_PROMPTS.find(p => p.id === e.promptID)\n        if (!found) {\n            console.log(`loadIntvPromptAnswers(${e.id}) ${e.promptID} not found`)\n        }\n        return e\n    })\n    return tmp\n}\n\nexport const getScenarios = (db, scenarioType, schemaVersion) => {\n    const query = db.collection(\"scenarios\")\n             .where(\"scenarioType\", \"==\", scenarioType)\n             .where(\"schemaVersion\", \"==\", schemaVersion)\n    return query.get()\n        .then(snapShot => {\n            const scenarios = []\n            if (snapShot.size > 0) {\n                snapShot.docs.forEach(doc => {\n                    const data = doc.data()\n                    scenarios.push({\n                        id: data.id,\n                        name: data.name,\n                        scenarioType: data.scenarioType,\n                        schemaVersion: data.schemaVersion\n                    })\n                })\n            }\n            return scenarios\n        })\n}\n\nexport const getPublishedScenarioObjectByID = async (db, scenarioID) => {\n    const data = await getPublishedScenarioByID(db, scenarioID)\n    return new  PublishedScenario(data)\n}\n\nexport const getPublishedScenarioByID = (db, scenarioID) => {\n    return db.collection(\"published-scenarios\").doc(scenarioID).get().then(doc => doc.data())\n}\n\nexport const getScenarioByID = (db, scenarioID) => {\n    return db.collection(\"scenarios\").doc(scenarioID).get().then(doc => doc.data())\n}\n\nexport const getScenarioByName = (db, scenarioName, schemaVersion) => {\n    return db.collection(\"scenarios\")\n    .where(\"name\", \"==\", scenarioName)\n    .where(\"schemaVersion\", \"==\", schemaVersion)\n    .limit(1)\n    .get()\n    .then(snapShot => {\n        if (snapShot.size === 1) {\n            return snapShot.docs[0].data()\n        } else {\n            throw new Error(\"document not found\")\n        }\n    })\n}\n\nconst addMissingScenarioTypeFields = (scenTypeData) => {\n    const msgs = []\n    if (!scenTypeData.interventions) {\n        msgs.push(\"loading intvs from file\")\n        scenTypeData.interventions = loadIntvs()\n    }\n    if (!scenTypeData.interventionPrompts) {\n        const errs = []\n        const tmpPrompts = loadIntvPrompts()\n        tmpPrompts.forEach(e => {\n            if (e.type === MDB_TYPES.PROMPT) {\n                // ignore this check if distinguishing prompt (not associated with a single intv)\n                if (undefined === scenTypeData.interventions.find(rec => rec.id === e.interventionID)) {\n                    errs.push(`bad interventionID ${e.interventionID}`)\n                }\n            }\n        })\n        let msg = \"loading intv prompts from file...\"\n        if (errs.length > 0) {\n            msgs.push(msg)\n            errs.forEach(e => msgs.push(e))\n        } else {\n            msg += \"no errors found\"\n            msgs.push(msg)\n        }\n        scenTypeData.interventionPrompts = tmpPrompts\n    }\n    if (!scenTypeData.interventionPromptAnswers) {\n        const errs = []\n        const tmpPromptAnswers = loadIntvPromptAnswers()\n        tmpPromptAnswers.forEach(e => {\n            if (undefined === scenTypeData.interventionPrompts.find(rec => rec.id === e.promptID)) {\n                errs.push(`bad promptID ${e.promptID}`)\n            }\n        })\n        let msg = \"loading intv prompt answers from file...\"\n        if (errs.length > 0) {\n            msgs.push(msg)\n            errs.forEach(e => msgs.push(e))\n        } else {\n            msg += \"no errors found\"\n            msgs.push(msg)\n        }\n        scenTypeData.interventionPromptAnswers = tmpPromptAnswers\n    }\n    if (!scenTypeData.interventionMenuCategories) {\n        msgs.push(\"loading intv menu categories from file\")\n        scenTypeData.interventionMenuCategories = INTV_MENU_CATS\n    }\n    if (!scenTypeData.interventionMenuItems) {\n        const errs = []\n        const tmpIntvMenuItems = INTV_MENU_ITEMS.map(e => {\n            const found = scenTypeData.interventionMenuCategories.find(cat => cat.id === e.intvCategoryID)\n            if (!found) {\n                errs.push(`bad intvCategoryID ${e.intvCategoryID}`)\n            } else {\n                if (e.type === MDB_TYPES.INTERV) {\n                    const intv = scenTypeData.interventions.find(i => i.id === e.interventionID)\n                    if (!intv) {\n                        errs.push(`bad interventionID ${e.interventionID}`)\n                    } else {\n                        e.label = intv.label\n                    }\n                }\n                return e\n            }\n        })\n        let msg = \"loading intv menu items from file...\"\n\n        if (errs.length > 0) {\n            msgs.push(msg)\n            errs.forEach(e => msgs.push(e))\n        } else {\n            msg += \"no errors found\"\n            msgs.push(msg)\n        }\n        scenTypeData.interventionMenuItems = tmpIntvMenuItems\n    }\n    if (msgs.length > 0) {\n        msgs.forEach(m => console.log(m))\n    } else {\n        console.log(\"all data loaded from db. files not needed\")\n    }\n    return scenTypeData\n}\n\nexport const getScenarioTypeObjectByID = async (db, scenarioTypeID) => {\n    const data = await getScenarioTypeByID(db, scenarioTypeID)\n    return new ScenarioType(data)\n}\n\nexport const getScenarioTypeObject = async (db, scenarioType, schemaVersion) => {\n    const data = await getScenarioType(db, scenarioType, schemaVersion)\n    return new ScenarioType(data)\n}\n\nexport const getScenarioTypeByID = (db, scenarioTypeID) => {\n    return db.collection(\"scenario-types\")\n        .doc(scenarioTypeID)\n        .get()\n        .then(doc => {\n        const data = doc.data()\n        data.id = doc.id\n        return addMissingScenarioTypeFields(data)\n        })\n        .catch(error => {\n            console.log(error)\n            return error\n        })\n}\n\nexport const getScenarioType = (db, scenarioType, schemaVersion) => {\n    return db.collection(\"scenario-types\")\n            .where(\"name\", \"==\", scenarioType)\n            .where(\"schemaVersion\", \"==\", schemaVersion)\n            .limit(1)\n            .get()\n            .then(snapShot => {\n                if (snapShot.size === 1) {\n                    return addMissingScenarioTypeFields(snapShot.docs[0].data())\n                } else {\n                    throw new Error(\"document not found\")\n                }\n            })\n}\n\n\n\n// FIXME: this needs to go away, although I need to figure out if it's in use anywhere first\nexport const getPromptAndOptions = (scenarioTypeOrPubScenario, promptID) => {\n    const scenType = scenarioTypeOrPubScenario\n    const prompt = scenType.interventionPrompts.find(e => e.id === promptID)\n    if (!!prompt) {\n        const options = prompt.answers.map(ansID => scenType.interventionPromptAnswers.find(a => a.id === ansID))\n        prompt.options = options.map(opt => {\n            return {...opt, prompt: prompt.label}\n        })\n    }\n    return prompt\n}\n\n// moved over from apps/data-entry/src/scripts/connect-firebase\n// added 'db' as first param so that these functions can be used either from web or server firebase APIs\n/**\n * Verify document doesn't already exist in database.\n * @param {object} db instance\n * @param {string} collectionId\n * @param {string} documentId\n * @returns True if document with given ID doesn't exist yet.\n */\nexport const verifyDocument = async (db, collectionId, documentId) => {\n    const set = await db.collection(collectionId).where(\"id\", \"==\", `${documentId}`).get();\n    return set.empty;\n};\n\n// returns true if combo of name and schemaVersion fields is unique\nexport const verifyDocNameUniqueness = async (db, collectionID, candidateName, dbNameField, schemaVersion) => {\n    const snapshot = await db.collection(collectionID)\n        .where(dbNameField, \"==\", candidateName)\n        .where(\"schemaVersion\", \"==\", schemaVersion)\n        .get()\n    return snapshot.empty\n}\n\n// Upload document object to database\nexport const publishDocument = async (db, collectionId, documentObject, documentId) => {\n    documentId\n        ?\n        await db.collection(collectionId).doc(documentId).set(documentObject) :\n        await db.collection(collectionId).doc().set(documentObject);\n};\n\n// Update document with given id\nexport const updateDocument = async (db, collectionId, documentId, documentObject) => {\n    const set = await db.collection(collectionId).where(\"id\", \"==\", `${documentId}`).get();\n    set.empty ?\n        publishDocument(collectionId, documentObject) :\n        await db.collection(collectionId).doc(set.docs[0].id).set(documentObject);\n};\n\n/**\n * Will save document, using auto-generated IDs if documentObject doesn't have\n * an 'id' attribute.\n * @param {object} db instance\n * @param {string} collectionId\n * @param {object} documentObject\n */\nexport const saveDocument = async (db, collectionId, documentObject) => {\n    const doc = (!documentObject.id) ?\n        db.collection(collectionId).doc() :\n        db.collection(collectionId).doc(documentObject.id);\n    documentObject.id = doc.id;\n    await doc.set(documentObject);\n    return documentObject.id\n}\n\n/**\n * Query collection for document with id\n * @param {object} db instance\n * @param {string} collectionId\n * @param {string} documentId\n * @returns {object} Object containing document data.\n */\nexport const getDocument = async (db, collectionId, documentId) => {\n    const doc = await db.collection(collectionId).doc(documentId).get();\n    return doc.data();\n};\n\n/**\n * Query collection for document with name\n * @param {string} collectionId\n * @param {string} documentName\n * @returns {object} Object containing document data.\n */\nexport const getDocumentWithName = async (db, collectionId, documentName) => {\n    const set = await db.collection(collectionId).where(\"name\", \"==\", `${documentName}`).get();\n    return set.docs[0]?.data();\n};\n\n/**\n * Delete document from collection\n * @param {string} collectionId\n * @param {string} documentId\n */\nexport const deleteDocument = async (db, collectionId, documentId) => {\n    await db.collection(collectionId).doc(documentId).delete();\n};\n\n/**\n * Pull collection from database as array of document objects\n * @param {string} collectionId\n * @returns {object[]} An array containing all of the document in the collection.\n */\nexport const getCollection = async (db, collectionId) => {\n    const collection = await db.collection(collectionId).get();\n    return collection.docs?.map(item => item.data());\n};\n\n// copied over from /apps/debriefer/src/scripts/connect-firebase and 'db' param added as first param\n\n// Get a list of document names and a copy of each document\nexport const listDocumentNames = async (db, collectionId) => {\n    let documentList = db.collectionGroup(collectionId);\n    let documentDictionary = {};\n    documentList.get().then((querySnapshot) => {\n        querySnapshot.forEach((doc) => {\n            documentDictionary[doc.id] = doc.data();\n        });\n    });\n    return documentDictionary;\n}\n\nexport const getLogs = (db) => {\n    return db.collection(\"logs\").get()\n        .then(querySnapshot => {\n            return querySnapshot.docs.map(doc => {\n                const data = doc.data()\n                return {\n                    id: doc.id,\n                    label: data.label,\n                    scenario: data.scenarioName,\n                    userName: data.userName,\n                    timestamp: data.timestamp\n                }\n            })\n        })\n}\n\n\nexport const getLog = (db, logID) => {\n    return db.collection(\"logs\").doc(logID).get()\n        .then((doc) => {\n            const data = doc.data()\n            data.id = doc.id\n            //let scenario = data.scenario;   //temporary until DB scenario name is fixed but won't hurt anything\n            //scenario = scenario.replace(\"PHTC \",\"\");  //temporary until DB scenario name is fixed but won't hurt anything\n            //data.scenario = scenario;\n            return data\n        })\n}\n\nexport const getDebriefLog = (db, logID) => {\n    return db.collection(\"debriefing-feedback-logs\").doc(logID).get()\n        .then((doc) => {\n            const data = doc.data()\n            data.id = doc.id\n            //let scenario = data.scenario;   //temporary until DB scenario name is fixed but won't hurt anything\n            //scenario = scenario.replace(\"PHTC \",\"\");  //temporary until DB scenario name is fixed but won't hurt anything\n            //data.scenario = scenario;\n            return data\n        })\n}\n\nexport const createInterventionVariant = (distPromptIds2OptIds) => {\n    // the list of opt IDs mapped to each distPromptID needs to be sorted in order\n    // to make them comparable\n    const retVal = {}\n    Object.entries(distPromptIds2OptIds).forEach(([distPromptID, optionsArray]) => {\n        retVal[distPromptID] = optionsArray.sort()\n    })\n    return retVal\n}\n\nexport const interventionVariantsAreEqual = (intvVariant1, intvVariant2) => {\n    return _.isEqual(intvVariant1, intvVariant2)\n}\n\n","import { MDB_TYPES, SELECTION_TYPES as ST } from \"@meddbriefer/scenario-data/constants.js\"\n\nconst INTV_PROMPTS = [\n    {\n        \"id\": \"prompt-wound-location\",\n        type: MDB_TYPES.DIST_PROMPT,\n        selectionType: ST.ONE,\n        label: \"Where is the wound located?\",\n        abbrLabel: \"Wound location?\",\n        answers: [\n            \"answer-wound-location-head\",\n            \"answer-wound-location-neck\",\n            \"answer-wound-location-chest\",\n            \"answer-wound-location-abdomen-pelvis\",\n            \"answer-wound-location-posterior\",\n            \"answer-wound-location-genitalia\",\n            \"answer-wound-location-left-lower-extremity\",\n            \"answer-wound-location-right-lower-extremity\",\n            \"answer-wound-location-left-upper-extremity\",\n            \"answer-wound-location-right-upper-extremity\",\n            \"answer-wound-location-other\"\n        ]\n    },\n    {\n        \"id\": \"prompt-wound-locations\",\n        type: MDB_TYPES.DIST_PROMPT,\n        selectionType: ST.OOM,\n        label: \"Where are the wound(s) located?\",\n        abbrLabel: \"Wound location(s)?\",\n        answers: [\n            \"answer-wound-locations-head\",\n            \"answer-wound-locations-neck\",\n            \"answer-wound-locations-chest\",\n            \"answer-wound-locations-abdomen-pelvis\",\n            \"answer-wound-locations-posterior\",\n            \"answer-wound-locations-genitalia\",\n            \"answer-wound-locations-left-lower-extremity\",\n            \"answer-wound-locations-right-lower-extremity\",\n            \"answer-wound-locations-left-upper-extremity\",\n            \"answer-wound-locations-right-upper-extremity\",\n            \"answer-wound-locations-other\"\n        ]\n    },\n\n\n    {\n        \"id\": \"prompt-airway-patency-suction-device\",\n        \"interventionID\": \"intv-airway-patency-technique-suction-airway\",\n        \"type\": MDB_TYPES.PROMPT,\n        \"selectionType\": ST.ONE,\n        \"label\": \"What kind of suction catheter will you use?\",\n        \"abbrLabel\": \"Suction catheter type?\",\n        \"answers\": [\n            \"answer-airway-patency-suction-yankauer\",\n            \"answer-airway-patency-suction-long-multiuse\",\n            \"answer-airway-patency-suction-other\"\n        ]\n    },\n\n    {\n        \"id\": \"prompt-advanced-airway-adjunct-type\",\n        \"interventionID\": \"intv-advanced-airway-adjunct\",\n        \"type\": MDB_TYPES.PROMPT,\n        \"selectionType\": ST.ONE,\n        \"label\": \"What type of advanced airway adjunct would you use?\",\n        \"abbrLabel\": \"Which advanced airway?\",\n        \"answers\": [\n            \"answer-alternative-rescue-airway-type-ett\",\n            \"answer-alternative-rescue-airway-type-combitube\",\n            \"answer-alternative-rescue-airway-type-lta\",\n            \"answer-alternative-rescue-airway-type-lma\",\n            \"answer-alternative-rescue-airway-type-igel\",\n            \"answer-alternative-rescue-airway-type-other\"\n        ]\n    }, {\n        \"id\": \"prompt-advanced-airway-tube-size\",\n        \"interventionID\": \"intv-advanced-airway-adjunct\",\n        \"type\": MDB_TYPES.PROMPT,\n        \"selectionType\":\"one\",\n        \"label\": \"What tube size for advanced airway?\",\n        \"abbrLabel\": \"What size?\",\n        \"answers\": [\n            \"answer-alternative-airway-tube-size-7\",\n            \"answer-alternative-airway-tube-size-8\",\n            \"answer-alternative-airway-tube-size-age-div-4-plus-4\",\n            \"answer-alternative-airway-tube-size--age-div-4-plus-4-minus-5\",\n            \"answer-alternative-airway-tube-size-37f\",\n            \"answer-alternative-airway-tube-size-41f\",\n            \"answer-alternative-airway-tube-size-0\",\n            \"answer-alternative-airway-tube-size-1\",\n            \"answer-alternative-airway-tube-size-1-5\",\n            \"answer-alternative-airway-tube-size-2\",\n            \"answer-alternative-airway-tube-size-2-5\",\n            \"answer-alternative-airway-tube-size-3\",\n            \"answer-alternative-airway-tube-size-4\",\n            \"answer-alternative-airway-tube-size-5\",\n            \"answer-alternative-airway-tube-size-6\",\n            \"answer-alternative-airway-tube-size-other\"\n        ]\n    },\n\n    {\n        \"id\": \"prompt-orotracheal-intubation-tube-insertion-depth\",\n        \"interventionID\": \"intv-orotracheal-intubation\",\n        \"type\": MDB_TYPES.PROMPT,\n        \"selectionType\": ST.ONE,\n        \"label\": \"At what depth would you insert the tube?\",\n        \"abbrLabel\": \"Tube insertion depth?\",\n        \"answers\": [\n            \"answer-orotracheal-intubation-tube-insertion-depth-21cm\",\n            \"answer-orotracheal-intubation-tube-insertion-depth-23cm\",\n            \"answer-orotracheal-intubation-tube-insertion-depth-3-times-tube-size\",\n            \"answer-orotracheal-intubation-tube-insertion-depth-other\"\n        ]\n    },\n\n    {\n        \"id\": \"prompt-nasotracheal-intubation-tube-size\",\n        \"interventionID\": \"intv-nasotracheal-intubation\",\n        \"type\": MDB_TYPES.PROMPT,\n        \"selectionType\": ST.ONE,\n        \"label\": \"What tube size would you use?\",\n        \"abbrLabel\": \"Tube size?\",\n        \"answers\": [\n            \"answer-nasotracheal-intubation-tube-size-6-to-6-5\",\n            \"answer-nasotracheal-intubation-tube-size-7-to-7-5\",\n            \"answer-nasotracheal-intubation-tube-size-age-div-4+4-minus1\",\n            \"answer-nasotracheal-intubation-tube-size-age-div-4+4-minus0-5\",\n            \"answer-nasotracheal-intubation-tube-size-0-5-1cm-less-than-oro-size\",\n            \"answer-nasotracheal-intubation-tube-size-other\"\n        ]\n    },\n\n    {\n        \"id\": \"prompt-nasal-cannula-flow-rate\",\n        \"interventionID\": \"intv-supplemental-oxygen-device-nasal-cannula\",\n        \"type\": MDB_TYPES.PROMPT,\n        \"selectionType\": ST.ONE,\n        \"label\": \"What oxygen flow rate would you administer?\",\n        \"abbrLabel\": \"Oxygen flow rate?\",\n        \"answers\": [\n            \"answer-nasal-cannula-flow-rate-1-6-lpm\",\n            \"answer-nasal-cannula-flow-rate-other\"\n        ]\n    },{\n        \"id\": \"prompt-nasal-cannula-target-saturation\",\n        \"interventionID\": \"intv-supplemental-oxygen-device-nasal-cannula\",\n        \"type\": MDB_TYPES.PROMPT,\n        \"selectionType\": ST.ONE,\n        \"label\": \"What is your target oxygen saturation range?\",\n        \"abbrLabel\": \"Target O2 saturation?\",\n        \"answers\": [\n            \"answer-nasal-cannula-target-saturation-gt-90-pct\",\n            \"answer-nasal-cannula-target-saturation-other\"\n        ]\n    },\n\n    {\n        \"id\": \"prompt-non-rebreather-mask-flow-rate\",\n        \"interventionID\": \"intv-supplemental-oxygen-device-non-rebreather-mask\",\n        \"type\": MDB_TYPES.PROMPT,\n        \"selectionType\": ST.ONE,\n        \"label\": \"What oxygen flow rate would you administer?\",\n        \"abbrLabel\": \"Oxygen flow rate?\",\n        \"answers\": [\n            \"answer-non-rebreather-mask-flow-rate-10-15-liters-min\",\n            \"answer-non-rebreather-mask-flow-rate-other\"\n        ]\n    },{\n        \"id\": \"prompt-non-rebreather-mask-target-saturation\",\n        \"interventionID\": \"intv-supplemental-oxygen-device-non-rebreather-mask\",\n        \"type\": MDB_TYPES.PROMPT,\n        \"selectionType\": ST.ONE,\n        \"label\": \"What is your target oxygen saturation range?\",\n        \"abbrLabel\": \"Target O2 saturation?\",\n        \"answers\": [\n            \"answer-non-rebreather-mask-target-saturation-gt-90-pct\",\n            \"answer-non-rebreather-mask-target-saturation-other\"\n        ]\n    },\n\n    {\n        \"id\": \"prompt-bvm-ventilation-rate\",\n        \"interventionID\": \"intv-ventilation-technique-bag-valve-mask\",\n        \"type\": MDB_TYPES.PROMPT,\n        \"selectionType\": ST.ONE,\n        \"label\": \"At what rate will you ventilate the patient?\",\n        \"abbrLabel\": \"\",\n        \"answers\": [\n            \"answer-bvm-ventilation-rate-10-12-bpm\",\n            \"answer-bvm-ventilation-rate-other\",\n        ]\n    }, {\n        \"id\": \"prompt-bvm-flow-rate\",\n        \"interventionID\": \"intv-ventilation-technique-bag-valve-mask\",\n        \"type\": MDB_TYPES.PROMPT,\n        \"selectionType\": ST.ONE,\n        \"label\": \"What flow rate would you administer?\",\n        \"abbrLabel\": \"Flow rate?\",\n        \"answers\": [\n            \"answer-bvm-flow-rate-15-ltm-or-gt\",\n            \"answer-bvm-flow-rate-other\",\n        ]\n    },{\n        \"id\": \"prompt-bvm-target-saturation\",\n        \"interventionID\": \"intv-ventilation-technique-bag-valve-mask\",\n        \"type\": MDB_TYPES.PROMPT,\n        \"selectionType\": ST.ONE,\n        \"label\": \"What is your target oxygen saturation range?\",\n        \"abbrLabel\": \"Target O2 saturation?\",\n        \"answers\": [\n            \"answer-bvm-target-saturation-rate-gt-90-pct\",\n            \"answer-bvm-target-saturation-rate-other\"\n        ]\n    },\n\n    {\n        \"id\": \"prompt-tourniquet-placement\",\n        \"interventionID\": \"intv-control-severe-bleeding-technique-tourniquet\",\n        \"type\": MDB_TYPES.PROMPT,\n        \"selectionType\": ST.ONE,\n        \"label\": \"Where would you place the tourniquet?\",\n        \"abbrLabel\": \"Tourniquet location?\",\n        \"answers\": [\n            \"answer-tourniquet-placement-close-to-core-far-from-wound\",\n            \"answer-tourniquet-placement-other\"\n        ]\n    },\n\n    {\n        \"id\": \"prompt-2nd-tourniquet-placement\",\n        \"interventionID\": \"intv-control-severe-bleeding-technique-2nd-tourniquet\",\n        \"type\": MDB_TYPES.PROMPT,\n        \"selectionType\": ST.ONE,\n        \"label\": \"Where would you place the second tourniquet?\",\n        \"abbrLabel\": \"Tourniquet location?\",\n        \"answers\": [\n            \"answer-2nd-tourniquet-placement-adjacent-to-initial-tourniquet\",\n            \"answer-2nd-tourniquet-placement-other\"\n        ]\n    },\n\n    {\n        \"id\": \"prompt-occlusive-dressing-injury-type\",\n        \"interventionID\": \"intv-occlusive-dressing\",\n        \"type\": MDB_TYPES.PROMPT,\n        \"selectionType\": ST.ONE,\n        \"label\": \"What type of injury are you trying to manage?\",\n        \"abbrLabel\": \"For what type of injury?\",\n        \"answers\": [\n            \"answer-occulsivive-dressing-injury-type-open-pneumothorax\",\n            \"answer-occulsivive-dressing-injury-type-other\"\n        ]\n    },{\n        \"id\": \"prompt-occlusive-dressing-method\",\n        \"interventionID\": \"intv-occlusive-dressing\",\n        \"type\": MDB_TYPES.PROMPT,\n        \"selectionType\": ST.ONE,\n        \"label\": \"How would you create a release valve on an occlusive dressing?\",\n        \"abbrLabel\": \"How would you create a release valve?\",\n        \"answers\": [\n            \"answer-occulsive-dressing-method-leave-one-side-untaped\",\n            \"answer-occulsive-dressing-method-leave-dressing-with-one-way-valve\",\n            \"answer-occulsive-dressing-method-other\"\n        ]\n    },\n\n\n    {\n        \"id\": \"prompt-pleural-decompression-injury-type\",\n        \"interventionID\": \"intv-pleural-decompression\",\n        \"type\": MDB_TYPES.PROMPT,\n        \"selectionType\": ST.ONE,\n        \"label\": \"What type of injury are you trying to manage?\",\n        \"abbrLabel\": \"For what type of injury?\",\n        \"answers\": [\n            \"answer-pleural-decompression-injury-type-tension-pneumothorax\",\n            \"answer-pleural-decompression-injury-type-open-pneumothorax\",\n            \"answer-pleural-decompression-injury-type-other\"\n        ]\n    },{\n        \"id\": \"prompt-pleural-decompression-needle-placement-side-of-the-body\",\n        \"interventionID\": \"intv-pleural-decompression\",\n        \"type\": MDB_TYPES.PROMPT,\n        \"selectionType\": ST.ONE,\n        \"label\": \"On which side of the body would you place the needle?\",\n        \"abbrLabel\": \"Which side would you place the needle?\",\n        \"answers\": [\n            \"answer-pleural-decompression-needle-placement-side-of-the-body-right\",\n            \"answer-pleural-decompression-needle-placement-side-of-the-body-left\"\n        ]\n    },{\n        \"id\": \"prompt-pleural-decompression-needle-placement-anatomical-landmark\",\n        \"interventionID\": \"intv-pleural-decompression\",\n        \"type\": MDB_TYPES.PROMPT,\n        \"selectionType\": ST.ONE,\n        \"label\": \"At what anatomical landmark?\",\n        \"abbrLabel\": \"At what anatomical landmark?\",\n        \"answers\": [\n            \"answer-pleural-decompression-needle-placement-anatomical-landmark-2nd-or-3rd-intercostal-space-mid-clavicular\",\n            \"answer-pleural-decompression-needle-placement-anatomical-landmark-4th-or-5th-intercostal-space-mid-axillary\",\n            \"answer-pleural-decompression-needle-placement-anatomical-landmark-other\"\n        ]\n    },{\n        \"id\": \"prompt-pleural-decompression-needle-size\",\n        \"interventionID\": \"intv-pleural-decompression\",\n        \"type\": MDB_TYPES.PROMPT,\n        \"selectionType\": ST.ONE,\n        \"label\": \"What size needle do you want to use?\",\n        \"abbrLabel\": \"Needle size?\",\n        \"answers\": [\n            \"answer-pleural-decompression-needle-size-large-bore\",\n            \"answer-pleural-decompression-needle-size-other\"\n        ]\n    },{\n        \"id\": \"prompt-pleural-decompression-needle-length\",\n        \"interventionID\": \"intv-pleural-decompression\",\n        \"type\": MDB_TYPES.PROMPT,\n        \"selectionType\": ST.ONE,\n        \"label\": \"How long a needle would you use?\",\n        \"abbrLabel\": \"Needle length?\",\n        \"answers\": [\n            \"answer-pleural-decompression-needle-length-2-inches-or-longer\",\n            \"answer-pleural-decompression-needle-length-other\"\n        ]\n    },\n\n    {\n        \"id\": \"prompt-transport-facility-choice\",\n        \"interventionID\": \"intv-transport\",\n        \"type\": MDB_TYPES.PROMPT,\n        \"selectionType\": ST.ONE,\n        \"label\": \"What type of care facility will you transport the patient to?\",\n        \"abbrLabel\": \"Type of receiving facility\",\n        \"answers\": [\n            \"answer-transport-facility-choice-level-1-or-2-trauma-center\",\n            \"answer-transport-facility-choice-level-3-or-4-trauma-center\",\n            \"answer-transport-facility-choice-closest\",\n            \"answer-transport-facility-choice-other\"\n        ]\n    },{\n        \"id\": \"prompt-transport-method\",\n        \"interventionID\": \"intv-transport\",\n        \"type\": MDB_TYPES.PROMPT,\n        \"selectionType\": ST.ONE,\n        \"label\": \"Would you transport this patient by air or ground ambulance?\",\n        \"abbrLabel\": \"Air or ground ambulance?\",\n        \"answers\": [\n            \"answer-transport-method-ambulance\",\n            \"answer-transport-method-helicopter\"\n        ]\n    },{\n        \"id\": \"prompt-transport-lights-siren-decision\",\n        \"interventionID\": \"intv-transport\",\n        \"type\": MDB_TYPES.PROMPT,\n        \"selectionType\": ST.ONE,\n        \"label\": \"Would you use lights and sirens with this patient?\",\n        \"abbrLabel\": \"Lights and sirens?\",\n        \"answers\": [\n            \"answer-transport-lights-sirens-yes\",\n            \"answer-transport-lights-sirens-no\"\n        ]\n    },\n\n    {\n        \"id\": \"prompt-splint-type\",\n        \"interventionID\": \"intv-splint-fractures\",\n        \"type\": MDB_TYPES.PROMPT,\n        \"selectionType\": ST.ONE,\n        \"label\": \"What type of splint would you use?\",\n        \"abbrLabel\": \"Type of splint?\",\n        \"answers\": [\n            \"answer-splint-type-board\",\n            \"answer-splint-type-moldable\",\n            \"answer-splint-type-traction\",\n            \"answer-splint-type-pelvic-binder\",\n            \"answer-splint-type-other\"\n        ]\n    },\n\n]\n/*\n    {\n        \"id\": \"\",\n        \"interventionID\": \"\",\n        \"type\": MDB_TYPES.PROMPT,\n        \"selectionType\": ST.ONE,\n        \"label\": \"\",\n        \"abbrLabel\": \"\",\n        \"answers\": [\n        ]\n    },\n*/\nexport default INTV_PROMPTS","const INTV_MENU_ITEMS = [\n    {\n        \"depth\": 1,\n        \"type\": \"heading\",\n        \"id\": \"heading-als\",\n        \"label\": \"ALS\",\n        intvCategoryID: \"intv-cat-airway\"\n    },\n    {\n        \"depth\": 1,\n        \"type\": \"heading\",\n        \"id\": \"heading-amputation\",\n        \"label\": \"Manage amputation\",\n        intvCategoryID: \"intv-cat-manage-wounds-and-specific-injuries\"\n    },\n    {\n        \"depth\": 1,\n        \"type\": \"heading\",\n        \"id\": \"heading-bls\",\n        \"label\": \"BLS\",\n        intvCategoryID: \"intv-cat-airway\"\n    },\n    {\n        \"depth\": 2,\n        \"type\": \"heading\",\n        \"id\": \"heading-crico\",\n        \"label\": \"Cricothyrotomy\",\n        intvCategoryID: \"intv-cat-airway\"\n    },\n    {\n        \"depth\": 2,\n        \"type\": \"heading\",\n        \"id\": \"heading-establish-patency\",\n        \"label\": \"Establish patency\",\n        intvCategoryID: \"intv-cat-airway\"\n    },\n    {\n        \"depth\": 2,\n        \"type\": \"heading\",\n        \"id\": \"heading-insert-adjunct\",\n        \"label\": \"Insert adjunct\",\n        intvCategoryID: \"intv-cat-airway\"\n    },\n    {\n        \"depth\": 2,\n        \"type\": \"heading\",\n        \"id\": \"heading-intubation\",\n        \"label\": \"Intubation\",\n        intvCategoryID: \"intv-cat-airway\"\n    },\n    {\n        \"depth\": 1,\n        \"type\": \"heading\",\n        \"id\": \"heading-manage-internal-bleeding\",\n        \"label\": \"Manage suspected internal bleeding\",\n        intvCategoryID: \"intv-cat-circulation-management\"\n    },\n    {\n        \"depth\": 1,\n        \"type\": \"heading\",\n        \"id\": \"heading-manage-shock\",\n        \"label\": \"Manage hemorrhagic shock\",\n        intvCategoryID: \"intv-cat-circulation-management\"\n    },\n    {\n        \"depth\": 3,\n        \"type\": \"heading\",\n        \"id\": \"heading-medication-facilitated-intubation\",\n        \"label\": \"Medication Facilitated Intubation\",\n        intvCategoryID: \"intv-cat-airway\"\n    },\n    {\n        \"depth\": 2,\n        \"type\": \"heading\",\n        \"id\": \"heading-open-airway\",\n        \"label\": \"Open airway\",\n        intvCategoryID: \"intv-cat-airway\"\n    },\n    {\n        \"depth\": 3,\n        \"type\": \"heading\",\n        \"id\": \"heading-remove-foreign-body-obstructions\",\n        \"label\": \"Remove foreign body obstructions\",\n        intvCategoryID: \"intv-cat-airway\"\n    },\n    {\n         \"depth\": 1,\n         \"type\": \"heading\",\n         \"id\": \"heading-severe-external-bleeding\",\n         \"label\": \"Manage severe external bleeding\",\n         intvCategoryID: \"intv-cat-circulation-management\"\n    },\n    {\n        \"depth\": 1,\n        \"type\": \"heading\",\n        \"id\": \"heading-transfer\",\n        \"label\": \"Transfer patient to EMS vehicle\",\n        intvCategoryID: \"intv-cat-extrication-and-transport\"\n    },\n    {\n        \"depth\": 1,\n        \"type\": \"heading\",\n        \"id\": \"heading-transport\",\n        \"label\": \"Transport to care facility\",\n        intvCategoryID: \"intv-cat-extrication-and-transport\"\n    },\n    {\n        \"depth\": 3,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-advanced-airway-adjunct\",\n        interventionID: \"intv-advanced-airway-adjunct\",\n        intvCategoryID: \"intv-cat-airway\"\n    },\n    {\n        \"depth\": 3,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-airway-patency-technique-suction-airway\",\n        interventionID: \"intv-airway-patency-technique-suction-airway\",\n        intvCategoryID: \"intv-cat-airway\"\n    },\n    {\n        \"depth\": 1,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-apply-sterile-dressings\",\n        interventionID: \"intv-apply-sterile-dressings\",\n        intvCategoryID: \"intv-cat-manage-wounds-and-specific-injuries\"\n    },\n    {\n        \"depth\": 4,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-back-blows-and-chest-thrusts\",\n        interventionID: \"intv-back-blows-and-chest-thrusts\",\n        intvCategoryID: \"intv-cat-airway\"\n    },\n    {\n        \"depth\": 2,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-control-severe-bleeding-technique-direct-pressure\",\n        interventionID: \"intv-control-severe-bleeding-technique-direct-pressure\",\n        intvCategoryID: \"intv-cat-circulation-management\"\n    },\n    {\n        \"depth\": 2,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-control-severe-bleeding-technique-tourniquet\",\n        interventionID: \"intv-control-severe-bleeding-technique-tourniquet\",\n        intvCategoryID: \"intv-cat-circulation-management\"\n    },\n    {\n        \"depth\": 2,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-control-severe-bleeding-technique-2nd-tourniquet\",\n        interventionID: \"intv-control-severe-bleeding-technique-2nd-tourniquet\",\n        intvCategoryID: \"intv-cat-circulation-management\"\n    },\n    {\n        \"depth\": 2,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-control-severe-bleeding-technique-pack-wound-with-gauze\",\n        interventionID: \"intv-control-severe-bleeding-technique-pack-wound-with-gauze\",\n        intvCategoryID: \"intv-cat-circulation-management\"\n    },\n    {\n        \"depth\": 2,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-control-severe-bleeding-technique-pressure-bandage\",\n        interventionID: \"intv-control-severe-bleeding-technique-pressure-bandage\",\n        intvCategoryID: \"intv-cat-circulation-management\"\n    },\n    {\n        \"depth\": 2,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-control-severe-bleeding-technique-load-and-go\",\n        interventionID: \"intv-control-severe-bleeding-technique-load-and-go\",\n        intvCategoryID: \"intv-cat-circulation-management\"\n    },\n    {\n        \"depth\": 2,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-control-shock-technique-keep-patient-warm\",\n        interventionID: \"intv-control-shock-technique-keep-patient-warm\",\n        intvCategoryID: \"intv-cat-circulation-management\"\n    },\n    {\n        \"depth\": 2,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-control-shock-technique-administer-high-concentration-o2\",\n        interventionID: \"intv-control-shock-technique-administer-high-concentration-o2\",\n        intvCategoryID: \"intv-cat-circulation-management\"\n    },\n    {\n        \"depth\": 2,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-control-shock-technique-place-patient-supine-position\",\n        interventionID: \"intv-control-shock-technique-place-patient-supine-position\",\n        intvCategoryID: \"intv-cat-circulation-management\"\n    },\n    {\n        \"depth\": 2,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-control-shock-technique-administer-iv-boluses\",\n        interventionID: \"intv-control-shock-technique-administer-iv-boluses\",\n        intvCategoryID: \"intv-cat-circulation-management\"\n    },\n    {\n        \"depth\": 4,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-heimlich-maneuver\",\n        interventionID: \"intv-heimlich-maneuver\",\n        intvCategoryID: \"intv-cat-airway\"\n    },\n    {\n        \"depth\": 2,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-keep-body-part-cool\",\n        interventionID: \"intv-keep-body-part-cool\",\n        intvCategoryID: \"intv-cat-manage-wounds-and-specific-injuries\"\n    },\n    {\n        \"depth\": 4,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-magill-forceps-assisted\",\n        interventionID: \"intv-magill-forceps-assisted\",\n        intvCategoryID: \"intv-cat-airway\"\n    },\n    {\n        \"depth\": 4,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-manual-finger-sweep\",\n        interventionID: \"intv-manual-finger-sweep\",\n        intvCategoryID: \"intv-cat-airway\"\n    },\n    {\n        \"depth\": 3,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-nasopharyngeal-airway\",\n        interventionID: \"intv-nasopharyngeal-airway\",\n        intvCategoryID: \"intv-cat-airway\"\n    },\n    {\n        \"depth\": 3,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-nasotracheal-intubation\",\n        interventionID: \"intv-nasotracheal-intubation\",\n        interventionID: \"intv-nasotracheal-intubation\",\n        interventionID: \"intv-nasotracheal-intubation\",\n        intvCategoryID: \"intv-cat-airway\"\n    },\n    {\n        \"depth\": 3,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-needle-cricothyrotomy\",\n        interventionID: \"intv-needle-cricothyrotomy\",\n        intvCategoryID: \"intv-cat-airway\"\n    },\n    {\n        \"depth\": 1,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-occlusive-dressing\",\n        interventionID: \"intv-occlusive-dressing\",\n        intvCategoryID: \"intv-cat-manage-thoracic-trauma\"\n    },\n    {\n        \"depth\": 3,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-open-airway-method-head-tilt\",\n        interventionID: \"intv-open-airway-method-head-tilt\",\n        intvCategoryID: \"intv-cat-airway\"\n    },\n    {\n        \"depth\": 3,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-open-airway-method-modified-jaw-thrust\",\n        interventionID: \"intv-open-airway-method-modified-jaw-thrust\",\n        intvCategoryID: \"intv-cat-airway\"\n    },\n    {\n        \"depth\": 3,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-oropharyngeal-airway\",\n        interventionID: \"intv-oropharyngeal-airway\",\n        intvCategoryID: \"intv-cat-airway\"\n    },\n    {\n        \"depth\": 3,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-orotracheal-intubation\",\n        interventionID: \"intv-orotracheal-intubation\",\n        intvCategoryID: \"intv-cat-airway\"\n    },\n    {\n        \"depth\": 2,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-place-body-part-in-bag\",\n        interventionID: \"intv-place-body-part-in-bag\",\n        intvCategoryID: \"intv-cat-manage-wounds-and-specific-injuries\"\n    },\n    {\n        \"depth\": 2,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-place-immobilized-patient-on-stretcher\",\n        interventionID: \"intv-place-immobilized-patient-on-stretcher\",\n        intvCategoryID: \"intv-cat-extrication-and-transport\"\n    },\n    {\n        \"depth\": 1,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-pleural-decompression\",\n        interventionID: \"intv-pleural-decompression\",\n        intvCategoryID: \"intv-cat-manage-thoracic-trauma\"\n    },\n    {\n        \"depth\": 1,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-prepare-and-administer-pain-nausea-vomiting-medications\",\n        interventionID: \"intv-prepare-and-administer-pain-nausea-vomiting-medications\",\n        intvCategoryID: \"intv-cat-manage-pain-nausea-vomiting\"\n    },\n    {\n        \"depth\": 1,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-prepare-and-administer-sedative\",\n        interventionID: \"intv-prepare-and-administer-sedative\",\n        intvCategoryID: \"intv-cat-sedate-agitated-or-combatitive-patient\"\n    },\n    {\n        \"depth\": 4,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-rapid-sequence-intubation\",\n        interventionID: \"intv-rapid-sequence-intubation\",\n        interventionID: \"intv-rapid-sequence-intubation\",\n        interventionID: \"intv-rapid-sequence-intubation\",\n        intvCategoryID: \"intv-cat-airway\"\n    },\n    {\n        \"depth\": 2,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-retrieve-amputated-body-part\",\n        interventionID: \"intv-retrieve-amputated-body-part\",\n        intvCategoryID: \"intv-cat-manage-wounds-and-specific-injuries\"\n    },\n    {\n        \"depth\": 4,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-sedation-assisted-intubation\",\n        interventionID: \"intv-sedation-assisted-intubation\",\n        intvCategoryID: \"intv-cat-airway\"\n    },\n    {\n        \"depth\": 4,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-slat\",\n        interventionID: \"intv-slat\",\n        intvCategoryID: \"intv-cat-airway\"\n    },\n    {\n        \"depth\": 1,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-spinal-immobilization-technique-attach-cid\",\n        interventionID: \"intv-spinal-immobilization-technique-attach-cid\",\n        intvCategoryID: \"intv-cat-spinal-motion-restriction\"\n    },\n    {\n        \"depth\": 1,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-spinal-immobilization-technique-cervical-collar\",\n        interventionID: \"intv-spinal-immobilization-technique-cervical-collar\",\n        intvCategoryID: \"intv-cat-spinal-motion-restriction\"\n    },\n    {\n        \"depth\": 1,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-spinal-immobilization-technique-manual-c-spine\",\n        interventionID: \"intv-spinal-immobilization-technique-manual-c-spine\",\n        intvCategoryID: \"intv-cat-manual-c-spine-stabilization\"\n    },\n    {\n        \"depth\": 1,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-spinal-immobilization-technique-manual-c-spine2\",\n        interventionID: \"intv-spinal-immobilization-technique-manual-c-spine\",\n        intvCategoryID: \"intv-cat-spinal-motion-restriction\"\n    },\n    {\n        \"depth\": 1,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-spinal-immobilization-technique-transfer-to-device\",\n        interventionID: \"intv-spinal-immobilization-technique-transfer-to-device\",\n        intvCategoryID: \"intv-cat-spinal-motion-restriction\"\n    },\n    {\n        \"depth\": 2,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-splint-fractures\",\n        interventionID: \"intv-splint-fractures\",\n        intvCategoryID: \"intv-cat-circulation-management\"\n    },\n    {\n        \"depth\": 1,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-splint-fractures2\",\n        interventionID: \"intv-splint-fractures\",\n        intvCategoryID: \"intv-cat-manage-wounds-and-specific-injuries\"\n    },\n    {\n        \"depth\": 2,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-sterile-dressing-soft-tissue\",\n        interventionID: \"intv-sterile-dressing-soft-tissue\",\n        intvCategoryID: \"intv-cat-manage-wounds-and-specific-injuries\"\n    },\n    {\n        \"depth\": 1,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-supplemental-oxygen-device-nasal-cannula\",\n        interventionID: \"intv-supplemental-oxygen-device-nasal-cannula\",\n        intvCategoryID: \"intv-cat-manage-oxygenation-and-ventilation\"\n    },\n    {\n        \"depth\": 1,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-supplemental-oxygen-device-non-rebreather-mask\",\n        interventionID: \"intv-supplemental-oxygen-device-non-rebreather-mask\",\n        intvCategoryID: \"intv-cat-manage-oxygenation-and-ventilation\"\n    },\n    {\n        \"depth\": 3,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-surgical-cricothyrotomy\",\n        interventionID: \"intv-surgical-cricothyrotomy\",\n        intvCategoryID: \"intv-cat-airway\"\n    },\n    {\n        \"depth\": 2,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-transfers-patient-method-walk-patient\",\n        interventionID: \"intv-transfers-patient-method-walk-patient\",\n        intvCategoryID: \"intv-cat-extrication-and-transport\"\n    },\n    {\n        \"depth\": 2,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-transfers-patient-method-place-directly-on-stretcher\",\n        interventionID: \"intv-transfers-patient-method-place-directly-on-stretcher\",\n        intvCategoryID: \"intv-cat-extrication-and-transport\"\n    },\n    {\n        \"depth\": 2,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-transport\",\n        interventionID: \"intv-transport\",\n        intvCategoryID: \"intv-cat-extrication-and-transport\"\n    },\n    {\n        \"depth\": 2,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-transport-body-part-to-receiving-facility\",\n        interventionID: \"intv-transport-body-part-to-receiving-facility\",\n        intvCategoryID: \"intv-cat-manage-wounds-and-specific-injuries\"\n    },\n    {\n        \"depth\": 1,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-ventilation-technique-bag-valve-mask\",\n        interventionID: \"intv-ventilation-technique-bag-valve-mask\",\n        intvCategoryID: \"intv-cat-manage-oxygenation-and-ventilation\"\n    },\n    {\n        \"depth\": 2,\n        \"type\": \"intervention\",\n        \"id\": \"menu-item-wrap-body-part-in-saline-soaked-gauze\",\n        interventionID: \"intv-wrap-body-part-in-saline-soaked-gauze\",\n        intvCategoryID: \"intv-cat-manage-wounds-and-specific-injuries\"\n    }\n]\n\nexport default INTV_MENU_ITEMS","import { useEffect, useState } from \"react\"\n\nimport { Link } from \"react-router-dom\"\nimport { db } from \"@meddbriefer/mdb-firebase\"\nimport { getLogs } from \"@meddbriefer/scenario-data/index\"\n\nimport { Table } from \"reactstrap\"\nconst LogList = () => {\n    const [logs, setLogs] = useState([])\n    const [logsLoaded, setLogsLoaded] = useState(false)\n\n    useEffect(\n        () => {\n            getLogs(db)\n            .then(result => {\n                setLogs(result)\n                // console.log(result)\n                setLogsLoaded(true)\n            })\n            .catch(error => console.log('error fetching logs', error))\n        },\n        []\n    )\n\n    if (!logsLoaded) {\n        return (<h4>fetching log data</h4>)\n    }\n    return (\n        <Table striped={true} borderless size=\"sm\" hover>\n            <thead>\n                <tr>\n                    <th>Label</th>\n                    <th>Scenario</th>\n                    <th>Username</th>\n                    <th>Timestamp</th>\n                </tr>\n            </thead>\n            <tbody>\n                {logs.map(log => (\n                    <tr key={log.id}>\n                        <td>{log.label}</td>\n                        <td>{log.scenario}</td>\n                        <td>{log.userName}</td>\n                        <td>{log.timestamp}</td>\n                        <td>\n                            <Link to={`/logs/${log.id}`}>Analyze</Link>&nbsp;&nbsp;&nbsp;&nbsp;\n                            <Link to={`/debriefing-feedback-logs/${log.id}`}>Review</Link>\n                        </td>\n                    </tr>\n                ))}\n            </tbody>\n        </Table>\n    )\n\n}\n\nexport default LogList","\n\n  export const colorTypes = {\n    \"Good\": \"text-success\",\n    \"Caution\": \"text-warning\",\n    \"Problem\": \"text-danger\",\n    \"Not implemented\": \"text-muted\"\n}\n\nexport const iconTypes = {\n    \"Good\": \"sentiment_satisfied\",\n    \"Caution\": \"report_problem\",\n    \"Problem\": \"highlight_off\",\n    \"Not implemented\": \"sentiment_neutral\"\n}\n\n//Feedback substitute commands for feedback template\n//@ means substitute this entry field into the feedback template and if no value in field say this in feedback, \n//? means substitute this entry field into the feedback template if the value exists,\n//+bos adds period to end sentence, two spaces and capitalizes first letter of what follows\n//+eos adds a period with no preceding spaces\n\n//assessmentEntries states are used by analyzeEvents, condition1 and condition2, but the rest is used only by condition 1\nexport const assessmentEntries = {\n    // state: [categorization for feedback, feedback template for condition 1]\n    \"contraindicated\": [\"Problem\", \"You should not have done this action because it is contraindicated in this case +bos ?contraindicatedWhy ?why +eos\"],\n    \"irrelevant\": [\"Problem\", \"You should not have done this action because it is irrelevant in this case +bos ?why +eos\"],\n    \"unnecessary\": [\"Problem\", \"You should not have done this action because it is unnecessary in this case +bos ?why +eos\"],\n    \"missingMinimal\": [\"Problem\", \"You did not do this action +bos ?why +eos\"],\n    \"missingOptional\": [\"Caution\", \"You did not do this action +bos but it was optional in this case +bos ?why +eos\"],\n    \"missingRequired\": [\"Problem\", \"You did not do this action +bos ?why +eos\"],\n    \"missingRequiredAssessment\": [\"Problem\", \"You did not do this action +bos ?assessmentFB +eos\"],\n    \"notNecessary\": [\"Caution\", \"You should not have done this action because it was unnecessary +bos ?why +eos\"],  //applies only to assessment items\n\n    //note that missing/wrong items cannot be an argument in a misordering of events so there states will not get combined with misOrdered states\n\n    //not yet implemented\n   // \"missedProblem\": [\"Problem\", \"The following should alert you to @problem: +items @problemAssessments\"],  //need to add status and fields to analysis code still and +item formatting below\n \n    \"assessment\": [\"Good\", \"\"],\n    \"assessment-option\": [\"Good\", \"\"],\n    \"decision-option\": [\"Good\", \"\"],\n    \"required-action\": [\"Good\", \"\"],\n    \"goodIntv\": [\"Good\", \"?intvStatusFB +eos \"],\n    \n\n    \"misOrdered-assessment\": [\"Problem\", \"Doing this action was correct but it was done out of the recommended order +bos @orderingFB +eos\"],\n    \"misOrdered-assessment-option\": [\"Problem\", \"Doing this action was correct but it was done out of the recommended order +bos @orderingFB +eos\"],\n    \"misOrdered-decision-option\": [\"Problem\", \"Doing this action was correct but it was done out of the recommeded order +bos @orderingFB\"],\n    \"misOrdered-required-action\": [\"Problem\", \"Doing this action was correct but it was done out of the recommeded order +bos @orderingFB\"],\n    \"misOrdered-goodIntv\": [\"Problem\", \"Doing this action was correct but it was done out of the recommeded order +bos @orderingFB\"],\n\n    \"misOrdered-phase-assessment\": [\"Problem\", \"Doing this action was correct but this section was not completed in the recommended order +bos @orderingFB +eos\"],\n    \"misOrdered-phase-assessment-option\": [\"Good\", \"Doing this action was correct but this section was not completed in the recommended order +bos @orderingFB +eos\"],\n    \"misOrdered-phase-decision-option\": [\"Problem\", \"Doing this action was correct but this section was not completed in the recommended order +bos @orderingFB\"],\n    \"misOrdered-phase-required-action\": [\"Problem\", \"Doing this action was correct but this section was not completed in the recommended order +bos @orderingFB\"],\n    \"misOrdered-phase-goodintv\": [\"Problem\", \"Doing this action was correct but this section was not completed in the recommended order +bos @orderingFB\"],\n\n    //doubt that status checks can be misordered\n    \"intvCheckWNoIntvFound\": [\"Caution\", \"You didn't do this intervention so it doesn't make sense to check the status of it at this point.\"],\n    \"unexpectedPatientIntvCheck\": [\"Caution\", \"This status check is not likely to reveal any useful information.\"],  //nothing indicates a need to check that this intv worked\n    \"patientIntvCheck\": [\"Good\", \"\"], //as long as the intervention was done it is fine to request it\n    \"patientVitalCheck\": [\"Good\", \"\"],  //currently any patient vital check that is done is fine\n\n\n    \"assessment-option-incorrect\": [\"Problem\", \"Doing this action was correct but there is a problem with how you planned to do it +bos @incorrectAnswerFB +eos \"],\n    \"decision-option-incorrect\": [\"Problem\", \"Doing this action was correct but there is a problem with how you planned to do it +bos @incorrectAnswerFB +eos \"],  \n    \"incorrect-answers\": [\"Problem\", \"Doing this action is correct but there is a problem with how you planned to do it +bos @incorrectAnswersFB +bos ?intvStatusFB +eos\"],\n    \"minimal-incorrect-answers\": [\"Problem\", \"Doing this action was correct and would solve the problem but you did not follow protocol +bos ?minimalWhy +bos also there is a problem with how you planned to do this intervention +bos @incorrectAnswersFB +bos ?intvStatusFB +eos\"],\n    \"minimal\": [\"Caution\", \"Doing this action is correct and solves the problem but you did not follow protocol +bos @minimalWhy +bos ?intvStatusFB +eos \"],\n\n   \n    \"misOrdered-assessment-option-incorrect\": [\"Problem\", \"Doing this action was correct but it was done out of the recommended order +bos @orderingFB +bos Also there is a problem with how you planned to do it +bos @incorrectAnswerFB +eos \"],\n    \"misOrdered-decision-option-incorrect\": [\"Problem\", \"Doing this action was correct but it was done out of the recommended order +bos @orderingFB +bos Also there is a problem with how you planned to do it +bos @incorrectAnswerFB +eos \"],\n    \"misOrdered-incorrect-answers\": [\"Problem\", \"Doing this action is correct but it was done out of the recommended order +bos @orderingFB +bos also there is a problem with how you planned to do it +bos @incorrectAnswersFB +bos ?intvStatusFB +eos\"],\n    \"misOrdered-minimal-incorrect-answers\": [\"Problem\", \"Doing this action is correct but it was done out of the recommended order +bos @orderingFB +bos And while this would solve the problem, you did not follow protocol +bos @minimalWhy +bos also there is a problem with how you planned to do it +bos @incorrectAnswersFB +bos ?intvStatusFB +eos\"],\n    \"misOrdered-minimal\": [\"Problem\", \"Doing this action is correct but it was done out of the recommended order +bos @orderingFB +bos And while this would solve the problem, you did not follow protocol +bos @minimalWhy +bos ?intvStatusFB +eos\"],\n        \n    \n    \"misOrdered-phase-assessment-option-incorrect\": [\"Problem\", \"Doing this action was correct but this section was not completed in the recommended order +bos @orderingFB +bos Also there is a problem with how you planned to do it +bos @incorrectAnswerFB +eos \"],\n    \"misOrdered-phase-decision-option-incorrect\": [\"Problem\", \"Doing this action was correct but this section was not completed in the recommended order +bos @orderingFB +bos Also there is a problem with how you planned to do it +bos @incorrectAnswerFB +eos \"],\n    \"misOrdered-phase-incorrect-answers\": [\"Problem\", \"Doing this action is correct but this section was not completed in the recommended order +bos @orderingFB +bos also there is a problem with how you planned to do it +bos @incorrectAnswersFB +bos ?intvStatusFB +eos\"],\n    \"misOrdered-phase-minimal-incorrect-answers\": [\"Problem\", \"Doing this action is correct but this section was not completed in the recommended order +bos @orderingFB +bos And while this would solve the problem, you did not follow protocol +bos ?minimalWhy +bos also there is a problem with how you planned to do it +bos @incorrectAnswersFB +bos ?intvStatusFB +eos\"],\n    \"misOrdered-phase-minimal\": [\"Problem\", \"Doing this action is correct but this section was not completed in the recommended order +bos @orderingFB +bos And while this would solve the problem, you did not follow protocol +bos ?minimalWhy +bos ?intvStatusFB +eos\"],\n    \n    \"green\": [\"Good\", \"\"],  //just for headers\n    \"red\": [\"Problem\", \"\"], //just for headers\n    \"yellow\": [\"Caution\", \"\"], //just for headers\n    //\"notFound\": [\"Not implemented\", \"Assessment knowledge is not yet specified\", []],\n    \"default\": [\"Not implemented\", \"This action was not expected.  There could be an issue with how this scenario is represented within the system.\"]\n}\n","export const phaseStatusList = {\n    absent: [\"absent\", \"missingMinimal\", \"missingRequired\", \"missingRequiredAssessment\"],\n    errors: [\"misOrdered-assessment\", \"misOrdered-assessment-option\", \"misOrdered-decision-option\", \"misOrdered-required-action\", \"misOrdered-goodIntv\",\n    \"assessment-option-incorrect\", \"decision-option-incorrect\", \"incorrect-answers\", \"minimal-incorrect-answers\", //\"minimal\", \n    \"misOrdered-assessment-option-incorrect\", \"misOrdered-decision-option-incorrect\", \"misOrdered-incorrect-answers\", \"misOrdered-minimal-incorrect-answers\",\n    \"misOrdered-minimal\", \n    \"misOrdered-phase-assessment-option-incorrect\", \"misOrdered-phase-decision-option-incorrect\", \"misOrdered-phase-incorrect-answers\", \"misOrdered-phase-minimal-incorrect-answers\",\n        ],\n    good: [\"good\", \"assessment\", \"assessment-option\", \"decision-option\", \"required-action\", \"goodIntv\", \n        //condition 2 does not address these so put them in the good category\n        \"patientIntvCheck\", \"patientVitalCheck\", \"irrelevant\", \"unnecessary\", \"contraindicated\", \"notNecessary\",\n        \"intvCheckWNoIntvFound\", \"unexpectedPatientIntvCheck\",  \"default\",\n        //condition 2 does not need to address minimal as an error nor misordered-phase as that error appears as misordered at the phase or subphase level\n        //condition 1 uses misOrdered-Phase as that error feedback goes on the first line in the phase/subphase\n        //so without misOrdered-phase and/or minimal, these are good status values\n        \"minimal\", \"misOrdered-phase-minimal\",\n        \"misOrdered-phase-assessment\", \"misOrdered-phase-assessment-option\", \"misOrdered-phase-decision-option\", \"misOrdered-phase-required-action\", \"misOrdered-phase-goodIntv\",\n        ]  \n}\n\nexport const leafStatusList = {\n    absent: [\"missingMinimal\", \"missingRequired\", \"missingRequiredAssessment\"],\n    misordered: [\"misOrdered-assessment\", \"misOrdered-assessment-option\", \"misOrdered-decision-option\", \"misOrdered-required-action\", \"misOrdered-goodIntv\", \"misOrdered-minimal\"],\n    misorderedErrors: [\"misOrdered-assessment-option-incorrect\", \"misOrdered-decision-option-incorrect\", \"misOrdered-incorrect-answers\", \"misOrdered-minimal-incorrect-answers\",\n    \"misOrdered-phase-assessment-option-incorrect\", \"misOrdered-phase-decision-option-incorrect\", \"misOrdered-phase-incorrect-answers\", \"misOrdered-phase-minimal-incorrect-answers\"],\n    errors: [\"assessment-option-incorrect\", \"decision-option-incorrect\", \"incorrect-answers\", \"minimal-incorrect-answers\"],\n    good: [\"assessment\", \"assessment-option\", \"decision-option\", \"required-action\", \"goodIntv\", \n        //condition 2 does not address these so put them in the good category\n        \"patientIntvCheck\", \"patientVitalCheck\", \"irrelevant\", \"unnecessary\", \"contraindicated\", \"notNecessary\",\n        \"intvCheckWNoIntvFound\", \"unexpectedPatientIntvCheck\",  \"default\",\n        //condition 2 does not need to address minimal as an error nor misordered-phase as that error appears as misordered at the phase or subphase level\n        //condition 1 uses misOrdered-Phase as that error feedback goes on the first line in the phase/subphase\n        //so without misOrdered-phase and/or minimal, these are good status values\n        \"minimal\", \"misOrdered-phase-minimal\",\n        \"misOrdered-phase-assessment\", \"misOrdered-phase-assessment-option\", \"misOrdered-phase-decision-option\", \"misOrdered-phase-required-action\", \"misOrdered-phase-goodIntv\",\n        ]  \n}\n","// defines which assessment steps are not required per scenario.  Provides feedback on\n// why the step is not required.\nexport const exceptionDefs = \n[{scenarioName: \"M2CA\", exceptions: [\n    [\"required-action-obtain-OPQRST\", \"This cannot be assessed when GCS < 15\"],\n    [\"assess-opqrst-info\", \"This cannot be assessed when GCS < 15\"]\n    ]}\n  ]\n  \n/* This starts section on defining temporal constraints, conditional constraints and implications.*/\n\n/*temporal constraints are an\nindex of event labels with two lists as values.\nThe first value is a list of event labels that the indexed event\nshould precede (if any) and the second value is a list of event\nlabels that the indexed event should follow after (if any)\n*/\n\nexport const globalConstraints = {\n    // event < list of other events, > list of other events\n    // lookup by event id to see the list of event ids that it should go before\n    // and after, and the type of constraint. \n    // included constraints type with values of policy, commonSense and both.  These may be used in future to\n    // decide any lead in to feedback about a constraint violation\n    // type policy operators are usually \"ands\", type commonsense operators are ususally \"ors\" because\n    // the ordering is looser than with policy ordering.  An operator can be blank if only one item is listed for the\n    // before or for the after.  No software should be written to expect\n    // this tendency between type and operators to hold.\n\n    //Note that: \n    //- for now the software will use either the label or id to lookup constraints but id\n    // is preferred.\n    //- a key (first item on each line) is the first arg in the constraints and is\n    //  assumed to have just one constraint applicable to\n    //  it but may appear as the second arg in a constraint multiple times (2nd args are\n    //  lists under before or after fields)\n    //- when something is a phase or subphase with multiple actions then we look for the begining\n    //  and ending actions for constraint checking.  If overlap in phases is to be allowed the constraint should\n    //  be amongst lower level items and no higher level constraint should be included\n    //= there is no check to make sure the constraints expressed do not conflict.  For example,\n    //  saying a whole phase should be before another phase and that a particular item in the second\n    //  phase can go before some other item in the first phase are in conflict with one another\n\n\n    // Note: looks like I may need to allow multiple constraints to be listed under an arg1 key.  Shouldn't be\n    // difficult to do but waiting to see if it is truly necessary first.  While most constraints for arg1 could\n    // be combined in the list below, there is an issue with adding in scenario specific conditional constraints\n    // that are expressed in a different structure.\n\n    //\"\": {id: \"T\", before: [\"\"], beforeOp: \"\", after: [], afterOp: \"\", type: \"policy\"},\n    \n    // T1\n    \"scene-size-up\": {id: \"T1\", before: [\"primary-survey\"], beforeOp: \"\", after: [], afterOp: \"\", type: \"policy\"},\n    // T2\n    \"primary-survey\": {id: \"T2a\", before: [\"secondary-assessment\"], beforeOp: \"\", after: [], afterOp: \"\", type: \"policy\"},\n    //listing the below any intervention that I think are always going to address a life threat\n    \"intv-control-severe-bleeding-technique-direct-pressure\": {id: \"T2b\", before: [\"secondary-assessment\"], beforeOp: \"\", after: [], afterOp: \"\", type: \"policy\"},\n    \"intv-control-severe-bleeding-technique-2nd-tourniquet\": {id: \"T2c\", before: [\"secondary-assessment\"], beforeOp: \"\", after: [], afterOp: \"\", type: \"policy\"},\n    \"intv-control-severe-bleeding-technique-tourniquet\": {id: \"T2d\", before: [\"secondary-assessment\"], beforeOp: \"\", after: [], afterOp: \"\", type: \"policy\"},\n    // T3\n    \"ints-call-for-helicopter\": {id: \"T3\", before: [\"secondary-assessment\"], beforeOp: \"\", after: [], afterOp: \"\", type: \"policy\"},\n    // T4\n    \"required-action-obtains-vitals\": {id: \"T4\", before: [\"secondary-assessment\"], beforeOp: \"\", after: [], afterOp: \"\", type: \"policy\"},\n    // T5\n    \"required-action-attempt-obtain-sample\": {id: \"T5a\", before: [\"secondary-assessment\"], beforeOp: \"\", after: [], afterOp: \"\", type: \"policy\"},\n    \"required-action-obtain-OPQRST\": {id: \"T5b\", before: [\"secondary-assessment\"], beforeOp: \"\", after: [], afterOp: \"\", type: \"policy\"},\n    // T6 is in scenario specific constraints\n    // T7\n    \"intv-transfer\": {id: \"T7\", before: [\"secondary-assessment\"], beforeOp: \"\", after: [\"airway\", \"breathing\", \"circulation\"], afterOp: \"\", type: \"policy\"},\n    // T8\n    \"trauma-expose\": {id: \"T8\", before: [\"chest\"], beforeOp: \"or\", after: [], afterOp: \"\", type: \"policy\"},\n    // T9\n    \"general-impression\": {id: \"T9\", before: [\"airway\", \"breathing\", \"circulation\"], beforeOp: \"and\", after: [], afterOp: \"\", type: \"policy\"},\n    // T10\n    \"intv-spinal-immobilization-technique-manual-c-spine\": {id: \"T10a\", before: [\"airway\"], beforeOp: \"\", after: [], afterOp: \"\", type: \"policy\"},\n    \"intv-spinal-immobilization-technique-cervical-collar\": {id: \"T10b\", before: [\"airway\"], beforeOp: \"\", after: [], afterOp: \"\", type: \"policy\"},\n    // T11 was deleted per discussion with Sandy\n    // T12 is in scenario specific constraints\n    // T13\n    \"intv-airway-patency-technique-suction-airway\": {id: \"T13\", before: [\"secondary-assessment\"], beforeOp: \"\", after: [\"airway\"], afterOp: \"\", type: \"policy\"},\n    // T14\n    \"intv-airway-patency-technique-suction-airway\": {id: \"T14\", before: [\"intv-oropharyngeal-airway\", \"intv-nasopharyngeal-airway\"], beforeOp: \"or\", after: [], afterOp: \"\", type: \"policy\"},\n    // T15\n    \"intv-oropharyngeal-airway\": {id: \"T15a\", before: [\"intv-nasotracheal-intubation\", \"intv-orotracheal-intubation\", \"intv-sedation-assisted-intubation\", \n                                  \"intv-rapid-sequence-intubation\"], beforeOp: \"or\", after: [], afterOp: \"\", type: \"policy\"},\n    \"intv-nasopharyngeal-airway\": {id: \"T15b\", before: [\"intv-nasotracheal-intubation\", \"intv-orotracheal-intubation\", \"intv-sedation-assisted-intubation\", \n                                  \"intv-rapid-sequence-intubation\"], beforeOp: \"or\", after: [], afterOp: \"\", type: \"policy\"},\n    // T16 awaiting observer interface implementation decisions on how contacting medical command will be recorded\n    // T17\n    \"intv-ventilation-technique-bag-valve-mask\": {id: \"T17\", before: [\"secondary-assessment\"], beforeOp: \"\", after: [], afterOp: \"\", type: \"policy\"},\n    // T18 and T19 are constraints involving intervention checks and need to be discussed in a group meeting\n    \n    //used during testing\n    //state that ongoing management plan should go after the entirety of everything listed in after\n    //\"ongoing-mgmt-plan\": {id: \"c2\", before: [ ], beforeOp: \"\", after: [\"bsi\", \"scene-size-up\", \"primary-survey\", \"history-taking\",\"secondary-assessment\"], afterOp: \"and\", type: \"commonSense\"},\n    // have two second args in below because some of Observer logs have one of these ids and some have the other\n    //\"assess-injury-mechanism\": {id: \"c7\", before: [\"required-action-consider-stabilization-of-spine\", \"required-action-considers-stabilize-spine\"], beforeOp: \"or\", after: [], afterOp: \"\", type: \"commonSense\"},\n    //\"intv-control-severe-bleeding-technique-direct-pressure\": {id: \"c8\", before: [\"intv-control-severe-bleeding-technique-tourniquet\"], beforeOp: \"\", after: [], afterOp: \"\", type: \"both\"},\n    //\"intv-control-severe-bleeding-technique-tourniquet\": {id: \"c9\", before: [\"intv-control-severe-bleeding-technique-2nd-tourniquet\"], beforeOp: \"\", after: [], afterOp: \"\", type: \"both\"},\n     \n}\n\n//constraints that depend on whether certain conditions hold within a scenario\n//based on the scenario and the constraint ids listed under the scenario in\n//scenarioConstraintIDs, the constaints defined here with the ids for the current\n//scenario will be added to the general constraints about for temporal constraint testing\n\n// Used convention of appended -c and a one up number just to indicate it is a conditional constraint.  No software\n// requires this convention for the ids so it can be changed\n\nexport const conditionalConstraints = {\n    // first is a hold over from testing for M2CA\n    \"assess-major-bleeding\": {id: \"c1\", before: [\"airway\",\"breathing\"], beforeOp: \"\", after: [], afterOp: \"\", type: \"policy\"},\n    \"intv-transport\" : {id: \"T2-c1\", before: [\"into-establish-IV\", \"intv-control-shock-technique-administer-iv-boluses\"], beforeOp: \"and\", after: [], afterOp: \"\", type: \"policy\"}, \n    \"secondary-assessment\": {id: \"T6-c1\", before: [\"intv-transfer\", \"ongoing-mgmt-plan\"], beforeOp: \"\", after: [], afterOp: \"\", type: \"policy\"},\n    \"pulse-checks\": {id: \"T12-c1\", before: [\"airway\"], beforeOp: \"or\", after: [], afterOp: \"\", type: \"policy\"}\n    \n    \n}\n\n\n// used to simulate conditional constraints, i.e. we hardcode which conditional constraint ids as\n// defined under conditionalConstraints (above) are relevant to each scenario\n\n// although one could put global constraint ids under scenarios here, it would be redundant and may cause software\n// issues\nexport const scenarioConstraintIDs = {\n    \"M2CA\": [\"c1\", \"T6-c1\"],\n    \"B4CA\": [],\n    \"B7CA\": [],\n    \"SC8CP\": [\"T2-c1\",\"T6-c1\", \"T12-c1\"],\n    //\"\": [],\n    //\"\": []\n}\n\n\n//below are examples of interventions in which status should be checked.  The key intvStatusNeeded\n//is true or false.  If true it means should have requested status of this intervention.  If vitals key is\n//not empty then should have checked all of these vitals as well.  Will only check entries after an intervention\n//up until something other than an intervention check is done\n\n//updates wrt SC8CP-combined-goals-4-4\nexport const intvChecks = {\n    \"intv-nasopharyngeal-airway\": {intvStatusNeeded: true, vitalsNeeded: []},\n    \"intv-oropharyngeal-airway\": {intvStatusNeeded: true, vitalsNeeded: []},\n    \"intv-orotracheal-intubation\": {intvStatusNeeded: true, vitalsNeeded: []},\n    \"intv-ventilation-technique-bag-valve-mask\": {intvStatusNeeded: false, vitalsNeeded: [\"R\", \"Spo2\", \"BP\", \"Skin\" ]},\n    \"intv-sedation-assisted-intubation\": {intvStatusNeeded: false, vitalsNeeded: [\"R\", \"Spo2\", \"BP\", \"Skin\"]},  \n    //\"\": {intvStatusNeeded: true, vitalsNeeded: []},  \n    //\"\": {intvStatusNeeded: true, vitalsNeeded: []},\n    //test cases for now.  First 3 are likely to become relevant for scenarios like M2CA\n    \"intv-control-severe-bleeding-technique-direct-pressure\": {intvStatusNeeded: true, vitalsNeeded: []},\n    \"intv-control-severe-bleeding-technique-tourniquet\": {intvStatusNeeded: true, vitalsNeeded: []},\n    \"intv-control-severe-bleeding-technique-2nd-tourniquet\": {intvStatusNeeded: true, vitalsNeeded: []}, \n    //\"intv-control-shock-technique-administer-iv-boluses\": {intvStatusNeeded: false, vitalsNeeded: [\"BP\"]},\n        \n    }\n\n","import { getPhaseStatus, pushNew} from \"./debriefingUtils\"\nimport {leafStatusList, M2CA_PhaseIE, SC8CP_PhaseIE} from \"@meddbriefer/feedback-data\"\n\nlet allAssessResults = []\nlet allProblemResults = []\n\n\n\nconst getEntriesUnderHeader = (headerID,events,level,populate) => {\n    let header = mergeHeaderStatuses(headerID,events)\n    if (!!header) { \n        let results = [header]\n        let itemIDs = []\n        let filtered = []\n        if (populate){\n            let eventItems\n            if (level === 2){\n                eventItems = events.filter(e => (e.inPhase === headerID && e.type !== \"header\"))}\n            if (level === 1){\n                eventItems = events.filter (e => (e.phaseID === header.id && e.type === \"header\" && e.subtype === \"assessmentSubHeader\"))\n                //need to filter out duplicate subphases because may be some in the original events list\n                for (const item of eventItems){\n                    if (!itemIDs.includes(item.id)){\n                        itemIDs.push(item.id)\n                        filtered.push(item)}   \n                    }\n                eventItems = filtered\n                }\n            results = results.concat(eventItems)}\n       return results}\n    else {return false}\n }\n\n//merges header for a phase or subphase that is temporally split\nconst mergeHeaderStatuses = (headerID, events) => {\n    let overallStatus = \"unk\"\n    let headerStatuses = []\n    let headerItems = events.filter(e => e.type === \"header\" && e.id === headerID)\n    let header = headerItems[0]    \n    for (const item of headerItems){\n        //pushNew(item.phaseOrderStatus, headerStatuses)\n        pushNew(item.status, headerStatuses)}\n    if (headerStatuses.length > 0) {\n        if (headerStatuses.length === 1){overallStatus = headerStatuses[0]}\n        else {overallStatus = \"errors\"}  //must be all good or all absent for either of those to hold\n    }\n    if (!!header) {header.status = overallStatus}\n    return header \n}\n\n    // after phaseOrderStatus updated need to add that result to subphases status value\nconst updateTopHeaders = (summary) => {\n    let statuses = [\"good\"]\n    let newStatus\n    // eslint-disable-next-line no-unused-vars\n    for (const [key, entry] of Object.entries(summary)) {\n        if (entry[0].subtype === \"assessmentHeader\" && entry[0].status === \"good\") {\n            for (const item of entry.slice(1)) {\n                if (!!item.phaseOrderStatus){\n                    pushNew(item.phaseOrderStatus, statuses)}\n            }\n            if (statuses.length === 1) { newStatus = statuses[0] }\n            else { newStatus = \"errors\" }\n            if (!!newStatus){entry[0].status = newStatus}\n        }\n    }\n}\n\nfunction translateEvent(event) {\n    if ([\"irrelevant\", \"unnecessary\"].includes(event.status)) {\n        return {}}\n    else {\n        let newEvent = {}\n        //regularize some field names across headers and checklist events\n        if (event.labelID) {\n            newEvent.id = event.labelID}\n        else { newEvent.id = event.id }\n        if (event.type === \"header\") {\n            newEvent.subtype = event.id}\n        if (!!event.expertPhase) {\n            newEvent.inPhase = event.expertPhase}\n\n        //now copy over these fields\n        [\"label\", \"status\", \"phaseOrderStatus\", \"phase\", \"subPhase\", \"labelID\", \"phaseID\", \"probLabel\", \"answerCorrect\", \"answerDetails\", \"timestamp\", \"type\"].forEach(fld => {\n            if (!!event[fld]) {\n                newEvent[fld] = event[fld]}\n        })\n\n        //regularize status values in the case of good and absent\n        //did not regularize status values for errors yet, not sure if\n        //the details matter to condition 2\n        if (leafStatusList[\"good\"].includes(newEvent.status)) {\n            newEvent.status = \"good\"}\n        if (leafStatusList[\"absent\"].includes(newEvent.status)) {\n            newEvent.status = \"absent\"}\n        return newEvent\n    }\n}\n\n    \nexport const summarizeAnalysis = (finalActions, problems, requiredPhaseAndSubPhases, requiredPhaseNames, constraintsViolated) => {\n    allAssessResults = []\n    allProblemResults = []\n    let hierAssessResults = {}\n    let hierProblemResults = {}\n    finalActions.forEach(event => {\n        if (event.type !== \"intervention\" && event.type !== \"answer\"){\n            allAssessResults.push(translateEvent(event))}\n        else {allProblemResults.push(translateEvent(event))}\n\n    }) \n    problems.forEach(prob => {\n        //let intvHeaderIndex = 1\n        let entries = allProblemResults.filter(e => (e.probLabel === prob.probLabel && e.type !== \"header\"))\n        let statuses = entries.map(e => e.status)\n        let status = getPhaseStatus(statuses)\n        let headerObject = {\n            \"id\": prob.probLabel,\n            \"probLabel\": prob.probLabel,\n            \"status\": status,\n            \"phaseOrderStatus\": \"good\",\n            \"subtype\": \"interventionHeader\",\n            \"type\": \"header\"\n        //    \"numericalID\": intvHeaderIndex++/2000,\n        //    \"displayColor\": \"green\",\n        //    \"why\": \"\",\n        //    \"protocol\": \"\"\n        };\n        if (entries){\n            hierProblemResults[prob.probLabel] = [headerObject].concat(entries)}\n\n    })\n\n    let subLevel = requiredPhaseAndSubPhases\n    let topLevel = requiredPhaseNames.filter(e => !subLevel.includes(e))\n    \n    //need to update status in headers for lower level first since those\n    //values will percolate upwards\n\n    subLevel.forEach(headerID  => {\n        let entries = getEntriesUnderHeader(headerID,allAssessResults,2,true)\n        //console.log(\"header = \", header, \"entries = \", entries)\n        if (entries){\n            hierAssessResults[headerID] = entries}})\n\n    topLevel.forEach(headerID => {\n        let entries = getEntriesUnderHeader(headerID,allAssessResults,1,true)\n        if (entries){\n            hierAssessResults[headerID] = entries}})\n        \n            \n    // store phase level contraint feedback at the header level for condition 2 \n    // (Note that for condition 1 it was stored during the analysis at the first\n    // event entry for a phase and is prefaced by misOrderedPhase in status so that\n    // it alone won't count as an error later for condition 2)\n    let entryToModify \n    let origAction\n    let section\n    let actions = {\n        ...hierAssessResults,\n        ...hierProblemResults}\n    constraintsViolated.forEach(constraint => {\n        origAction = finalActions.filter(e => ((!!e.labelID && e.labelID === constraint.arg1.id) || (e.id === constraint.arg1.id)))[0]\n\n        if (origAction.type === \"header\"){\n            section = actions[origAction.labelID]\n            entryToModify = section[0]}\n        else {\n            if (origAction.type === \"intervention\"){\n                section = actions[origAction.probLabel]\n            }\n            if (!section){\n                section = actions[origAction.workingPhase]} \n            entryToModify = section.filter(e => e.id === constraint.arg1.id)[0]\n        }\n        if (!!entryToModify){\n            if (constraint.type === \"phase\"){\n                entryToModify.phaseOrderStatus = \"misOrdered\"\n                if (!entryToModify.arg2){\n                    entryToModify.arg2 = [constraint.arg2.id]}\n                else {entryToModify.arg2 = entryToModify.arg2.concat([constraint.arg2.id])}}\n            else{\n                if (!entryToModify.arg2){\n                    entryToModify.arg2 = [constraint.arg2.id]}\n                else {entryToModify.arg2 = entryToModify.arg2.concat([constraint.arg2.id])}}}\n    })\n    updateTopHeaders(hierAssessResults)\n    let topLevelSummary = summarize_topLevel(hierAssessResults, hierProblemResults)\n\n    console.log(\"top-level-analysis: \", topLevelSummary)\n\n    return [hierAssessResults, hierProblemResults, topLevelSummary]\n\n}\n\nexport let c2FB = {}\nconst C2_FIELDS = [\"id\", \"feedbackAbsent\", \"feedbackOutOfOrder\", \"feedbackErrors\"]\nlet topHier\nlet level2Hier\nlet scenarios =\n{\"M2CA\": M2CA_PhaseIE,\n\"SC8CP\": SC8CP_PhaseIE}\n\nfunction  storeLeafActions (actions) {\n    actions.forEach(action => {\n        if (action.subActions.length === 0){\n        let newAction = {}\n        C2_FIELDS.forEach(fldName => {\n            if (!!action[fldName]) {\n                newAction[fldName] = action[fldName];\n            }\n        })\n        c2FB[action.id] = newAction\n}})}\n\n//called during initialization in analyseEvents\n//changes with each scenario what data structure should be parsed\nexport function get2HierLevelIDs (scen){\n  topHier = []\n  level2Hier = []\n  let phaseIE = scenarios[scen.name]\n  let top = phaseIE.Action\n  for (let action of top.subActions){\n      topHier.push(action.id)\n      storeLeafActions(action.subActions)\n      for (let subaction of action.subActions) {\n          let subActions = subaction.subActions\n          if (subActions.length !== 0) { \n              level2Hier.push(subaction.id) \n              storeLeafActions(subActions)}\n      }}\n          \n  console.log(\"c2FB\", c2FB)\n}\n\n\n\nfunction summarize_topLevel(assess,probs) {\n    let c2Input = {}\n    let top = []\n    let statuses = []\n    let status\n    let val\n    let table = {\n        ...assess,\n        ...probs}\n    let headerObject = {\n        \"id\": \"top\",\n        \"probLabel\": \"top\",\n        \"status\": \"\",\n        \"phaseOrderStatus\": \"good\",\n        \"type\": \"header\"}\n    top.push(headerObject)\n    topHier.forEach(key => {\n        val = table[key]\n        if (!!val){\n            c2Input[key] = val\n            pushNew(val[0].status, statuses)\n            top.push(val[0])}\n    })\n    if (statuses.length === 1) { status = statuses[0] }\n            else { status = \"errors\" }\n    top[0].status = status\n    level2Hier.forEach(key => {\n        val = table[key]\n        if (!!val){\n            c2Input[key] = val}\n    })\n    c2Input[\"top\"] = top\n\nreturn c2Input\n}","/* Bogus data for testing Collin's algorithm\nI made the scenario M2CA since that scenario has some corresponding log analysis files that can be used\nfor testing\nIds need to be added to correspond to those in the analysis log*/\n\nexport const M2CA_PhaseIE = {\n    Action: {\n      id: \"top\",\n      label: \"Top most node -level 0\",\n      feedbackAbsent: \"Nothing done. Start scenario again.\", /*feedback if the action was not performed*/\n      feedbackOutOfOrder: \"\", /*feedback if the action was done late (e.g., if the action is Scene Size-up \n        and it was done after Primary Survey)*/\n      feedbackError: \"All wrong. Please start scenario again.\", /*feedback if the action was performed incorrectly (e.g. wrong Ventilation rate)*/\n      subActions: [ /*array with the corresponding subactions (to form the tree)*/\n        {\n          id: \"scene-size-up\",\n          label: \"Child1 -level1\",\n          feedbackAbsent: \"absent -Child1 level 1\",\n          feedbackOutOfOrder: \"late -Child1 level 1\",\n          feedbackErrors: \"wrong -Child1 level 1\",\n          subActions: [\n            {\n                id: \"assess-scene-safety\",\n                label: \"Child1 of Child1 -level 2\",\n                feedbackAbsent: \"absent -Child1 of Child1 -level2\",\n                feedbackOutOfOrder: \"late -Child1 of Child1 -level2\",\n                feedbackErrors: \"wrong -Child1 of Child1 -level2\",\n                subActions: [],\n                examine: \"N\",\n                prompts: \"\",\n              },\n              {\n                id: \"required-action-BSI\",\n                label: \"Child2 of Child1 -level 2\",\n                feedbackAbsent: \"absent -Child2 of Child1 -level 2\",\n                feedbackOutOfOrder: \"late -Child2 of Child1 -level 2\",\n                feedbackErrors: \"wrong -Child2 of Child1 -level 2\",\n                subActions: [],\n                examine: \"Y\",\n                prompts: \"prompts -Child2 of Child1 -level2\",\n              },\n          ],\n          examine: \"Y\",\n          prompts: \"prompts -Child1 level 1\",\n        },\n        {\n          id: \"primary-survey\",\n          label: \"Child 2 -level1\",\n          feedbackAbsent: \"absent -Child 2 level1\",\n          feedbackOutOfOrder: \"late -Child 2 level1\",\n          feedbackErrors: \"wrong -Child 2 level1\",\n          subActions: [\n            {\n                id: \"general-impression\",\n                label: \"Child1 of Child2 -level2\",\n                feedbackAbsent: \"absent -Child1 of Child2 -level2\",\n                feedbackOutOfOrder: \"late -Child1 of Child2 -level2\",\n                feedbackErrors: \"wrong -Child1 of Child2 -level2\",\n                subActions: [],\n                examine: \"N\",\n                prompts: \"\",\n              },\n              {\n                id: \"airway\",\n                label: \"Child2 of child2 -level2\",\n                feedbackAbsent: \"absent -Child2 of Child2 -level2\",\n                feedbackOutOfOrder: \"late -Child2 of Child2 -level2\",\n                feedbackErrors: \"wrong -Child2 of Child2 -level2\",\n                subActions: [\n                    {\n                        id: \"airway-is-open\",\n                        label: \"Child1 of (Child2 of Child2) -level3\",\n                        feedbackAbsent: \"absent -Child1 of (Child2 of Child2) -level3\",\n                        feedbackOutOfOrder: \"late -Child1 of (Child2 of Child2) -level3\",\n                        feedbackErrors: \"wrong -Child1 of (Child2 of Child2) -level3\",\n                        subActions: [],\n                        examine: \"N\",\n                        prompts: \"\",\n                      },\n                      {\n                        id: \"airway-is-clear-substances\",\n                        label: \"Child2 of (Child2 of Child2) -level3\",\n                        feedbackAbsent: \"absent -Child2 of (Child2 of Child2) -level3\",\n                        feedbackOutOfOrder: \"late -Child2 of (Child2 of Child2) -level3\",\n                        feedbackErrors: \"wrong -Child2 of (Child2 of Child2) -level3\",\n                        subActions: [],\n                        examine: \"Y\",\n                        prompts: \"prompts -Child2 of (Child2 of Child2) -level3\",\n                      }\n                ],\n                examine: \"N\",\n                prompts: \"\",\n              },\n              {\n                id: \"breathing\",\n                label: \"Child3 of Child2 -level2\",\n                feedbackAbsent: \"absent -Child3 of Child2 -level2\",\n                feedbackOutOfOrder: \"late -Child3 of Child2 -level2\",\n                feedbackErrors: \"wrong -Child3 of Child2 -level2\",\n                subActions: [],\n                examine: \"N\",\n                prompts: \"\",\n              } \n          ],\n          examine: \"N\",\n          prompts: \"\",\n        },\n        {\n          id: \"Manage a potential head and/or spinal injury\",\n          label: \"Child 3 -level1\",\n          feedbackAbsent: \"absent -Child 3 level1\",\n          feedbackOutOfOrder: \"late -Child 3 level1\",\n          feedbackErrors: \"wrong -Child 3 level1\",\n          subActions: [\n            {\n              id: \"intv-spinal-immobilization-technique-cervical-collar\",\n              label: \"Cervical Collar\",\n              feedbackAbsent: \"absent - cervical collar\",\n              feedbackOutOfOrder: \"late - cervical collar\",\n              feedbackErrors: \"wrong - cervical collar\",\n              subActions: [],\n              examine: \"Y\",\n              prompts: \"prompts - cervical collar\",\n            }\n\n\n          ],\n          examine: \"N\",\n          prompts: \"\",\n        },\n        {\n          id: \"ongoing-mgmt-plan\",\n          label: \"Child 4 -level1\",\n          feedbackAbsent: \"absent -Child 4 level1\",\n          feedbackOutOfOrder: \"late -Child 4 level1\",\n          feedbackErrors: \"wrong -Child 4 level1\",\n          subActions: [\n            {\n                id: \"reassess-vital-signs\",\n                label: \"Child1 of Child4 -level 2\",\n                feedbackAbsent: \"absent -Child1 of Child4 -level2\",\n                feedbackOutOfOrder: \"late -Child1 of Child4 -level2\",\n                feedbackErrors: \"wrong -Child1 of Child4 -level2\",\n                subActions: [],\n                examine: \"Y\",\n                prompts: \"prompts -Child1 of Child4 -level2\",\n              },\n              {\n                id: \"repeat-primary-survey\",\n                label: \"Child2 of Child4 -level 2\",\n                feedbackAbsent: \"absent -Child2 of Child4 -level 2\",\n                feedbackOutOfOrder: \"late -Child2 of Child4 -level 2\",\n                feedbackErrors: \"wrong -Child2 of Child4 -level 2\",\n                subActions: [],\n                examine: \"N\",\n                prompts: \"\",\n              },  \n          ],\n          examine: \"Y\",\n          prompts: \"prompts -Child4 level1\",\n        },\n      ],\n      examine: \"N\", /*Boolean that says whether the action needs to be examined*/\n      prompts: \"\" /*prompts to hint the student as to how to reflect on the action*/\n    },\n  }","/* Data for phase scenario SC8CP for phase IE \nThis data structure holds all the information to create the slides to present during the IE phase.\nIt mirrors the tree structure that is presented in the Excel file. All nodes in the tree are called actions whether \nthey are assessments or interventions. Subactions are the children of the actions in the tree.\nFields:\nid: identifies the action-node in the tree. Since there could be more than one appropriate action for a node \n(e.g., \"insert a basic airway adjunct\" can be fullfilled by intv-oropharyngeal-airway or intv-nasopharyngeal-airway)\nthe filed id will be an array of text ids.\nlabel: text for the action as it will appear on the slide\ntype: indicates whether the action is Required, Contraindicated, Unnecessary or Irrelevant.\n    Required, it will be listed in the left side of the slide so that students are asked if they performed it.\n    Contraindicated: it will be listed on the right side under a list of contraindicated actions that the student performed\n    accompanied by the feedback on the feedbackErrors field.\n    Unnecessary: it will be listed on the right side under a list of unnecessary actions that the student performed\n    accompanied by the feedback on the feedbackErrors field.\n    Irrelevent: it will be listed on the right side under a list of irrelevant actions that the student performed\n    accompanied by the feedback on the feedbackErrors field.\nfeedbackAbsent: feedback given if the action was no performed\nfeedbackOutOfOrder: feedback given if the action was done late (e.g., if the action is Scene size-up and it was done \n    after Primary Survey)\nfeedbackError: feedback if the action was performed incorrectly (e.g., wrong ventilation rate)\nexamine: boolean to indicate if this Action needs to be examined (phase E)\nprompts: prompts to be included in question headers in phase E, to hint on how to reflect\nsubActions: array with the corresponding subactions (to form the tree)\n*/\n\nexport const SC8CP_PhaseIE = {\n    Action: {\n      id: [],\n      label: \"fully assess and manage the patient in this scenario\", /* the way it will appear on the slide */\n      type: \"Required\", /*indicates whether the action was Required, Contraindicated, Unnecessary, or Irrelevant\" */\n      feedbackAbsent: \"Your log indicates you didn't complete any of these assessment or managment goal. Please restart the scenario and try again\", /*feedback if the action was not performed*/\n      feedbackOutOfOrder: \"\", /*feedback if the action was done late (e.g., if the action is Scene Size-up \n        and it was done after Primary Survey)*/\n      feedbackError: \"\", /*feedback if the action was performed incorrectly (e.g. wrong Ventilation rate)*/\n      examine: \"N\", /* boolean to indicate if this Action needs to be examined (phase E) */\n      prompts: \"\", /* prompts to the included in question in phase E to hint on how to reflect */\n      subActions: [ /*array with the corresponding subactions (to form the tree)*/\n        {\n          id: [\"scene-size-up\"],\n          label: \"Put on BSI and do a complete Scene Size-up before entering the scene\",\n          type: \"Required\",\n          feedbackAbsent: \"Your first steps should have been to don your protective wear, including eye protection, and to ensure the scene is safe. You cannot assist a patient if you are not safe yourself.  *Your scene size up gives you a big-picture view of what is going on before you even begin examining the patient and includes determining the mechanism of injury and number of patients, requesting additional help if necessary, and considering stabilization of the spine.  *In this case, you would have learned that this is a near drowning incident, which should have prompted you to think about potential head or spinal injury, and the need for rescue breaths\",\n          feedbackOutOfOrder: \"Your first steps should have been to don your protective wear, including eye protection, and to ensure the scene is safe. You cannot assist a patient if you are not safe yourself. Your scene size up also gives you a big-picture view of what is going on before you even begin examining the patient. This includes determining the mechanism of injury and number of patients, requesting additional help if necessary, and considering stabilization of spine.\",\n          feedbackErrors: \"\",\n          examine: \"\",\n          prompts: \"\",\n          subActions: [\n            {\n                id: [\"required-action-BSI\"],\n                label: \"Apply BSI\",\n                type: \"Required\",\n                feedbackAbsent: \"Your first steps should have been to don your protective wear, including eye protection, and to ensure the scene is safe. You cannot assist a patient if you are not safe yourself.\",\n                feedbackOutOfOrder: \"\",\n                feedbackErrors: \"\",\n                examine: \"\",\n                prompts: \"\",\n                subActions: [],\n              },\n              {\n                id: [\"assess-scene-safety\"],\n                label: \"Determine the scene/situation is safe\",\n                type: \"Required\",\n                feedbackAbsent: \"Your first steps should have been to don your protective wear, including eye protection, and to ensure the scene is safe. You cannot assist a patient if you are not safe yourself.\",\n                feedbackOutOfOrder: \"\",\n                feedbackErrors: \"\",\n                examine: \"\",\n                prompts: \"\",\n                subActions: [],\n              },\n              {\n                id: [\"assess-injury-mechanism\"],\n                label: \"Determine the mechanism of injury (MOI) or nature of illness (NOI)\",\n                type: \"Required\",\n                feedbackAbsent: \"Knowing what caused the patient's injury or illness can allow you to start developing a plan of action before you even assess your patient. *By determining the mechanism of injury, you would have learned that this is a near drowning incident, which should have prompted you to think about potential head or spinal injury, and the need for rescue breaths and/or CPR.\",\n                feedbackOutOfOrder: \"\",\n                feedbackErrors: \"\",\n                examine: \"\",\n                prompts: \"\",\n                subActions: [],\n              },\n              {\n                id: [\"assess-num-patients\"],\n                label: \"Determine the number of patients\",\n                type: \"Required\",\n                feedbackAbsent: \"Usually you will have one patient, but if there is more than one you will need to plan accordingly.\",\n                feedbackOutOfOrder: \"\",\n                feedbackErrors: \"\",\n                examine: \"\",\n                prompts: \"\",\n                subActions: [],\n              },\n              {\n                id: [\"required-action-requests-additional-help\"],\n                label: \"Request additional help if necessary\",\n                type: \"Required\",\n                feedbackAbsent: \"Consider the need for extra help based on number of patients, mechanism of injury, and your patient's status. *Although police and fire personnel were already on scene, you should have considered the need for additional ALS support.\",\n                feedbackOutOfOrder: \"\",\n                feedbackErrors: \"\",\n                examine: \"\",\n                prompts: \"\",\n                subActions: [],\n              },\n              {\n                id: [\"required-action-considers-stabilize-spine\"],\n                label: \"Consider stabilization of spine\",\n                type: \"Required\",\n                feedbackAbsent: \"All trauma patients are at risk for spinal injury, including drowning or near drowning patients, which could be caused by a diving accident. Take this into consideration before initial contact with the patient to prevent unintentional injury.\",\n                feedbackOutOfOrder: \"\",\n                feedbackErrors: \"\",\n                examine: \"\",\n                prompts: \"\",\n                subActions: [],\n              },\n          ],\n        },\n        {\n          id: [\"primary-survey\"],\n          label: \"Perform a Primary Survey and manage all identified life threats\",\n          type: \"Required\",\n          feedbackAbsent: \"The primary survey is an assessment of mental status, life-threats, and the patient's ABCs. It is where you will identify and address the patient's most serious injuries. *In this case, the Primary Survey would have revealed an unconscious patient with respiratory failure and a weak and slow pulse.\",\n          feedbackOutOfOrder: \"You should have started your Primary Survey after the Scene Size-up and completed it before starting the Secondary Survey. Only interrupt your assessment to control these life-threats: (1) compromised airway, (2) tension pneumothorax, (3) severe hemorrhage, and (4) cardiac arrest. Problems identifed during the primary survey can be life threatening, and if they are not adequately addressed, your patient may deteriorate as you continue on with your examination.\",\n          feedbackErrors: \"\",\n          examine: \"\",\n          prompts: \"\",\n          subActions: [\n            {\n                id: [\"general-impression\"],\n                label: \"Conduct an Initial Assessment\",\n                type: \"Required\",\n                feedbackAbsent: \"You should have performed an Initial Assessment: gathered a general impression, identified any apparent life threats, and determined your patient's level of consciousness.  Your Initial Assessment  would have revealed a patient who is unconscious.\",\n                feedbackOutOfOrder: \"While you may be tempted to jump straight into your ABCs, apparent life threats (ie. uncontrolled bleeding) should be addressed first, as they can cause a patient to deteriorate quickly. Also, be sure to assess the patient's mental status, as an unconscious patient will need a pulse check first, to ensure he or she does not require CPR.\",\n                feedbackErrors: \"\",\n                examine: \"\",\n                prompts: \"\",\n                subActions: [\n                    {\n                        id: [\"assess-patient-condition\"],\n                        label: \"State or request a general impression\",\n                        type: \"Required\",\n                        feedbackAbsent: \"Your general impression allows you to start developing a plan of action before you even assess your patient. *In this case, your general impression would have been of a child who nearly drowned.\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                      {\n                        id: [\"assess-loc\"],\n                        label: \"Assess the patient's level of consciousness\",\n                        type: \"Required\",\n                        feedbackAbsent: \"The patient's level of consciousness alters how you progress through your assessment. *This patient was unresponsive with sluggish pupils.  This should have prompted you to consider him a critical patient, check his pulse prior to airway and breathing, and plan for urgent transfer to a nearby trauma center.\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                      {\n                        id: [\"assess-life-threats\"],\n                        label: \"Determine the chief complaint/apparent life-threats\",\n                        type: \"Required\",\n                        feedbackAbsent: \"If you had determined apparent life threats, you would have noticed that the patient was unresponsive, indicating a critical patient.\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                ],\n              },\n              {\n                id: [\"intv-cat-spinal-motion-restriction\"],\n                label: \"Manage a potential head or spinal injury\",\n                type: \"Required\",\n                feedbackAbsent: \"\",\n                feedbackOutOfOrder: \"Managing the cervical spine is one of the first things you should do for any trauma patient, as you must ensure you do not cause any further injury during the remainder of your assessment and management.\",\n                feedbackErrors: \"\",\n                examine: \"\",\n                prompts: \"\",\n                subActions: [\n                    {\n                        id: [\"intv-spinal-immobilization-technique-manual-c-spine\"],\n                        label: \"Apply (or direct a partner to apply) manual c-spine stabilization\",\n                        type: \"Required\",\n                        feedbackAbsent: \"\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                      {\n                        id: [\"intv-spinal-immobilization-technique-cervical-collar\"],\n                        label: \"Apply an appropriately sized cervical collar\",\n                        type: \"Required\",\n                        feedbackAbsent: \"\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                ],\n              },\n              {\n                id: [\"airway\"],\n                label: \"Assess the patient's airway\",\n                type: \"Required\",\n                feedbackAbsent: \"Be sure to assess the airway for patency and intact physical structures. *You would have found this patient's airway to be partially obstructed with vomit and water, indicating the need for suctioning.\",\n                feedbackOutOfOrder: \"If your patient is conscious, you should examine the airway before breathing and circulation. If a patient is unconscious, you should assess the pulse first to evaluate for possible cardiac arrest, then go through your ABCs.\",\n                feedbackErrors: \"\",\n                examine: \"\",\n                prompts: \"\",\n                subActions: [\n                    {\n                        id: [\"intv-open-airway-method-modified-jaw-thrust\"],\n                        label: \"Open the patient's airway with a jaw thrust maneuver\",\n                        type: \"Required\",\n                        feedbackAbsent: \"\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                      {\n                        id: [\"airway-is-open\"],\n                        label: \"Check if the airway is patent\",\n                        type: \"Required\",\n                        feedbackAbsent: \"The first step of your airway assessment is to see if the patient's airway is open. If the patient is speaking normally, it is open. Signs like stridor or gasping may indicate an airway obstruction. *This patient's airway was partially obstructed with vomit and water, which should have been suctioned.\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                      {\n                        id: [\"airway-has-intact-physical-structures\"],\n                        label: \"Check if the airway has intact physical structures\",\n                        type: \"Required\",\n                        feedbackAbsent: \"Be sure to look for injuries such as gun-shot wounds or facial fractures, as these may affect what basic or advanced airways you can use.\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                ],\n              },\n              {\n                id: [\"intv-cat-airway\"],\n                label: \"Manage the patient\\’s compromised airway\",\n                type: \"Required\",\n                feedbackAbsent: \"\",\n                feedbackOutOfOrder: \"You should identify any airway obstructions, including blood, vomiting, and secretions while checking the patency of your patient's airway. Any obstruction should be addressed at that time.\",\n                feedbackErrors: \"\",\n                examine: \"\",\n                prompts: \"\",\n                subActions: [\n                    {\n                        id: [\"intv-airway-patency-technique-suction-airway\"],\n                        label: \"Suction the patient's mouth using a Yankauer (rigid)  or Long multi-use catheter\",\n                        type: \"Required\",\n                        feedbackAbsent: \"\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                      /*{\n                        id: [\"\"],\n                        label: \"Reassess airway patency\",\n                        type: \"Required\",\n                        feedbackAbsent: \"\",\n                        feedbackOutOfOrder: \"After suctioning the airway, re-examine the patient to ensure the airway remains patent. For example, if the patient has an active bleed, you may notice blood re-accumulating in the airway, which may change your management.\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },*/\n                      {\n                        id: [\"intv-oropharyngeal-airway\", \"ntv-nasopharyngeal-airway \"],\n                        label: \"Insert a basic airway adjunct\",\n                        type: \"Required\",\n                        feedbackAbsent: \"\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                      /*{\n                        id: [\"\"],\n                        label: \"Confirm that the patient accepted the airway adjunct\",\n                        type: \"Required\",\n                        feedbackAbsent: \"\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },*/\n                      {\n                        id: [\"intv-orotracheal-intubation\"],\n                        label: \"Perform orotracheal intubation using an appropriately sized tube, inserted at the correct depth\",\n                        type: \"Required\",\n                        feedbackAbsent: \"\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                      /*{\n                        id: [\"\"],\n                        label: \"Confirm tube placement by checking ETCO2 capnography, listening for bilateral lung sounds and absence of gastric sounds\",\n                        type: \"Required\",\n                        feedbackAbsent: \"\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },*/\n                ],\n              },\n              {\n                id: [\"breathing\"],\n                label: \"Assess the patient's breathing\",\n                type: \"Required\",\n                feedbackAbsent: \"After assessing the patient's airway, assess their breathing by listening for breath sounds and observing their respiratory rate, rhythm, and effort. *You would have found bradypnea and heard gurgling.  This should have prompted you to apply BVM ventilation or other ventilatory support.\",\n                feedbackOutOfOrder: \"\",\n                feedbackErrors: \"\",\n                examine: \"\",\n                prompts: \"\",\n                subActions: [\n                    {\n                        id: [\"breathing-rate-rhythm-quality\"],\n                        label: \"Rate, rhythm, and quality\",\n                        type: \"Required\",\n                        feedbackAbsent: \"A significantly elevated or depressed respiratory rate can suggest impending respiratory failure. *This patient's bradypnea suggests the need for ventilatory support, not just oxygenation.\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                ],\n              },\n              {\n                id: [\"Manage indadequate breathing\"],\n                label: \"Manage inadequate breathing\",\n                type: \"Required\",\n                feedbackAbsent: \"\",\n                feedbackOutOfOrder: \"Problems with ventilation and oxygenation are life threatening and should be addressed before you move on to your secondary survey. Repeat your exam and check vitals to ensure your interventions have worked as you expected. If not, your patient may deteriorate as you continue on with your examination.\",\n                feedbackErrors: \"\",\n                examine: \"\",\n                prompts: \"\",\n                subActions: [\n                    {\n                        id: [\"intv-ventilation-technique-bag-valve-mask\"],\n                        label: \"Ventilate the patient at a rate of 20 BPM\",\n                        type: \"\",\n                        feedbackAbsent: \"\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                      {\n                        id: [\"***\"],\n                        label: \"Titrate oxygen at a flow rate of 15 L/min to a target SpO2 > 90%\",\n                        type: \"\",\n                        feedbackAbsent: \"\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                      /*{\n                        id: [\"\"],\n                        label: \"Check that breathing interventions are working, by re-checking relevant vitals\",\n                        type: \"\",\n                        feedbackAbsent: \"\",\n                        feedbackOutOfOrder: \"Problems with ventilation and oxygenation are life threatening and should be addressed before you move on to your secondary survey. Repeat your exam and check vitals (SpO2) to ensure your interventions have worked as you expected. If not, your patient may deteriorate as you continue on with your examination.\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },*/\n                ],\n              },\n              {\n                id: [\"circulation\"],\n                label: \"Assess the patient's circulation\",\n                type: \"Required\",\n                feedbackAbsent: \"Evaluate the patient's pulse and skin to assess the patient for shock.  Be sure to also perform a gross blood sweep. *You would have noticed that your patient had weak slow pulses and dry cyanotic skin, indicating impending respiratory failure.\",\n                feedbackOutOfOrder: \"All unconscious patients should have a pulse check before starting the ABCs. If the patient is pulseless, you will start high-quality CPR immediately.\",\n                feedbackErrors: \"\",\n                examine: \"\",\n                prompts: \"\",\n                subActions: [\n                    {\n                        id: [\"pulse-checks\"],\n                        label: \"Pulse rate, rhythm, and quality\",\n                        type: \"Required\",\n                        feedbackAbsent: \"\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                      {\n                        id: [\"checks-skin\"],\n                        label: \"Skin color, temperature, and condition\",\n                        type: \"Required\",\n                        feedbackAbsent: \"\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                      {\n                        id: [\"assess-major-bleeding\"],\n                        label: \"Perform a gross blood sweep\",\n                        type: \"Required\",\n                        feedbackAbsent: \"A gross blood sweep will help you identify any life-threatening bleeding you may have missed earlier when forming your general impression.\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                ],\n              },\n              {\n                id: [\"transport-decision\"],\n                label: \"Make appropriate initial transport decisions\",\n                type: \"Required\",\n                feedbackAbsent: \"Your ABCs and evaluation for life threats and level of consciousness will dictate where you transfer your patient. *This patient was critically ill so you should have decided to transport him to the level 1 pediatric  trauma center.\",\n                feedbackOutOfOrder: \"Transport decisions should be made before beginning your secondary survey based on the information you have gathered thus far. This is especially important if you are calling for an air ambulance to account for the time it takes for them to arrive.\",\n                feedbackErrors: \"\",\n                examine: \"\",\n                prompts: \"\",\n                subActions: [\n                    {\n                        id: [\"decision-is-load-and-go\"],\n                        label: \"Determine that this is a critical patient\",\n                        type: \"Required\",\n                        feedbackAbsent: \"\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                      {\n                        id: [\"ntv-transport\"],\n                        label: \"Decide to transport the patient to a Level 1 pediatric trauma center\",\n                        type: \"Required\",\n                        feedbackAbsent: \"\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                      {\n                        id: [\"intv-transport\"],\n                        label: \"Decide to transport the patient by air ambulance\",\n                        type: \"Required\",\n                        feedbackAbsent: \"\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                ],\n              },\n              {\n                id: [\"ints-call-for-helicopter\"],\n                label: \"Call for an air ambulance (if chosen transport method)\",\n                type: \"Required\",\n                feedbackAbsent: \"\",\n                feedbackOutOfOrder: \"\",\n                feedbackErrors: \"\",\n                examine: \"\",\n                prompts: \"\",\n                subActions: [],\n              },\n              {\n                id: [\"trauma-expose\"],\n                label: \"Trauma expose the patient\",\n                type: \"Required\",\n                feedbackAbsent: \"Without exposing your patient, your head-to-toe exam may be hindered and you could miss an important exam finding.\",\n                feedbackOutOfOrder: \"It is important to trauma expose your patient to ensure that your secondary survey can be performed efficiently.\",\n                feedbackErrors: \"\",\n                examine: \"\",\n                prompts: \"\",\n                subActions: [],\n              },\n          ],\n        },\n        {\n          id: [\"history-taking\"],\n          label: \"Obtain or direct a partner to obtain a patient history\",\n          type: \"Required\",\n          feedbackAbsent: \"\",\n          feedbackOutOfOrder: \"You should have obtained a set of vitals or directed a partner to do so before beginning your Secondary Survey. A patient's vital signs may prompt you to repeat parts of your Primary Assessment before moving onto the Secondary Survey.\",\n          feedbackErrors: \"\",\n          examine: \"\",\n          prompts: \"\",\n          subActions: [\n            {\n                id: [\"required-action-obtains-vitals\"],\n                label: \"Baseline vital signs\",\n                type: \"Required\",\n                feedbackAbsent: \"Baseline vitals are critical; they will help you assess, manage, and continue to monitor your patient. *You would have found that this patient was bradycardic, bradypnic, hypoxic, and hypotensive, alerting you to a critical patient who needed prompt intervention.\",\n                feedbackOutOfOrder: \"\",\n                feedbackErrors: \"\",\n                examine: \"\",\n                prompts: \"\",\n                subActions: [],\n              },\n              {\n                id: [\"required-action-attempt-obtain-sample\"],\n                label: \"SAMPLE (if possible)\",\n                type: \"Required\",\n                feedbackAbsent: \"Take an efficient but thorough history from the baby sitter: symptoms, allergies, medications, past medical history, last oral intake, events preceding. *You would have learned that the child was left unattended on a floating mattress in the pool for 5 minutes, found underwater, and then pulled out of the pool.\",\n                feedbackOutOfOrder: \"\",\n                feedbackErrors: \"\",\n                examine: \"\",\n                prompts: \"\",\n                subActions: [],\n              },\n              {\n                id: [\"required-action-obtain-OPQRST\"],\n                label: \"OPQRST (if possible)\",\n                type: \"Required\",\n                feedbackAbsent: \"Assess the patient's pain: onset, provocation/palliation, quality, region/radiation, severity, and time. If the patient cannot tell you his or herself, you should ask a family member or other bystander for whatever information they may have.\",\n                feedbackOutOfOrder: \"\",\n                feedbackErrors: \"\",\n                examine: \"\",\n                prompts: \"\",\n                subActions: [],\n              },\n          ],\n        },\n        {\n          id: [\"secondary-assessment\"],\n          label: \"Perform a Secondary Survey (rapid trauma assessment)\",\n          type: \"Required\",\n          feedbackAbsent: \"\",\n          feedbackOutOfOrder: \"\",\n          feedbackErrors: \"\",\n          examine: \"\",\n          prompts: \"\",\n          subActions: [\n            {\n                id: [\"head\"],\n                label: \"examine the patient's head\",\n                type: \"Required\",\n                feedbackAbsent: \"\",\n                feedbackOutOfOrder: \"\",\n                feedbackErrors: \"\",\n                examine: \"\",\n                prompts: \"\",\n                subActions: [\n                    {\n                        id: [\"inspects-and-palpates-skull\"],\n                        label: \"Inspect and palpate the scalp and skull\",\n                        type: \"Required\",\n                        feedbackAbsent: \"\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                      {\n                        id: [\"assessment-inspects-facial-bones\"],\n                        label: \"Inspect and palpate the facial bones\",\n                        type: \"Required\",\n                        feedbackAbsent: \"\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                      {\n                        id: [\"inspects-eyes\"],\n                        label: \"Inspect the eyes for PERRLA and bruising (\\\"raccoon eyes\\\")\",\n                        type: \"Required\",\n                        feedbackAbsent: \"Checking for PERRLA would have revealed that  the patient's pupils were equal but sluggish, suggesting possible intracranial injury and a critically ill patient who needed rapid transfer to a trauma center. *Additionally, bruising around the eyes may be caused by basilar skull fracture.\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                      {\n                        id: [\"inspects-ears\"],\n                        label: \"Inspect the ears for blood, other fluids, and bruising (\\\"battle signs\\\")\",\n                        type: \"Required\",\n                        feedbackAbsent: \"Bleeding from the ear may be indicative of a basilar skull fracture. Bruising behind the ear suggests a basilar skull fracture (Battle's sign).\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                      {\n                        id: [\"inspects-nose\"],\n                        label: \"Inspect the nose for blood and other fluids\",\n                        type: \"Required\",\n                        feedbackAbsent: \"Clear drainage may be CSF from a basilar skull fracture.\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                      {\n                        id: [\"inspects-mouth\"],\n                        label: \"Inspect the mouth for blood, other secretions, and obstructions\",\n                        type: \"Required\",\n                        feedbackAbsent: \"During your primary survey, you should have noticed water and vomit in the patient's mouth; you should have suctioned the patient's airway.  If you had done this, at this stage the patient's airway would be clear of secretions. If you had not suctioned the airway, there would still be vomit and water in the mouth.\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                ],\n              },\n              {\n                id: [\"neck\"],\n                label: \"examine the patient's neck\",\n                type: \"Required\",\n                feedbackAbsent: \"\",\n                feedbackOutOfOrder: \"\",\n                feedbackErrors: \"\",\n                examine: \"\",\n                prompts: \"\",\n                subActions: [\n                    {\n                        id: [\"inspects-palpates-neck\"],\n                        label: \"inspect and palpate the patient's neck for tracheal deviation, JVD, step-offs and other injury\",\n                        type: \"Required\",\n                        feedbackAbsent: \"\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                ],\n              },\n              {\n                id: [\"chest\"],\n                label: \"examine the patient's chest\",\n                type: \"Required\",\n                feedbackAbsent: \"\",\n                feedbackOutOfOrder: \"\",\n                feedbackErrors: \"\",\n                examine: \"\",\n                prompts: \"\",\n                subActions: [\n                    {\n                        id: [\"assessment-shoulders\"],\n                        label: \"Inspect and palpate shoulders\",\n                        type: \"Required\",\n                        feedbackAbsent: \"\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                      {\n                        id: [\"assessment-clavicles\"],\n                        label: \"Inspect and palpates clavicles\",\n                        type: \"Required\",\n                        feedbackAbsent: \"\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                      {\n                        id: [\"inspects-palpates-anterior-thorax\"],\n                        label: \"Inspect and palpate anterior thorax for injury, crepitation, and paradoxial motion or flail segments\",\n                        type: \"Required\",\n                        feedbackAbsent: \"\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                ],\n              },\n              {\n                id: [\"abdomen-pelvis\"],\n                label: \"examine the patient's abdomen\",\n                type: \"Required\",\n                feedbackAbsent: \"\",\n                feedbackOutOfOrder: \"\",\n                feedbackErrors: \"\",\n                examine: \"\",\n                prompts: \"\",\n                subActions: [\n                    {\n                        id: [\"inspects-palpates-abdomen\"],\n                        label: \"Inspect and palpate the abdomen for injury,  distension and rigidity\",\n                        type: \"Required\",\n                        feedbackAbsent: \"\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                ],\n              },\n              {\n                id: [\"assess-pelvis\"],\n                label: \"examine the patient's pelvis\",\n                type: \"Required\",\n                feedbackAbsent: \"\",\n                feedbackOutOfOrder: \"\",\n                feedbackErrors: \"\",\n                examine: \"\",\n                prompts: \"\",\n                subActions: [\n                    {\n                        id: [\"assessment-checks-pelvis\"],\n                        label: \"Inspect and compress the pelvis\",\n                        type: \"Required\",\n                        feedbackAbsent: \"Be sure to do a thorough exam of the pevis as the pelvis can be a source of life-threatening bleeding.\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                      {\n                        id: [\"inspects-genitalia-perineum\"],\n                        label: \"Inspect the genitalia/perineum for blood, other fluids, and priapism (male)\",\n                        type: \"Required\",\n                        feedbackAbsent: \"In a male patient priaprism can indicate injury to either the spinal cord or the genitals themselves.\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                ],\n              },\n              {\n                id: [\"extremities\"],\n                label: \"examine the patient's upper and lower extremities\",\n                type: \"Required\",\n                feedbackAbsent: \"\",\n                feedbackOutOfOrder: \"\",\n                feedbackErrors: \"\",\n                examine: \"\",\n                prompts: \"\",\n                subActions: [\n                    {\n                        id: [\"inspects-palpates-right-arm\", \"inspects-palpates-left-arm\",\"inspects-palpates-right-leg\",\"inspects-palpates-left-leg\"],\n                        label: \"Inspect and palpate each extremity for injury, pulse, motor, and sensory function\",\n                        type: \"Required\",\n                        feedbackAbsent: \"If you had checked this patient's extremity pulses, you would have noticed weak extremity pulses, due to inadequate cardiac output.\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                ],\n              },\n              {\n                id: [\"posterior\"],\n                label: \"examine the patient's posterior thorax, lumbar, and buttocks\",\n                type: \"Required\",\n                feedbackAbsent: \"You will need a partner to help you roll the patient safely in order to do a thorough exam of the posterior thorax, lumbar, and buttocks.\",\n                feedbackOutOfOrder: \"\",\n                feedbackErrors: \"\",\n                examine: \"\",\n                prompts: \"\",\n                subActions: [\n                    {\n                        id: [\"inspects-palpates-posterior\"],\n                        label: \"inspect and palpate the posterior for injury, crepitation and step-offs\",\n                        type: \"Required\",\n                        feedbackAbsent: \"Crepitation suggests underlying injury. A palpable step-off suggests a fracture.\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                ],\n              },\n          ],\n        },\n        {\n          id: [\"ongoing-mgmt-plan\"],\n          label: \"Continue to reassess and manage the patient until arriving at the care facility\",\n          type: \"Required\",\n          feedbackAbsent: \"\",\n          feedbackOutOfOrder: \"\",\n          feedbackErrors: \"\",\n          examine: \"\",\n          prompts: \"\",\n          subActions: [\n            {\n                id: [\"perform ongoing management\"],\n                label: \"Perform ongoing management\",\n                type: \"Required\",\n                feedbackAbsent: \"\",\n                feedbackOutOfOrder: \"\",\n                feedbackErrors: \"\",\n                examine: \"\",\n                prompts: \"\",\n                subActions: [\n                      {\n                        id: [\"intv-transfer\"],\n                        label: \"Make appropriate transfer decisions, that is, transfer the patient to the air ambulance with a LBB on a stretcher\",\n                        type: \"Required\",\n                        feedbackAbsent: \"\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                      {\n                        id: [\"intv-control-shock-technique-keep-patient-warm\"],\n                        label: \"Keep the patient warm using heat packs and/or blankets\",\n                        type: \"Required\",\n                        feedbackAbsent: \"\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                      {\n                        id: [\"intv-contact-receiving-facility\"],\n                        label: \"Inform the air crew about the patient's condition to assist with providing the receiving facility with a patient report and ETA\",\n                        type: \"Required\",\n                        feedbackAbsent: \"\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                      {\n                        id: [\"into-establish-IV\"],\n                        label: \"Establish at least one appropriately sized IV en route\",\n                        type: \"Required\",\n                        feedbackAbsent: \"\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                ],\n              },\n              {\n                id: [\"Reassess the patient\"],\n                label: \"Reassess the patient\",\n                type: \"Required\",\n                feedbackAbsent: \"\",\n                feedbackOutOfOrder: \"\",\n                feedbackErrors: \"\",\n                examine: \"\",\n                prompts: \"\",\n                subActions: [\n                    {\n                        id: [\"reassess-vital-signs\"],\n                        label: \"Recheck vital signs every 5 minutes\",\n                        type: \"Required\",\n                        feedbackAbsent: \"Vitals should be reassessed after every intervention and every clinical change, and a critically ill patient should be reassessed more frequently to ensure he or she is still stable. *If you had reassessed the patient's vitals after intubating the patient, you would have seen an improvement in all of his vital signs.\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                      {\n                        id: [\"repeat-primary-survey\"],\n                        label: \"Repeat the Primary Survey\",\n                        type: \"Required\",\n                        feedbackAbsent: \"It is important to reassess your patient after every intervention and every clinical change, which includes the primary survey. For example a patient with a neck injury whose breathing was initially non-labored may develop stridor as the airway becomes swollen.\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                      {\n                        id: [\"repeat-secondary-survey\"],\n                        label: \"Repeat the Secondary Survey\",\n                        type: \"Required\",\n                        feedbackAbsent: \"It is important to reassess your patient after every intervention and every clinical change, which includes your secondary survey. For example, a patient may lose their pulses if you initally failed to notice and treat a source of hemorrhage.\",\n                        feedbackOutOfOrder: \"\",\n                        feedbackErrors: \"\",\n                        examine: \"\",\n                        prompts: \"\",\n                        subActions: [],\n                      },\n                ],\n              },\n          ],\n        },     \n    ],\n},\n}\n","import { formatAsMinSecs } from \"../utils\"\nimport { db } from \"@meddbriefer/mdb-firebase\"\nimport {c2FB} from \"./summarizeAnalysis\"\nimport {colorTypes, iconTypes, assessmentEntries, phaseStatusList} from \"@meddbriefer/feedback-data\"\nimport { scenarioConstraintIDs, conditionalConstraints, globalConstraints } from \"@meddbriefer/feedback-data\"\n\n   \nexport const pushNew = (elt,array) => {\n    if (!array.includes(elt)) {\n        array.push(elt)\n    }\n}\n\n// Not yet tested.  May not need these two\n/* export const intersection = (array1, array2) => {\n    return array1.filter(value => array2.includes(value))\n}\n\nexport const difference = (array1, array2) => {\n    return array1.filter(value => !array2.includes(value))\n}\n */\nexport const getPhaseStatus = (statuses) => {\n    //for collecting first unique item statuses and then\n    //unique phase statuses\n    let itemStatuses = []\n    let phaseStatuses = []\n\n    //get a unique list of item status values\n    statuses.forEach(status => {\n        pushNew(status,itemStatuses)\n        /* if (!itemStatuses.includes(status)){\n            itemStatuses.push(status)\n        } */\n    })\n    \n    //turn the item status values into phase level status values\n    let res\n    for (const [key, val] of Object.entries(phaseStatusList)) {\n        res = val.filter(value => itemStatuses.includes(value))\n        //if there is an intersection, save the key (i.e. is unique)\n        if (res.length !== 0)\n            pushNew(key,phaseStatuses)\n            /* if (!phaseStatuses.includes(key)){\n                phaseStatuses.push(key)} */\n        }\n\n    if (phaseStatuses.length === 1){return phaseStatuses[0]}  // to be absent or good, all entries must be good or absent\n    else {return \"errors\"}  //otherwise they are not all good to that translates to errors\n       \n    }\n\n\n\n// functions that extract info from above or create the feedback from the above \n\n//returns a list of all the state values associated with the input status (e.g. status is one of \"Problem\", \"Good\", \"Caution\")\nexport const getStatesForStatus = (status) => {\n    let stateList = []\n    for (const [state, entry] of Object.entries(assessmentEntries)) {\n        let stateStatus = entry[0]\n        if (stateStatus === status){\n            stateList.push(state)}\n        }\n    //console.log(\"In getStatesForStatus\", stateList)\n    return (stateList)}\n        \n\n//returns the entry under that state\nconst getAssessmentEntry = (currentEntry,aIndex) => {\n    let assessmentEntry = \"\"\n    if (currentEntry.type === \"header\"){\n        assessmentEntry = assessmentEntries[currentEntry.displayColor] \n        if (!assessmentEntry) {assessmentEntry = assessmentEntries[currentEntry.status]}\n    }\n    else{\n        if (!assessmentEntries[currentEntry.status]){\n            assessmentEntry = assessmentEntries[\"default\"]}\n        else{assessmentEntry = assessmentEntries[currentEntry.status]}}\n    if (assessmentEntry){\n        return assessmentEntry[aIndex]}\n}\n\n//returns the html icon to use in condition 1 for the state\nexport const getAssessmentIcon = (currentEntry) => {  \n    let val = iconTypes[getAssessmentEntry(currentEntry,0)]\n    return val;\n}\n\n//returns the html color to use in condition 1 for the state\nexport const getColor = (currentEntry) => {\n    return colorTypes[getAssessmentEntry(currentEntry,0)];\n}\n\n//add protexted spaces after a . except for the very last .  \n//Otherwise html reduces continguous regular spaces to a single space.\n//Need this for text strings that will appear in one array entry because\n//of substitution\nconst fixStrSp = (textString) => {\n    if (!!textString){\n        let textArray = textString.split(\" \");\n        let lenTextArray = textArray.length;\n        textArray.forEach((item, i) => {\n            let newItem = item.trim()\n            if (newItem[item.length-1] === \".\" && i < lenTextArray-1){\n                //add protected space to the string\n                newItem = newItem + \"\\xa0\\xa0\"}\n            textArray[i] = newItem \n        })\n        let newString\n        for (let item of textArray){\n            if (!!newString){\n            newString = newString + \" \" + item;}\n            else{newString = item}\n\n     }\n        //console.log(newString, textArray)\n        return newString}\n    else {return \"\"}\n}\n\nconst generateIntvStatusFB = (currentEntry) => {\n    let checked = []\n    let notChecked = []\n    let fb\n    for (let entry of currentEntry.intvStatus){\n        if (entry.foundCk){\n            checked.push(entry.label)}\n        else {notChecked.push(entry.label)}\n    }\n    if (notChecked.length > 0){\n        fb = \"Remember to check the effect of this action by asking for: \" + notChecked + \".\"\n        if (checked.length > 0){\n            fb = fb + \" That is in addition to what you did ask for: \" + checked + \".\"\n        }\n    }\n    return fb\n}\n\nlet fbSource = \"json\"  //values are \"db\" or \"json\"\n\nfunction getFBField(currentEntry, field){\n    let result\n    let fb\n    switch(fbSource){\n        case \"json\":\n            switch(field){\n                case \"assessmentFB\":  //get from c2 ds field feedbackAbsent\n                    fb = c2FB[currentEntry.id]\n                    if (fb){result = fb.feedbackAbsent}\n                \n                    break\n                case \"incorrectAnswersFB\":  //get from c2 ds field feedbackErrors\n                    fb = c2FB[currentEntry.id]\n                    if (fb){result = fb.feedbackError}\n                    break\n                // use what is stored in problem db for now\n                /* case \"why\":\n                    fb = c2FB[currentEntry.id]\n                    if (fb){result = fb.feedbackAbsent}\n                    break */\n                default:   //have the why and contraindicatedWhy fields from problem structure\n                    if (!!currentEntry[field])\n                    //replace eos spacing with protected spaces in the substitution string\n                    {result = fixStrSp(currentEntry[field]) }  \n            }\n            break\n        default:\n            if (!!currentEntry[field])\n            //replace eos spacing with protected spaces in the substitution string\n            {result = fixStrSp(currentEntry[field]) }\n    }\n    return result\n}\n\n\nexport const getFeedback = (currentEntry) => {\n    if (!!currentEntry.intvStatus && currentEntry.intvStatus.length > 0){\n        //add our generated feedback string to the currentEntry\n        currentEntry.intvStatusFB = generateIntvStatusFB(currentEntry)\n    }\n    let feedbackTemplate = fixStrSp(getAssessmentEntry(currentEntry,1)).trim()\n    let fb\n    //Find any @ actions in the template and substitute with the indicated entry field\n    let feedbackArray = feedbackTemplate.split(\" \");\n    //Process all @ substitutions first since +eos does one forward action\n    feedbackArray.forEach((item, i) => {\n        let firstChar = item.charAt(0)\n        let newString = item.substring(1)\n        //trim off excess blanks before and after each word\n        feedbackArray[i] = feedbackArray[i].trim()\n        switch(firstChar){\n            case \"@\":\n                fb = getFBField(currentEntry, newString)\n                if (!!fb){\n                    feedbackArray[i] = fb}\n                else {\n                    feedbackArray[i] = \"[missing: \" + newString + \"]\"\n                }\n                break\n            case \"?\":\n                fb = getFBField(currentEntry,newString)\n                if (!!fb)\n                //replace eos spacing with protected spaces in the substitution string\n                    { feedbackArray[i] = fb }\n                else {\n                    feedbackArray[i] = \"\"  \n                    if (feedbackArray[i-1]  === \"+bos\"){\n                        feedbackArray[i-1] = \"\"\n                        if (feedbackArray[i-2][feedbackArray[i-2].length-1] !== \".\"){\n                            feedbackArray[i-2] = feedbackArray[i-2] + \".\\xa0\"}\n                    }\n                    if (feedbackArray[i+1]  === \"+eos\"){feedbackArray[i+1] = \"\"}\n                }\n                break  \n            default:\n        }\n    })\n    //Now address the + actions in the template\n    feedbackArray.forEach((item, i) => {\n        let firstChar = item.charAt(0)\n        let previousString = \"\"\n        switch(firstChar){\n        case \"+\":\n            let afterPlusChar = item.substring(1)\n            switch(afterPlusChar){\n            case \"eos\":\n                //removes existing/redundant . if present so can be certain putting in single . \n                previousString = feedbackArray[i-1].trim();\n                if (previousString[previousString.length-1] === \".\"){\n                    previousString = previousString.slice(0,-1);}\n                //now add end of sentence and a protected space.  When stiched back into\n                //a single string a protected space will be added between each substring\n                feedbackArray[i-1] = previousString + \".\\xa0\"\n                feedbackArray[i] = \"\"  //get rid of the command since was applied\n                break\n            case \"bos\":\n                //removes existing/redundant . if present so can put in single .\n                previousString = feedbackArray[i-1].trim();\n                if (previousString[previousString.length-1] === \".\"){\n                    previousString = previousString.slice(0,-1);}\n                //now add end of sentence .\n                feedbackArray[i-1] = previousString + \".\\xa0\"\n                feedbackArray[i] = \"\" //get rid of the command since was applied\n                //Captitalize the beginning of the sentence\n                let nextString = feedbackArray[i+1].trim()\n                feedbackArray[i+1] = nextString.charAt(0).toUpperCase() + nextString.slice(1);\n                break\n            default:\n            }\n            break\n        default:\n    }}\n    )\n    //stitch back into a single string\n    let feedbackString\n    for (let item of feedbackArray){\n        if (!!feedbackString) {\n            if (item !== \"\"){\n                feedbackString = feedbackString + \"\\xa0\" + item;}} \n        else {if (item !== \"\"){feedbackString = item}}\n    }\n    //console.log(feedbackString)\n    return feedbackString\n}\n\n//built by the function initializeConstraints\nvar scenarioConstraints = {}\n\n// adds on scenario specific constraints where the constraint is only applicable if certain patient\n// conditions hold.  Since assessment callouts are text and have no associated representation, we\n// can yet implement true conditional constraints.\nexport const initializeConstraints = (scenarioName) => {\n    // look up applicable conditional constraints from const structure scenarioConstraintIDs \n    let constraintIDs = scenarioConstraintIDs[scenarioName] \n    scenarioConstraints = globalConstraints\n    for (const [key, val] of Object.entries(conditionalConstraints)) {\n            if (constraintIDs.includes(val.id)){\n                scenarioConstraints[key] = val\n            }\n        }\n}\n\n\n\n//gets one constraint since each id/label would be a key\n//in the constraints definitions\nexport const getConstraint = (item) => {\n    let id = item.id\n    let label = item.label\n    let constraints = scenarioConstraints[id] \n    if (!constraints){constraints = scenarioConstraints[label]}\n    return constraints \n}\n\n\n// This section is for looking up items in the analysis log\n\nexport const getEvents = (events,field,val) => {\n    return events.filter(entry => entry[field] === val)\n}\n\nexport const getEventsByIdTime = (events,id,timestamp) => {\n    return getEvents(getEvents(events,\"timestamp\",timestamp),\"id\",id)\n}\n\n// This ends the section for looking up items in the analysis log\n\n\n\n//This starts section for saving/loading the debriefing log\n    \nconst _ = require(\"lodash\"); \n\nexport const saveAnalysisLog = (log, actions, hierAssessResults, hierProblemResults, topSummary, constraintsViolated) => {\n    console.log(\"In savingDebriefingLog\")\n    const docRef = db.collection(\"debriefing-feedback-logs\").doc(log.id)\n    let data = {\n        userName: log.userName,\n        ObserverFileCreater: log.userName,\n        label: log.label,\n        ObserverFileName: log.label,\n        commenter: \"\",\n        scenarioID: log.scenarioID,\n        scenarioName: log.scenarioName,\n        schemaVersion: log.schemaVersion,\n        timestamp: Date().toLocaleString(),\n        topSummary: topSummary,\n        hierAssessResults: hierAssessResults,\n        hierProblemResults: hierProblemResults,\n        constraintsViolated: constraintsViolated\n    }\n\n    let newActionsList = [];\n    let newObj = {};\n    let filterUnknown = false;\n\n    //included for debugging puposes only\n    actions.forEach(function (logObj, index){\n        for (let [key, val] of Object.entries(logObj)) {\n            if (undefined === val) {\n                console.log(\"filtered out from events; index: \", index, \" key: \", key, \" value: \", val)\n                filterUnknown = true;}\n             }\n        }\n    )\n        \n    if (filterUnknown) {\n        actions.forEach(function (logObj, index) {\n            newObj = _.pickBy(logObj, function (value, key) {\n                return !(value === undefined);\n            });\n            newActionsList.push(newObj)\n        })\n        data[\"events\"] = newActionsList\n    }\n    else (data[\"events\"] = actions);\n\n\n    //data[\"events\"] = formattedActions;\n    //console.log(JSON.stringify(data, null, 4))\n    docRef.set(data) \n}\n\n//not in use\n\nexport const retrieveDebriefing = (log) => { \n    //console.log(log.events) \n    return (log.events)  \n}  \n\n//This ends section for saving/loading the debriefing log\n\n\n\nexport const getTimestamp = (currentEntry) => {\n    if (currentEntry.status === \"criticalActionHeader\") {\n        return \"\";\n    }\n    if (currentEntry.timestamp === -1) {\n        return \"\\xa0\\xa0\";  // formatAsMinSecs would convert this to 59:59\n    }\n    return formatAsMinSecs(currentEntry.timestamp);\n}\n\n\n","import { MDB_TYPES, ANALYSIS_TYPES } from '@meddbriefer/scenario-data/constants.js';\nimport { getPhaseStatus, initializeConstraints, getConstraint, getStatesForStatus, saveAnalysisLog, getEventsByIdTime, pushNew, \n} from \"./debriefingUtils\"\nimport { intvChecks, exceptionDefs } from \"@meddbriefer/feedback-data/analysisData\"\nimport { getChecklistItemsByType, getChecklistHierarchy, groupByKey } from './scenarioDataAccesors';\nimport { summarizeAnalysis, get2HierLevelIDs} from './summarizeAnalysis';\n//import { foo } from \"@meddbriefer/feedback-data\"\n\n//console.log(foo())\n\nconst problemStates = getStatesForStatus(\"Problem\")\nconst cautionStates = getStatesForStatus(\"Caution\")\nlet hierAssessResults \nlet hierProblemResults \nlet topLevelSummary\nlet constraintsViolated \nlet insertInterventionHeader = false  //setting to true helps during debugging analysis, shows headers for problems\n//index of subphase names and value is phase id to which belongs\nlet subPhases = {}\n// list of all subphase IDs\nlet requiredSubphases\nlet requiredPhaseNames\nlet requiredPhaseAndSubPhases\nlet scenario\nlet version\nlet answerIDs = {}\nlet promptIDs = {}\nexport var itemByID\nexport var itemByLabel\n// sts 1/23/22 - added as global\nlet checklistHierarchy\n\nfunction initGlobals(scen) {\n    scenario = scen\n    initializeConstraints(scen.name)\n    get2HierLevelIDs(scen)\n    getAnswerIDs(scen)\n    getPromptIDs(scen)\n    itemByID = initializeItemLookupByID(scen)\n    itemByLabel = initializeItemLookupByLabel(scen)\n    requiredPhaseNames = getChecklistItemsByType(scen, MDB_TYPES.PHASE).map(e => e.id).concat([\"Unknown\"])\n    requiredSubphases = getChecklistItemsByType(scen, MDB_TYPES.SUB_PHASE).map(e => e.id)\n    checklistHierarchy = getChecklistHierarchy(scen)\n    requiredPhaseAndSubPhases = findPhaseSubphasesOrdered(checklistHierarchy)\n    checklistHierarchy.forEach(ph => {\n        if (undefined === ph.subPhases) {\n            subPhases[ph.id] = ph.label} \n        else {\n            ph.subPhases.forEach(sp => {\n                subPhases[sp.id] = ph.label})}})\n    subPhases[\"Unknown\"] = \"Unknown\"\n    hierAssessResults = {}\n    hierProblemResults = {}\n    constraintsViolated = []\n}\n\nfunction getAnswerIDs(scen){\n    if (!!scen.interventionPromptAnswers){\n        let answers = scen.interventionPromptAnswers\n        answers.forEach(answer => {\n            answerIDs[answer.id] = answer.label})\n    }\n}\n\nfunction getPromptIDs(scen){\n    if (!!scen.interventionPrompts){\n        let prompts = scen.interventionPrompts\n        prompts.forEach(prompt => {\n            promptIDs[prompt.id] = prompt.label})\n\n    }\n}\n\n//This starts section for accessing checklist and intervention components by id or label\nconst initializeItemLookupByID = (scenario) => {\n    let checklistLookupByID = groupByKey(scenario.checkListMetaData.filter(e => ANALYSIS_TYPES.includes(e.type)),\"id\")\n    let intvLookupByID \n    if (!!scenario.interventions){\n        intvLookupByID = groupByKey(scenario.interventions,\"id\")}\n    else {intvLookupByID = groupByKey(scenario.intvMetaData.filter(e => ANALYSIS_TYPES.includes(e.type)),\"id\")}\n    let result = Object.assign(checklistLookupByID, intvLookupByID)\n    return result}\n\nconst initializeItemLookupByLabel = (scenario) => {\n        let checklistLookupByLabel = groupByKey(scenario.checkListMetaData.filter(e => ANALYSIS_TYPES.includes(e.type)),\"label\")\n        let intvLookupByLabel\n        if (!!scenario.interventions){\n            intvLookupByLabel = groupByKey(scenario.interventions,\"label\")}\n        else {intvLookupByLabel = groupByKey(scenario.intvMetaData.filter(e => ANALYSIS_TYPES.includes(e.type)),\"label\")}\n        let result = Object.assign(checklistLookupByLabel, intvLookupByLabel)\n        return result}\n\n\nconst findPhaseSubphasesOrdered = (phases) => {\n    let result = []\n    phases.forEach(ph => {\n        if (!!ph.subPhases){\n            let subPhIds = ph.subPhases.map(e => e.id)\n            //not currently useful to collect parent phases unless there were no subphases\n            //if parent phase included subphases and steps then it should be in this result\n            //result = result.concat(ph.id)\n            result = result.concat(subPhIds)\n        }\n        else {result = result.concat(ph.id)}})\n    return result\n}\n\nconst collectScenAssessments = (problems) => {\n    let assessments = []\n    problems.forEach(prob => {\n        if (prob.assessments !== \"\"){\n            assessments = assessments.concat(prob.assessments)}})\n    return assessments\n}\n\n//will need to update to comply with any relevant constraints on phases and subphases\n//currently looks for missing phases/subphases and inserts them into the analysis list\n//based on where last preceding phase appeared\nconst insertMissingSubphases = (phases,phaseNames) => {\n    let priorPh\n    requiredPhaseAndSubPhases.forEach((phase, i) => {\n        if (!phaseNames.includes(phase)) {\n            //find last index for phase before and splice that    \n            if (i === 0){\n                priorPh = requiredPhaseAndSubPhases[0]\n            }\n            else {priorPh = requiredPhaseAndSubPhases[i-1]}\n\n            let insertionIndex = 0\n            if (priorPh !== phase){\n                insertionIndex = phaseNames.lastIndexOf(priorPh)  //if prior phase was missing it will have been inserted earlier\n                insertionIndex = insertionIndex + 1}\n            \n            phaseNames.splice(insertionIndex, 0, phase); //insert it where it should have appeared\n            phases.splice(insertionIndex, 0, []); //add the empty array for phase objects\n        }});\n    return[phases,phaseNames]\n}\n\n\n//as vital requests and intervention requests are made, update that it was requested\n//if it is one that we are tracking for post intervention success.  \nconst updateVital = (vitalEntries, timestamp) => {\n    let updatedEntries = []\n    vitalEntries.forEach(vitalEntry => {\n        if (vitalEntry.timestamp < timestamp){\n            vitalEntry[\"foundCk\"] = true}\n        updatedEntries.push(vitalEntry)\n    })\nreturn updatedEntries\n}\n\nconst annotateInputEvents = (events,problems) => {\n    let result\n    switch(version){\n        case \"pre 5/1/22\":\n            result = annotateInputEvents_pre_5_1_22(events, problems)\n            break\n        case \"post 5/1/22\":\n            result = annotateInputEvents_post_5_1_22(events, problems)\n            break\n        default:\n            result = annotateInputEvents_pre_5_1_22(events, problems)\n}\nreturn result}\n\n//initial review of observer log to add annotations to what was found in the observer log.  Filters out things not useful to\n//analysis or is not yet being analyzed in the codep.  It also\n// pulls together interventions and prompt answers into one event and adds fields to each event that will fill in in later analysis,\n// fills in problem information for interventions found in observer log and\n// sets up the phases and phaseNames structures for events in the observation log and initiates\n// record of what have encountered so far in the observations in order to recognize what is missing in later stages of analysis\nconst annotateInputEvents_pre_5_1_22 = (events,problems) => {\n    let confirmedEvents = [];\n    let interventionsConfirmed = [];  //needed for vital checking\n    //instead of a multi-dimensional array, am using an array of phase and subphase names e.g. \"BSI\", \"prinary\" ...\n    let phaseNames = [];\n    let phases = []; //and another array with the actual content for each phase.  I can search phaseNames for the index into phases\n    let phaseObjects = [];\n    let trackForStatus = {};  //save correct interventions that were done that require status checks later\n    \n\n    // phases entry of that name and then use that index to retrieve the appropriate phase entried to\n    //add on the missing items (assessment or intervention) for that phase\n    let priorPhase = \"\";\n    let parentPhase = \"\"\n    let parentIndex = 0\n    let phaseIndex = 0;\n    let newPhaseStart = true\n    let assessmentTypes = [\"assessment\", \"required-action\", \"decision-option\", \"assessment-option\"]\n\n    // created annotated object for each event\n    events.forEach((event, i) => {\n        // Each eventObj is one of the lines in the displayed base log\n        // Set up fields for extra annotations for this event after analyzing each event\n        let eventObj = {\n            \"comment\": \"\",\n            \"numericalID\": i,\n            \"status\": \"\",\n            \"intvStatus\": [], //will be an array what patient status checks were and weren't done\n            \"contraindicatedWhy\": \"\",\n            \"minimalWhy\": \"\",\n            \"why\": \"\",\n            \"answerCorrect\": true,\n            \"answerDetails\": {},\n            \"expertPhase\": \"\",  //filled in only for interventions\n            \"workingPhase\": \"\",  //is subphase or if no suphase then the phase\n            \"suggestedPhase\": \"\", //mostly for interventions so don't override info on when was originally done\n            \"protocol\": \"\",\n            \"protocolRelationship\": \"\",\n            \"probLabel\": \"\",\n            \"solutionIds\": [],\n            \"assessments\": \"\",\n            \"required\": false,\n            \"actionDescription\": \"\",\n            \"assessmentFB\": \"\",\n            \"incorrectAnswersFB\": \"\",\n            \"orderingFB\": \"\",\n            \"processingState\": \"good\" // values of good/bad used to filter out events not needed for analysis or displaying\n        };\n\n        // copy over the event fields that exist in the input log from observer UI (which is type dependent)\n        const EVENT_FIELDS = [\"id\", \"label\", \"finding\", \"phase\", \"subPhase\", \"vitalType\", \"vital\", \"value\", \"type\", \"prompt\", \"promptID\", \"intervention\", \"timestamp\", \"probLabel\"];\n        EVENT_FIELDS.forEach(fldName => {\n            if (!!event[fldName]) {\n                eventObj[fldName] = event[fldName];\n            }\n        });\n\n        //copy event fields if defined to initialize some of the above annotation fields\n        if (!!event.label) { eventObj.actionDescription = event.label; }\n        if (!!event.type) { eventObj.status = event.type; }\n        // prefer subPhase if available\n        if (!!event.subPhase) { eventObj.workingPhase = event.subPhase; }\n        else {\n            if (!!event.phase) { eventObj.workingPhase = event.phase; }}\n        eventObj.expertPhase = eventObj.workingPhase;\n\n        //if current phase same as prior then keep on with the current phase\n        // otherwise initialize for a new phase but don' let an intervention\n        // or intervention answer set a new phase since this info in event is\n        // not reliable  \n            \n        if (priorPhase !== eventObj.workingPhase || parentPhase !== eventObj.phase){ \n            if (priorPhase !== \"\" && assessmentTypes.includes(eventObj.type)) {  \n                //have a non initial phase change and we have an assessment type (i.e. we can't base phase changes on interventions)\n                newPhaseStart = true\n                phases[phaseIndex] = phaseObjects;\n                if (phaseIndex !== parentIndex){\n                    phases[parentIndex] = phases[parentIndex].concat(phaseObjects);  \n                }\n                phaseIndex++\n                \n                //if upcoming parent phase is different than current parent phase then set up\n                //for a new parent phase\n                if (eventObj.phase !== parentPhase){ \n                    parentPhase = eventObj.phase\n                    parentIndex = phaseIndex\n                    // if the upcoming is truly a parent with subphases \n                    // then add an extra entry for the new parent phase \n                    if (eventObj.phase !== eventObj.workingPhase) {\n                        //create the new parent phase\n                        phases[parentIndex] = []\n                        phaseNames[parentIndex] = parentPhase\n                        phaseIndex++\n                    }}}\n            else {\n                if (priorPhase === \"\" && assessmentTypes.includes(eventObj.type)){\n                // first item in events so initialize\n                    parentPhase = eventObj.phase\n                    // if the event parent phase is not the same as the subPhase\n                    // then we need to save that parent phase in phases and phaseNames\n                    if (parentPhase !== eventObj.workingPhase) {\n                        parentPhase = eventObj.phase\n                        phaseNames[parentIndex] = parentPhase\n                        phaseIndex++;}}\n                \n                else{ \n                    if (priorPhase === \"\"){\n                        //did an intervention before doing any assessments\n                        //so make up an initial phase of unknown\n                        parentPhase = \"Unknown\"\n                        eventObj.workingPhase = parentPhase\n                        eventObj.phase = parentPhase\n                        eventObj.subPhase = \"\" }\n                    else {newPhaseStart = false}}}\n\n                \n            \n            //now setup for collecting for the current phase if not skipping new phase start\n            if(newPhaseStart){\n                priorPhase = eventObj.workingPhase;\n                phaseObjects = [];\n                phaseNames[phaseIndex] = priorPhase;\n                phases[phaseIndex] = []}\n            else {newPhaseStart = true}\n            }\n        \n\n        let eventType = eventObj.type;\n        // List of types in log that are currently processed.  Rest are filtered out.\n        let processedTypes = [\"assessment\", \"required-action\", \"intervention\", \"answer\", \"obtain-vital-sign\", \"decision-option\", \"assessment-option\"];\n\n        //skip over adding anything not of these types to the debriefing display for now\n        if (!processedTypes.includes(eventType)) {\n            eventObj.processingState = \"bad\";\n        }\n\n        // when get an answer for an intervention prompt, grade the response.  The intervention itself is later in the event log, so\n        // accumulate the answers and grading and then when an intervention is later found we can use the intervention\n        // event itself and move all the answer results into it\n        let prioreventObj = [];\n        if (eventType === \"answer\") {\n            //make sure we have answer info for this promptID\n            let correctAnswerLabel = getCorrectAnswerLabel(event.promptID, true);\n            let givenAnswerLabel = getAnswerLabel(event.id, true);\n            //if we don't have answer info for this prompt ID then just ignore this entry\n            if (!correctAnswerLabel) {\n                eventObj.processingState = \"bad\"}\n            else {\n                //currently returns correct answer-id if has answered incorrectly or false if answered correctly\n                let wrongAnswer = evalForIncorrectAnswer(event.promptID, event.id, true);\n                //store details of this answer and its grading\n                let answerDetails = {\"correctAnswer\": correctAnswerLabel, \"givenAnswer\": givenAnswerLabel, \"correct\": !wrongAnswer}\n                \n                //have answer to prior question for this intervention \n                //(i.e. there is more than one question associated with this intervention)\n                if (confirmedEvents.includes(eventObj.intervention)) {\n                    prioreventObj = phaseObjects.pop();\n                    confirmedEvents.pop()\n                    eventObj.answerCorrect = prioreventObj.answerCorrect;\n                    eventObj.answerDetails = prioreventObj.answerDetails;\n                    //add the answer student gave to the action description\n                    eventObj.actionDescription = prioreventObj.actionDescription + \", \" + givenAnswerLabel;\n                    if (wrongAnswer) {\n                        eventObj.answerCorrect = false;\n                        if (prioreventObj.incorrectAnswersFB === \"\") {\n                            eventObj.incorrectAnswersFB = \"You should have responded: \" + correctAnswerLabel;\n                            }\n                        else {eventObj.incorrectAnswersFB = prioreventObj.incorrectAnswersFB + \", and \" + correctAnswerLabel;\n                            }}\n                    else {\n                        eventObj.incorrectAnswersFB = prioreventObj.incorrectAnswersFB;\n                        eventObj.answerCorrect = prioreventObj.answerCorrect;\n                    }}\n                //first answer for this intervention\n                else { \n                    //put the answer student gave in the action description\n                    //responding to first question for the intervention\n                    if (wrongAnswer) {\n                        eventObj.answerCorrect = false;\n                        eventObj.incorrectAnswersFB = \"You should have responded: \" + correctAnswerLabel;\n                    }\n                    else { eventObj.incorrectAnswersFB = \"\"; }\n                    //pushNew(eventObj.intervention,confirmedEvents)\n                    confirmedEvents.push(eventObj.intervention)\n                }\n                //storing the prompt/answer details \n                eventObj.answerDetails[event.promptID] = answerDetails}}\n\n        if (eventType === \"intervention\") {\n            prioreventObj = phaseObjects.slice(-1)[0]; //slice returns an array rather than the last object in array\n            //check to find if prior phaseObjects contains an answer and if it does then consolidate that answer\n            //event into the associated intervention\n            if (prioreventObj && prioreventObj.type === \"answer\"){\n                if (prioreventObj.intervention === eventObj.id) {\n                    prioreventObj = phaseObjects.pop();\n                    confirmedEvents.pop()\n                    confirmedEvents.pop()\n                    eventObj.answerCorrect = prioreventObj.answerCorrect;\n                    eventObj.answerDetails = prioreventObj.answerDetails;\n                    eventObj.incorrectAnswersFB = prioreventObj.incorrectAnswersFB;\n                    eventObj.actionDescription = eventObj.actionDescription + \".\\xa0\\xa0\" + prioreventObj.actionDescription}\n                else {\n                    prioreventObj = phaseObjects.pop();  //discard this answer, it is for an intervention that was not done\n                    confirmedEvents.pop()\n                    confirmedEvents.pop()\n                 }}\n        }\n\n        if (eventObj.processingState === \"good\") {\n\n            if (eventObj.type === \"obtain-vital-sign\"){\n                //if it is an intervention status check then the vital field contains\n                //the intervention id and otherwise the vital label\n                let vital = eventObj.vital \n                let type = \"\"\n                if (eventObj.vitalType === \"intervention-status\"){\n                    if (interventionsConfirmed.includes(vital)){\n                        type = \"intv\"}\n                    else {type = \"noIntv\"}\n                    }\n                else {type = \"vital\"}\n                \n                //update trackForStatus relative to this \"vital\"\n                let vitalEntry = trackForStatus[vital]  \n                //set the status for this particular vital (i.e. makes sense to ask for it or not)\n                switch (type){\n                    case \"intv\": \n                        eventObj.status = \"patientIntvCheck\"\n                        if (vitalEntry && (vitalEntry.timestamp < eventObj.timestamp)){\n                            vitalEntry[\"foundCk\"] = true\n                            trackForStatus[vital] = vitalEntry}\n                        break\n                    case \"noIntv\":\n                        eventObj.status = \"intvCheckWNoIntvFound\"\n                        break\n                    case \"vital\":\n                        eventObj.status = \"patientVitalCheck\" \n                        if (vitalEntry){\n                            vitalEntry = updateVital(vitalEntry,eventObj.timestamp)\n                            trackForStatus[vital] = vitalEntry}\n                        break\n                    default: eventObj.status = \"unexpectedPatientIntvCheck\"}\n\n\n                    \n            }\n            // add additional annotations per type\n            if (eventObj.type === \"intervention\") {\n                // iterate through all problem actions looking how to format the\n                // data structue for the current \"event\"\n                problems.forEach((prob, j) => {\n                    // We're going through intervention actions in the order required/needed and then other since\n                    // it is possible but unlikely to have multiple matches and we want the last one to win.\n                    // Also, we are assuming minimal is always a subset of goodintv\n                    const PROBLEM_ACTION_FIELDS = [\"why\", \"probLabel\", \"protocolRelationship\", \"probLabel\"];\n                    \n                    // check for this action to be an intervention for a problem\n                    prob.allActions?.forEach((action, k) => {\n                        if (action.id === eventObj.id) {\n                            //get the full action\n                            //see if this is an event whose status should be checked by the student\n                            //and initialize its tracking.  Not yet limiting to event id when\n                            //defining what needs to be tracked in the structure intvChecks\n                            //so also checking event label\n                            let statusChecking  //the entry retrieve from intvChecks\n                            let intv = eventObj.id\n                            statusChecking = intvChecks[eventObj.label]\n                            if (!statusChecking){\n                                statusChecking = intvChecks[eventObj.id]}\n\n                            if (!!statusChecking){\n                                let initialEntry = {\"intervention\": intv, \"timestamp\": eventObj.timestamp, \"foundCk\": false}\n                                //put the intervention on the list if there is a direct status check possible for it\n                                if (statusChecking.intvStatusNeeded){\n                                    trackForStatus[intv] = Object.assign({}, initialEntry)}\n                                //if any vitals are listed for this intervention as a way of checking its status then\n                                //put those on the statusChecking list.  Anytime a vital is checked after the timestamp\n                                //it will count towards checking the status of the intervention\n                                statusChecking.vitalsNeeded.forEach(vital => {\n                                    if (!trackForStatus[vital]){trackForStatus[vital] = [Object.assign({}, initialEntry)]}\n                                    else {trackForStatus[vital].push(Object.assign({}, initialEntry))}})}\n                                \n                            // fill out problem related fields in the action event\n                            if (!!action.assessments) {eventObj.assessmentsNeeded = action.assessments}\n                            if (!!action.phase) {\n                                eventObj.when = action.phase\n                                eventObj.suggestedPhase = action.phase};\n                            if (!!prob.protocols) {eventObj.protocol = prob.protocols}\n                            if (eventObj.answerCorrect) {\n                                eventObj.status = \"goodIntv\";}\n                            else { eventObj.status = \"incorrect-answers\"; }\n                            //eventObj.probLabel = prob.probLabel;\n                            PROBLEM_ACTION_FIELDS.forEach(fldName => {\n                                if (!!action[fldName]) {\n                                    eventObj[fldName] = action[fldName];\n                                }});\n                            if (!!action[\"id-label\"]) { eventObj[\"label\"] = action[\"id-label\"]; }  //dealing with name changes in incoming data so software stays the same\n                        }});\n\n                    // check for this action to be a contraindication for a problem solution\n                    prob.allContras?.forEach((contra, j) => {\n                        if (contra.id === eventObj.id) {\n                            eventObj.status = prob.protocolRelationship;\n                            PROBLEM_ACTION_FIELDS.forEach(fldName => {\n                                if (!!contra[fldName]) {\n                                    eventObj[fldName] = contra[fldName];\n                                }});\n                            if (!!prob.probLabel) { eventObj.probLabel = prob.probLabel; }\n                        }}) \n                    })}\n\n            if (eventObj.type === \"decision-option\"){\n                let wrongAnswer = evalForIncorrectAnswer(event.promptID, event.id, false);\n                if (wrongAnswer){\n                    eventObj.status = \"decision-option-incorrect\"\n                    eventObj.answerCorrect = false\n                    eventObj.incorrectAnswerFB = \"You should have responded \" + getCorrectAnswerLabel(event.promptID, false);\n                    }}\n\n            if (eventObj.type === \"assessment-option\"){\n                let wrongAnswer = evalForIncorrectAnswer(event.promptID, event.id, false);\n                if (wrongAnswer){\n                    eventObj.status = \"assessment-option-incorrect\"\n                    eventObj.answerCorrect = false\n                    eventObj.incorrectAnswerFB = \"You should have responded \" + getCorrectAnswerLabel(event.promptID, false);\n                    }}\n            // add the formatted object to our list of formatted objects for the current phase and the id to our set of confirmed ids\n            if (eventObj.type === \"intervention\"){\n                confirmedEvents.push(eventObj.id + \"+\" + eventObj.probLabel)\n                interventionsConfirmed.push(eventObj.id)\n            }\n            else {confirmedEvents.push(eventObj.id)}\n            phaseObjects.push(eventObj)}});\n\n    // store the last phase processed\n    phases[phaseIndex] = phaseObjects;\n    if (phaseIndex !== parentIndex){\n        phases[parentIndex] = (phases[parentIndex]).concat(phaseObjects)};\n    return [phases,phaseNames,confirmedEvents,trackForStatus]\n}\n\nfunction processAnswer(event, eventObj) {\n    if (event.type === \"intervention\" && !!event.answers) {\n        let answerDetails\n        let wrongAnswer = true\n        for (const [key, entry] of Object.entries(event.answers)) {\n\n            //let correctAnswerLabel = getCorrectAnswerLabel(key, true);\n            let correctAnswerLabel = \"TBD\"  //will use key\n            let givenAnswerLabel = getAnswerLabel(entry, true);\n            if (!correctAnswerLabel) {\n                eventObj.processingState = \"bad\"}\n            else {\n                //currently returns correct answer-id if has answered incorrectly or false if answered correctly\n                //let wrongAnswer = evalForIncorrectAnswer(event.promptID, event.id, true);\n                //store details of this answer and its grading\n                answerDetails = {\"correctAnswer\": correctAnswerLabel, \"givenAnswer\": givenAnswerLabel, \"correct\": !wrongAnswer}\n                //storing the prompt/answer details \n                eventObj.answerDetails[key] = answerDetails\n                eventObj.actionDescription = eventObj.actionDescription + \", \" + givenAnswerLabel;\n                        if (wrongAnswer) {\n                            eventObj.answerCorrect = false;\n                            eventObj.incorrectAnswersFB = eventObj.incorrectAnswersFB + \", and \" + correctAnswerLabel;\n                            }}}\n    }}\n\nconst annotateInputEvents_post_5_1_22 = (events,problems) => {\n    let confirmedEvents = [];\n    let interventionsConfirmed = [];  //needed for vital checking\n    //instead of a multi-dimensional array, am using an array of phase and subphase names e.g. \"BSI\", \"prinary\" ...\n    let phaseNames = [];\n    let phases = []; //and another array with the actual content for each phase.  I can search phaseNames for the index into phases\n    let phaseObjects = [];\n    let trackForStatus = {};  //save correct interventions that were done that require status checks later\n    \n\n    // phases entry of that name and then use that index to retrieve the appropriate phase entried to\n    //add on the missing items (assessment or intervention) for that phase\n    let priorPhase = \"\";\n    let parentPhase = \"\"\n    let parentIndex = 0\n    let phaseIndex = 0;\n    let newPhaseStart = true\n    let assessmentTypes = [\"assessment\", \"required-action\", \"decision-option\", \"assessment-option\"]\n\n    // created annotated object for each event\n    events.forEach((event, i) => {\n        // Each eventObj is one of the lines in the displayed base log\n        // Set up fields for extra annotations for this event after analyzing each event\n        let eventObj = {\n            \"comment\": \"\",\n            \"numericalID\": i,\n            \"status\": \"\",\n            \"intvStatus\": [], //will be an array what patient status checks were and weren't done\n            \"contraindicatedWhy\": \"\",\n            \"minimalWhy\": \"\",\n            \"why\": \"\",\n            \"answerCorrect\": true,\n            \"answerDetails\": {},\n            \"expertPhase\": \"\",  //filled in only for interventions\n            \"workingPhase\": \"\",  //is subphase or if no suphase then the phase\n            \"suggestedPhase\": \"\", //mostly for interventions so don't override info on when was originally done\n            \"protocol\": \"\",\n            \"protocolRelationship\": \"\",\n            \"probLabel\": \"\",\n            \"solutionIds\": [],\n            \"assessments\": \"\",\n            \"required\": false,\n            \"actionDescription\": \"\",\n            \"assessmentFB\": \"\",\n            \"incorrectAnswersFB\": \"\",\n            \"orderingFB\": \"\",\n            \"processingState\": \"good\" // values of good/bad used to filter out events not needed for analysis or displaying\n        };\n\n        // copy over the event fields that exist in the input log from observer UI (which is type dependent)\n        const EVENT_FIELDS = [\"id\", \"interventionID\", \"label\", \"finding\", \"phase\", \"subPhase\", \"vitalType\", \"vital\", \"value\", \"type\", \"prompt\", \"promptID\", \"intervention\", \"timestamp\", \"probLabel\"];\n        EVENT_FIELDS.forEach(fldName => {\n            if (!!event[fldName]) {\n                eventObj[fldName] = event[fldName];\n            }\n        });\n\n        if (event.type === \"intervention\")\n            {if (!!event.interventionID){eventObj.id = event.interventionID}\n             eventObj.label = (eventObj.id).label\n            }\n        //copy event fields if defined to initialize some of the above annotation fields\n        if (!!eventObj.label) { eventObj.actionDescription = eventObj.label; }\n        if (!!event.type) { eventObj.status = event.type; }\n        // prefer subPhase if available\n        if (!!event.subPhase) { eventObj.workingPhase = event.subPhase; }\n        else {\n            if (!!event.phase) { eventObj.workingPhase = event.phase; }}\n        eventObj.expertPhase = eventObj.workingPhase;\n\n        //if current phase same as prior then keep on with the current phase\n        // otherwise initialize for a new phase but don' let an intervention\n        // or intervention answer set a new phase since this info in event is\n        // not reliable  \n            \n        if (priorPhase !== eventObj.workingPhase || parentPhase !== eventObj.phase){ \n            if (priorPhase !== \"\" && assessmentTypes.includes(eventObj.type)) {  \n                //have a non initial phase change and we have an assessment type (i.e. we can't base phase changes on interventions)\n                newPhaseStart = true\n                phases[phaseIndex] = phaseObjects;\n                if (phaseIndex !== parentIndex){\n                    phases[parentIndex] = phases[parentIndex].concat(phaseObjects);  \n                }\n                phaseIndex++\n                \n                //if upcoming parent phase is different than current parent phase then set up\n                //for a new parent phase\n                if (eventObj.phase !== parentPhase){ \n                    parentPhase = eventObj.phase\n                    parentIndex = phaseIndex\n                    // if the upcoming is truly a parent with subphases \n                    // then add an extra entry for the new parent phase \n                    if (eventObj.phase !== eventObj.workingPhase) {\n                        //create the new parent phase\n                        phases[parentIndex] = []\n                        phaseNames[parentIndex] = parentPhase\n                        phaseIndex++\n                    }}}\n            else {\n                if (priorPhase === \"\" && assessmentTypes.includes(eventObj.type)){\n                // first item in events so initialize\n                    parentPhase = eventObj.phase\n                    // if the event parent phase is not the same as the subPhase\n                    // then we need to save that parent phase in phases and phaseNames\n                    if (parentPhase !== eventObj.workingPhase) {\n                        parentPhase = eventObj.phase\n                        phaseNames[parentIndex] = parentPhase\n                        phaseIndex++;}}\n                \n                else{ \n                    if (priorPhase === \"\"){\n                        //did an intervention before doing any assessments\n                        //so make up an initial phase of unknown\n                        parentPhase = \"Unknown\"\n                        eventObj.workingPhase = parentPhase\n                        eventObj.phase = parentPhase\n                        eventObj.subPhase = \"\" }\n                    else {newPhaseStart = false}}}\n\n                \n            \n            //now setup for collecting for the current phase if not skipping new phase start\n            if(newPhaseStart){\n                priorPhase = eventObj.workingPhase;\n                phaseObjects = [];\n                phaseNames[phaseIndex] = priorPhase;\n                phases[phaseIndex] = []}\n            else {newPhaseStart = true}\n            }\n        \n\n        let eventType = eventObj.type;\n        // List of types in log that are currently processed.  Rest are filtered out.\n        let processedTypes = [\"assessment\", \"required-action\", \"intervention\", \"obtain-vital-sign\", \"decision-option\", \"assessment-option\"];\n\n        //skip over adding anything not of these types to the debriefing display for now\n        if (!processedTypes.includes(eventType)) {\n            eventObj.processingState = \"bad\";\n        }\n\n        \n        \n\n        \n        if (eventObj.processingState === \"good\") {\n\n            if (eventObj.type === \"obtain-vital-sign\"){\n                //if it is an intervention status check then the vital field contains\n                //the intervention id and otherwise the vital label\n                let vital = eventObj.vital \n                let type = \"\"\n                if (eventObj.vitalType === \"intervention-status\"){\n                    if (interventionsConfirmed.includes(vital)){\n                        type = \"intv\"}\n                    else {type = \"noIntv\"}\n                    }\n                else {type = \"vital\"}\n                \n                //update trackForStatus relative to this \"vital\"\n                let vitalEntry = trackForStatus[vital]  \n                //set the status for this particular vital (i.e. makes sense to ask for it or not)\n                switch (type){\n                    case \"intv\": \n                        eventObj.status = \"patientIntvCheck\"\n                        if (vitalEntry && (vitalEntry.timestamp < eventObj.timestamp)){\n                            vitalEntry[\"foundCk\"] = true\n                            trackForStatus[vital] = vitalEntry}\n                        break\n                    case \"noIntv\":\n                        eventObj.status = \"intvCheckWNoIntvFound\"\n                        break\n                    case \"vital\":\n                        eventObj.status = \"patientVitalCheck\" \n                        if (vitalEntry){\n                            vitalEntry = updateVital(vitalEntry,eventObj.timestamp)\n                            trackForStatus[vital] = vitalEntry}\n                        break\n                    default: eventObj.status = \"unexpectedPatientIntvCheck\"}\n\n\n                    \n            }\n            if (eventObj.type === \"intervention\") {\n                eventObj.label = getItem(eventObj.id).label\n                eventObj.actionDescription = eventObj.label\n                confirmedEvents.push(eventObj.id)\n                interventionsConfirmed.push(eventObj.id)\n            \n                \n                // iterate through all problem actions looking how to format the\n                // data structue for the current \"event\"\n                problems.forEach((prob, j) => {\n                    // We're going through intervention actions in the order required/needed and then other since\n                    // it is possible but unlikely to have multiple matches and we want the last one to win.\n                    // Also, we are assuming minimal is always a subset of goodintv\n                    const PROBLEM_ACTION_FIELDS = [\"why\", \"probLabel\", \"protocolRelationship\", \"probLabel\"];\n                    \n                    // check for this action to be an intervention for a problem\n                    prob.allActions?.forEach((action, k) => {\n                        if (action.id === eventObj.id) {\n                            //get the full action\n                            //see if this is an event whose status should be checked by the student\n                            //and initialize its tracking.  Not yet limiting to event id when\n                            //defining what needs to be tracked in the structure intvChecks\n                            //so also checking event label\n                            let statusChecking  //the entry retrieve from intvChecks\n                            let intv = eventObj.id\n                            statusChecking = intvChecks[eventObj.label]\n                            if (!statusChecking){\n                                statusChecking = intvChecks[eventObj.id]}\n\n                            if (!!statusChecking){\n                                let initialEntry = {\"intervention\": intv, \"timestamp\": eventObj.timestamp, \"foundCk\": false}\n                                //put the intervention on the list if there is a direct status check possible for it\n                                if (statusChecking.intvStatusNeeded){\n                                    trackForStatus[intv] = Object.assign({}, initialEntry)}\n                                //if any vitals are listed for this intervention as a way of checking its status then\n                                //put those on the statusChecking list.  Anytime a vital is checked after the timestamp\n                                //it will count towards checking the status of the intervention\n                                statusChecking.vitalsNeeded.forEach(vital => {\n                                    if (!trackForStatus[vital]){trackForStatus[vital] = [Object.assign({}, initialEntry)]}\n                                    else {trackForStatus[vital].push(Object.assign({}, initialEntry))}})}\n                                \n                            // fill out problem related fields in the action event\n                            if (!!action.assessments) {eventObj.assessmentsNeeded = action.assessments}\n                            if (!!action.phase) {\n                                eventObj.when = action.phase\n                                eventObj.suggestedPhase = action.phase};\n                            if (!!prob.protocols) {eventObj.protocol = prob.protocols}\n                            if (eventObj.answerCorrect) {\n                                eventObj.status = \"goodIntv\";}\n                            else { eventObj.status = \"incorrect-answers\"; }\n                            //eventObj.probLabel = prob.probLabel;\n                            PROBLEM_ACTION_FIELDS.forEach(fldName => {\n                                if (!!action[fldName]) {\n                                    eventObj[fldName] = action[fldName];\n                                }});\n                            if (!!action[\"id-label\"]) { eventObj[\"label\"] = action[\"id-label\"]; }  //dealing with name changes in incoming data so software stays the same\n                        }});\n\n                    // check for this action to be a contraindication for a problem solution\n                    prob.allContras?.forEach((contra, j) => {\n                        if (contra.id === eventObj.id) {\n                            eventObj.status = contra.protocolRelationship;\n                            PROBLEM_ACTION_FIELDS.forEach(fldName => {\n                                if (!!contra[fldName]) {\n                                    eventObj[fldName] = contra[fldName];\n                                }});\n                            if (!!prob.probLabel) { eventObj.probLabel = prob.probLabel; }\n                        }}) \n                    })\n                //provide feedback on the answers if any\n                processAnswer(event, eventObj)\n                if (eventObj.status === \"intervention\"){eventObj.status = \"irrelevant\"}\n                \n                }\n\n            if (eventObj.type === \"decision-option\"){\n                let wrongAnswer = evalForIncorrectAnswer(event.promptID, event.id, false);\n                if (wrongAnswer){\n                    eventObj.status = \"decision-option-incorrect\"\n                    eventObj.answerCorrect = false\n                    eventObj.incorrectAnswerFB = \"You should have responded \" + getCorrectAnswerLabel(event.promptID, false);\n                    }}\n\n            if (eventObj.type === \"assessment-option\"){\n                let wrongAnswer = evalForIncorrectAnswer(event.promptID, event.id, false);\n                if (wrongAnswer){\n                    eventObj.status = \"assessment-option-incorrect\"\n                    eventObj.answerCorrect = false\n                    eventObj.incorrectAnswerFB = \"You should have responded \" + getCorrectAnswerLabel(event.promptID, false);\n                    }}\n            // add the formatted object to our list of formatted objects for the current phase and the id to our set of confirmed ids\n            if (eventObj.type === \"intervention\"){\n                confirmedEvents.push(eventObj.id + \"+\" + eventObj.probLabel)\n                interventionsConfirmed.push(eventObj.id)\n            }\n            else {confirmedEvents.push(eventObj.id)}\n            phaseObjects.push(eventObj)}});\n\n    // store the last phase processed\n    phases[phaseIndex] = phaseObjects;\n    if (phaseIndex !== parentIndex){\n        phases[parentIndex] = (phases[parentIndex]).concat(phaseObjects)};\n    return [phases,phaseNames,confirmedEvents,trackForStatus]\n}\n\n//start support functions for constraint checking\n\nconst findNameNumID = (names, entries, item, occurrence) => {\n    let result = undefined\n    let index = undefined\n    for (let i = 0; i < names.length; i++) {\n        if (item.id === names[i]) {\n            result = entries[i]\n            if (occurrence === \"start\") {\n                break}}}\n    if (!!result) {\n        if (result.numericalID === -1) {\n            if (occurrence === \"start\") {\n                index = result.numericalIDStart}\n            else { index = result.numericalIDEnd }}\n        else { index = result.numericalID }}\n\n    return index\n}\n\nlet unknownItem = {id: \"Unknown\", label: \"Unknown\"}\n\nconst getItem = (val) => {\n    if (val === \"Unknown\"){return unknownItem}\n    let item = itemByID[val]\n    if (!item){\n        item = itemByLabel[val]}\n    if (item){return item[0]}\n}\n\nconst findObjByNumerialID = (numericalID,phases,phaseNames) => {\n    for (let phaseIndex = 0; phaseIndex < phaseNames.length; phaseIndex++) {\n        let phaseObjects = phases[phaseIndex];\n        let phaseName = phaseNames[phaseIndex];\n        if (phaseObjects.length > 0 && !hasSubPhases(phaseName)){\n            for (let entry of phaseObjects){\n                if (entry.numericalID === numericalID){\n                    return entry}\n            }}}}\n\n\nconst storeMisOrderedArgs = (numericalID, arg2, phases, phaseNames) => {\n    let objToModify = findObjByNumerialID(numericalID, phases, phaseNames)\n    if (!objToModify) {console.log(\"no object found for numericalID = \", numericalID)}  //just for debugging\n    else {\n        if (!objToModify.arg2){\n            objToModify.arg2 = [arg2.id]}\n        else {objToModify.arg2 = objToModify.arg2.concat([arg2.id])}}\n}\n\nconst storeMisOrderedFB = (numericalID, FB, constraintType, phases, phaseNames) => {\n    let objToModify = findObjByNumerialID(numericalID, phases, phaseNames)\n    if (!objToModify) {console.log(\"no object found for numericalID = \", numericalID)}  //just for debugging\n    else {\n        if (objToModify.orderingFB !== \"\") {\n            objToModify.orderingFB = objToModify.orderingFB + \".\\xa0\\xa0\" + FB}\n        else { objToModify.orderingFB = FB }\n        let status\n        \n        let appendString = \"\"\n        if (constraintType === \"phase\"){\n            appendString = \"misOrdered-phase-\"}\n        if (constraintType === \"item\"){\n            appendString = \"misOrdered-\"}\n        if (!(objToModify.status.includes(appendString)))\n                {status = appendString + objToModify.status \n                objToModify.status = status}}\n}\n\n\n//flattens out the phases and phaseNames data structures so that all phase and subphase\n//names have their own entry and each item under a phase or subphase has its own entry.\n//Collect and return unique names because phase and subphase names can appear multiple times in the \n//phases and phaseNames ds.  Having a unique list of names means that a constraint will only be checked once.\n\n\nconst collectEntriesToCheckConstraints = (phases, phaseNames) => {\n    let listOfNames = []\n    let listOfEntries = []\n    let uniqueListOfNames = []\n    let counter = -1\n    for (let phaseIndex = 0; phaseIndex < phaseNames.length; phaseIndex++) {\n        let phaseObjects = phases[phaseIndex];\n        let phaseName = phaseNames[phaseIndex];\n        let startIndex = phaseObjects[0].numericalID\n        let endIndex = phaseObjects[phaseObjects.length-1].numericalID\n\n        //handle phases and subphases first\n    \n        if (requiredPhaseNames.includes(phaseName) || requiredSubphases.includes(phaseName)) {\n            listOfEntries.push({ id: phaseName, numericalID: counter, numericalIDStart: startIndex, numericalIDEnd: endIndex })\n            listOfNames.push(phaseName)\n            if (!uniqueListOfNames.includes(phaseName)){uniqueListOfNames.push(phaseName)}}\n\n        //can't be an else to above because a phase can have entries but a subphase cannot\n        \n        if (phaseObjects.length > 0 && !hasSubPhases(phaseName)){\n            let phaseObjectNames = phaseObjects.map(obj => obj.id)\n            listOfEntries = listOfEntries.concat(phaseObjects)\n            uniqueListOfNames = uniqueListOfNames.concat(phaseObjectNames)\n            listOfNames = listOfNames.concat(phaseObjectNames)\n        }\n    }\nreturn [listOfNames, uniqueListOfNames, listOfEntries]\n\n}\n\nconst saveFailedConstraint = (lateArg, otherArg, constraintID) => {\n    let type\n    if ([\"phase\", \"sub-phase\"].includes(lateArg.type)){\n        type = \"phase\"}\n    else {type = \"item\"}\n    constraintsViolated.push({constraintID: constraintID, arg1: lateArg, op: \"before\", arg2: otherArg, type: type}) \n    return type\n}\n\nconst addToListOfFeedback = (parPhFB, last, label, repeating) => {\n    //feedback for nonphase\n    if (repeating){\n        if (last) {\n            parPhFB = parPhFB + \" and \"\n        }\n        else {parPhFB = parPhFB +  \", \"}}\n    parPhFB = parPhFB + label.toLowerCase()\n    return parPhFB\n}\n\n\n\nconst checkAgainst2ndArgs = (arg1st,args2nd,op,direction,constraintID,entryNames,entries,phases,phaseNames) => {\n    let endNum1st = findNameNumID(entryNames, entries, arg1st, \"end\")\n    let startNum1st = findNameNumID(entryNames, entries, arg1st, \"start\")\n    let label1st = arg1st.label\n    let phFB = \"\"\n    let par1PhFB = \"\"\n    let par2PhFB = \"\"\n    let repeating\n    let constraintType\n    if (args2nd.length > 0) {\n        let counter = 0\n        let violations = 0\n        for (let arg of args2nd) {\n            let last = false\n            let arg2nd = getItem(arg)\n            if (!!arg2nd) {\n                counter++\n                if (counter === args2nd.length){\n                    last = true}\n                let label2nd = arg2nd[\"label\"]\n                let startNum2nd = findNameNumID(entryNames, entries, arg2nd, \"start\")\n                let endNum2nd = findNameNumID(entryNames, entries, arg2nd, \"end\")\n                \n                switch (direction){\n                case \"before\":\n                    if (!!endNum1st && !!startNum2nd) {\n                        if (!(endNum1st < startNum2nd)) {  //if failed constraint i.e. arg1 is late\n                            //result = collectFB (constraintID, counter, arg1st, arg2nd, startNum1st, startNum2nd, endNum1st, endNum2nd, label1st, label2nd, last, constraintType, phases, phaseNames)\n                            //feedback for item\n                            violations++\n                            if (par1PhFB === \"\"){\n                                if (startNum1st === endNum1st) { \n                                    par1PhFB = \"You should have done \"\n                                    par1PhFB = addToListOfFeedback(par1PhFB, last, label1st, false)}     \n                                //feedback for phase\n                                else { \n                                    par1PhFB = \"You should have completed \"\n                                    par1PhFB = addToListOfFeedback(par1PhFB, last, label1st, false)}} \n                            if (startNum2nd === endNum2nd) {\n                                if (par2PhFB === \"\"){\n                                        par2PhFB = par2PhFB + \" before you did \"}  //feedback for item\n                                    if (violations > 1){repeating = true}\n                                    else {repeating = false}\n                                    par2PhFB = addToListOfFeedback(par2PhFB, last, label2nd, repeating)}\n                            else { \n                                if (par2PhFB === \"\"){\n                                    par2PhFB = par2PhFB + \" before starting \"}  //feedback for phase\n                                if (violations > 1){repeating = true}\n                                else {repeating = false}\n                                par2PhFB = addToListOfFeedback(par2PhFB, last, label2nd, repeating)}\n                            storeMisOrderedArgs(startNum1st, arg2nd, phases, phaseNames)\n                            constraintType = saveFailedConstraint(arg1st, arg2nd, constraintID)\n                        }\n                        else {\n                            if (op === \"or\") {\n                                return}}}\n                    break\n                case \"after\":  //for after just reverse 1st and 2nd args\n                    if (!!startNum1st && !!endNum2nd) {\n                        if (!(startNum1st > endNum2nd)) { //if failed constraint  i.e. arg2 is late  \n                            violations++                         \n                            if (startNum1st === endNum1st){\n                                //feedback for item \n                                if (par1PhFB === \"\")                              \n                                    {par1PhFB = \"You should have done \"}\n                                if (violations > 1){repeating = true}\n                                else {repeating = false}\n                                par1PhFB = addToListOfFeedback(par1PhFB, last, label2nd, repeating)}\n                            //feedback for phase \n                            else{\n                                if (par1PhFB === \"\")                               \n                                    {par1PhFB = \"You should have completed \"}\n                                if (violations > 1){repeating = true}\n                                else {repeating = false}\n                                par1PhFB = addToListOfFeedback(par1PhFB, last, label2nd, repeating)}\n                            if (par2PhFB === \"\"){\n                                if (startNum2nd === endNum2nd){     \n                                    par2PhFB = par2PhFB + \" before you did \"\n                                    par2PhFB = addToListOfFeedback(par2PhFB, last, label1st, false)}\n                                else {                                 \n                                    par2PhFB = par2PhFB + \" before starting \" //feedback for nonphase\n                                    par2PhFB = addToListOfFeedback(par2PhFB, last, label1st, false)}}\n                            storeMisOrderedArgs(startNum2nd, arg1st, phases, phaseNames)   //feedback for phase\n                            constraintType = saveFailedConstraint(arg2nd, arg1st, constraintID)}\n                        else {\n                            if (op === \"or\") {\n                                return}}}\n                    break\n                default: break\n                }\n            }     \n        }        \n        phFB = par1PhFB + par2PhFB\n        if (phFB !== \"\") {\n            storeMisOrderedFB(startNum1st, phFB, constraintType, phases, phaseNames)}    \n    }\n}\n\n\n\nconst checkConstraintsForArg = (arg1st, constraint, phases, phaseNames, entryNames, entries) => {\n    \n    let args2nd = constraint.before\n    let op = constraint.beforeOp\n    checkAgainst2ndArgs(arg1st,args2nd,op,\"before\",constraint.id,entryNames,entries,phases,phaseNames)\n\n    args2nd = constraint.after\n    op = constraint.afterOp\n    checkAgainst2ndArgs(arg1st,args2nd,op,\"after\",constraint.id,entryNames,entries,phases,phaseNames)}\n    \n    \n  //end support functions for constraint checking              \n                        \n\n\n//To DO: filter constraints in/out based on findings available for this scenario\n\n//main function for constraint checking \nconst checkAgainstKB = (phases, phaseNames) => {\n\n    let result = collectEntriesToCheckConstraints(phases, phaseNames)\n    let entryNames = result[0]\n    let uniqueEntryNames = result[1]\n    let entries = result[2]\n    uniqueEntryNames.forEach(firstArg => {\n        let firstArgItem = getItem(firstArg)\n        if (!!firstArgItem) {        \n            let constraint = getConstraint(firstArgItem)  //will find only one constraint per 1st arg\n            if (!!constraint) {\n                checkConstraintsForArg(firstArgItem, constraint, phases, phaseNames, entryNames, entries)}}})            \n    //only expect to change objects in phases\n    return [phases, phaseNames]\n}\n\n\n//main function for dealing with missing assessment steps\n\nconst checkForMissingAssessments = (problems,events,confirmedEvents,phaseNames,phases) => {\n    let neededScenAssessments = collectScenAssessments(problems)\n    let indexCounter = events.length;\n    var checklistSteps = scenario.checkListMetaData.filter(md => [MDB_TYPES.ASSESS, MDB_TYPES.REQUIRED].includes(md.type));\n\n    // before evaluating assessment steps, deal with exceptional cases where one or more steps is not\n    // necessary for a given scenario.  Because GCS value is a string and not a formatted object\n    // we can't reliably parse out values and units to do more general checks so can only set what\n    // steps should not be assessed for a particular scenario.  Requires info on feedback to give as\n    // well.\n    // Get any exceptional steps associated with the current scenario\n    var exceptions = [];\n    for (let exceptionDef of exceptionDefs) {\n        if (exceptionDef.scenarioName === scenario.name) {\n            exceptions = exceptionDef.exceptions;\n            break;\n        }\n    }\n\n    exceptions.forEach((exception, j) => {\n        // remove the step from the checklist as it is not required\n        checklistSteps = checklistSteps.filter(entry => entry.id !== exception[0]);\n\n        // if the step was done during the observation then mark it as an issue\n        if (confirmedEvents.includes(exception[0])) {\n            // it could appear in any phase so check all phases and mark\n            // each instancs as unnecessary\n            phases.forEach((phaseObjects, j) => {\n                phaseObjects.forEach((action, i) => {\n                    if (action.id === exception[0]) {\n                        action.why = exception[1];\n                        action.status = \"notNecessary\";\n                    }\n                });\n            });\n        }\n\n    });\n\n    // iterate through all checklist steps for ones for which we don't have formated objects\n    checklistSteps.forEach((cls, i) => {\n        if (!confirmedEvents.includes(cls.id)) {\n            // add so we don't check for the missing checklist item again\n            confirmedEvents.push(cls.id);\n            let phaseObject = {\n                \"comment\": \"\",\n                \"numericalID\": indexCounter,\n                \"status\": \"missingRequiredAssessment\",\n                \"intvStatus\": [], //will be an array what patient status checks were and weren't done\n                \"expertPhase\": \"\",\n                \"workingPhase\": \"\",\n                \"contraindicatedWhy\": \"\",\n                \"minimalWhy\": \"\",\n                \"why\": \"\",\n                \"probLabel\": \"\",\n                \"protocol\": \"\",\n                \"actionDescription\": \"\",\n                \"assessmentFB\": \"\",\n                \"timestamp\": -1\n            };\n\n            //copy over the step fields that exist (type dependent)\n            const STEP_FIELDS = [\"id\", \"label\", \"finding\", \"phase\", \"subPhase\", \"type\", \"prompt\"];\n            STEP_FIELDS.forEach(fldName => {\n                if (!!cls[fldName]) {\n                    phaseObject[fldName] = cls[fldName];\n                }\n            });\n            if (!!cls.subPhase) { phaseObject.workingPhase = cls.subPhase; }\n            else { if (!!cls.phase) { phaseObject.workingPhase = cls.phase; } }\n            phaseObject.when = phaseObject.workingPhase;\n            phaseObject.expertPhase = phaseObject.workingPhase;\n\n            if (!!phaseObject.label) { phaseObject.actionDescription = phaseObject.label; }\n            \n            //let findings = scenario.assessmentFindings[cls['id']]\n            //if (!!findings & findings !== \"Unremarkable\" & findings !== \"Stable\"){\n\n            if (neededScenAssessments.includes(cls['id'])){\n                phaseObject.assessmentFB = \"Thus you missed finding: \" + scenario.assessmentFindings[cls['id']]}\n            if (phaseObject.type === \"required-action\"){\n                phaseObject.status = \"missingRequiredAssessment\"\n            }\n            insertInPhaseInOrder(phaseNames, phases, phaseObject, i);\n            indexCounter++;\n        }\n    });\n    return[confirmedEvents, phaseNames, phases, indexCounter]\n}\n\n//support functions for updating and searching the phaseNames and phases data structures\nconst insertInPhaseInOrder = (phaseNames, phases, object, objIndex) => {\n    let phase\n    phase = object.when;  //what phase should it be added to\n    let phaseIndex = phaseNames.lastIndexOf(phase); //get the index for the last instance of the phase\n    let phaseObjects = phases[phaseIndex];  //get the objects associated with that phase\n    if (!phaseObjects) { phaseObjects = []; }\n    phaseObjects.splice(objIndex - 1, 0, object);  //insert it at the place indicated by input objIndex\n    phases[phaseIndex] = phaseObjects;\n};\n\nconst getEndSubPhase = (inPhaseId, phaseNames) => {\n    let subPhases = getSubPhases(inPhaseId);\n    let subPhaseName;\n    let reversedSubPhases = [...subPhases].reverse();\n    for (let subPhase of reversedSubPhases) {\n        subPhaseName = phaseNames.find(id => id === subPhase.id);\n        if (!!subPhaseName) { break; }\n    }\n    return subPhaseName;\n};\n\nconst getEndSubPhaseIndex = (inPhaseId, phaseNames) => {\n    let subPhaseName = getEndSubPhase(inPhaseId, phaseNames);\n    let index = phaseNames.lastIndexOf(subPhaseName);\n    //console.log(subPhaseName,index)\n    return index;\n};\n\n// sts 01/23/22\nconst getSubPhases = (phaseId) => {\n    return checklistHierarchy.find(phase => phase.id === phaseId).subPhases\n    // let mainPhases = findPhases();\n    // let phaseEntry = mainPhases.find(phase => phase.id === phaseId);\n    // return (phaseEntry.subPhases);\n};\n\nconst hasSubPhases = (phaseId) => {\n    let phase = checklistHierarchy.find(phase => phase.id === phaseId)\n    if (!!phase && !!phase.subPhases){\n        return true}\n    else {return false}\n}\n\n  \n//given a numerical id, what is its parent phase or subphase\n//find the header under which the input numericalID appears\nconst findHeaderFor = (numericalID, log) => {\n    let candidateHeader = {};\n    let foundHeader = {};\n    for (let entry of log) {\n        if (entry.id === \"problemHeader\") {\n            candidateHeader = entry;\n        }\n        else {\n            if (entry.numericalID === numericalID) {\n                foundHeader = candidateHeader;\n                break;\n            }\n        }\n    }\n    return (foundHeader);\n};\n\n//rearrange the problem data structure for use during analysis\n\nconst setupProblems = (defs, sols, actions) => {\n    let problems = [];\n    for (let problemDef of defs) {\n        let problem = {};\n        \n\n        //new interface\n        if (!!sols && !!actions){\n            version = \"post 5/1/22\"\n            let solutionIDs = problemDef.solutions;\n            let probSols = sols.filter(sol => sol.problemID === problemDef.id)\n            problem.probLabel = problemDef.label;\n            problem.id = problemDef.id\n            problem.lifeThreat = problemDef.lifeThreat\n            problem.vitals = problemDef.vitals\n            problem.allActions = []\n            problem.allContras = []\n            let assessments = problemDef.assessments\n            problem.assessments = assessments.map(obj => obj.assessmentID)\n            problem.solutions = []\n            for (let solID of solutionIDs){\n                let sol = probSols.filter(sol => sol.id === solID)[0]\n                let solution = Object.assign({}, sol)\n                solution.actions = []\n                solution.otherActions = []\n                let actEntries\n                let actIDs = sol.actions\n                actEntries = actions.filter(act => actIDs.includes(act.id))\n            \n                for (let entry of actEntries){\n                    let act = Object.assign({}, entry)\n                    act.id = act.interventionID\n                    let item = itemByID[act.id]\n                    act.probLabel = problem.probLabel\n                    if (!!item){\n                        act[\"id-label\"] = item[0].label}\n                    else {act[\"id-label\"] = act.id}\n                    switch (act.protocolRelationship){\n                        case \"contraindicated\":\n                        case \"irrelevant\":\n                        case \"unnecessary\":\n                            solution.otherActions.push(act)\n                            pushNew(act, problem.allContras)  //need to be able to annotate an action without deciding yet on which solution under\n                            break\n                        case \"required\":\n                        case \"minimal\":\n                        case \"optional\":\n                            solution.actions.push(act)\n                            pushNew(act, problem.allActions)  //need to be able to annotate an action without deciding yet on which solution under\n                            break\n                        default:\n                            break}\n                }\n                problem.solutions.push(solution)\n            }\n        }\n        // old interface but only expects one solution\n        else {\n            version = \"pre 5/1/22\"\n            let solutionID = problemDef.solutions[0];\n            let solution = Object.assign({})\n            problem.probLabel = problemDef.problem;\n            problem.lifeThreat = problemDef.lifeThreat\n            problem.allActions = []\n            problem.allContras = []\n            solution.actions = solutionID.actions;\n            solution.minimalWhy = solutionID.minimalWhy;\n            solution.protocols = solutionID.protocols\n            problem.assessments = problemDef.assessments;\n            problem.solutions = []\n            solution.otherActions = solutionID.contraindications;\n            solution.actions.forEach(act => {\n                pushNew(act, problem.allActions)  //need to be able to annotate an action without deciding yet on which solution under\n                act.probLabel = problem.probLabel\n                if (act.minimal){act.protocolRelationship = \"minimal\"}\n                if (act.optional){act.protocolRelationship = \"optional\"}\n                if (!act.minimal && !act.optional){act.protocolRelationship = \"required\"}})\n            solution.otherActions.forEach(act => {  //need to be able to annotate an action without deciding yet to which solution under\n                    pushNew(act, problem.allContras)\n                    act.protocolRelationship = \"contraindicated\"})\n        \n            problem.solutions.push(solution)\n            //not in new interface\n            problem.allProblemProtocols = problemDef.protocol;\n            \n            }\n        problems.push(problem);\n        \n    }\n    return (problems);\n    //console.log(problems)\n};\n\n// this approximates the placement for a missing intervention based on ordering of interventions\n// in the problems definitions, what appears in the log that is just before and just after\n// the item to be inserted, and what is marked as required that is in the log just before and after.  An approach that\n// utilizes partial ordering constraints would be better.  Also it is not clear what to do for really badly ordered\n// actions on the part of the student.  Note that it only looks for two anchor points before and two anchor points after\n// rather than all potential anchor points.  Also it does not deal with a phase that is split into multiple time periods\n// within a log. It looks for the best placement in the last phase found.\n\n//input orderedArrayObjects is the interventions for a problem as ordered in the problem def\n// objIndex is the index in orderedArrayObjects for the intervention object that needs to be inserted in phases\nconst insertInPhaseRelativeToSuggestedOrder = (phaseNames, phases, object, orderedArrayObjects, objIndex) => {\n    // if expertPhase in object is a phase then find the last subphase and insert there instead of at the beginning\n    let phaseIndex = -1;\n    //console.log(object);\n    // if it is a subphase or a phase with no subphases then get the last entry for a proposed initial insertion point\n    // object.expertPhase is the phase recommended for this action to appear\n    if (object.expertPhase === \"\"){\n        /* let errorMsg = 'No phase specified in the problem defs for object: ' + object.actionDescription;\n        throw new Error(errorMsg) */\n        //just use the next to last phase if none is specified\n        object.expertPhase = requiredPhaseNames[requiredPhaseNames.length - 2]}\n        \n\n    if (requiredSubphases.includes(object.expertPhase) || !getSubPhases(object.expertPhase)) {\n        phaseIndex = phaseNames.lastIndexOf(object.expertPhase);\n    }\n    // if it is a phase then get the last entry of the last suphase within it for a proposed intial insertion point\n    else {\n        phaseIndex = getEndSubPhaseIndex(object.expertPhase, phaseNames);}\n        \n    //update object when field which is mostly to see what gets computed for the insertion point\n    object.when = phaseNames[phaseIndex];\n        \n    \n\n    let objectsBefore = orderedArrayObjects.slice(0, objIndex - 1);\n    let objectBefore = orderedArrayObjects[objIndex - 1];\n    // console.log(\"Objects before in def\", {...objectsBefore})\n    let requiredObjectBefore = [...objectsBefore].reverse().find(entry => entry.required);\n    let objectAfter = orderedArrayObjects[objIndex + 1];\n    let objectsAfter = orderedArrayObjects.slice(objIndex + 1);\n    let requiredObjectAfter = objectsAfter.find(entry => entry.required);\n    //let phaseIndex = phaseNames.lastIndexOf(object.expertPhase);\n    let phaseObjects = [...phases[phaseIndex]]; //trying for a deep copy of the array mainly for debug via console.log\n\n    //console.log(phaseObjects)\n    let indexBefore = -1;\n    let indexAfter = -1;\n    let indexRequiredBefore = -1;\n    let indexRequiredAfter = -1;\n    let insertionIndex = false;\n    if (objectBefore) { indexBefore = phaseObjects.findIndex(entry => entry.id === objectBefore.id); }\n    if (objectAfter) { indexAfter = phaseObjects.findIndex(entry => entry.id === objectAfter.id); }\n    if (requiredObjectBefore) { indexRequiredBefore = phaseObjects.findIndex(entry => entry.id === requiredObjectBefore.id); }\n    if (requiredObjectAfter) { indexRequiredAfter = phaseObjects.findIndex(entry => entry.id === requiredObjectAfter.id); }\n    if (objectAfter) { indexAfter = phaseObjects.findIndex(entry => entry.id === objectAfter.id); }\n    // There is a more compact way to do the below but this made\n    // it easier for me to get the logic right\n    // insert according to required before first as we want to follow something that was required\n    if (indexRequiredBefore !== -1) {\n        insertionIndex = indexRequiredBefore + 2;\n        // but if the just before object is greater then insert relative to it\n        if (indexBefore > indexRequiredBefore) { insertionIndex = indexBefore + 2; }\n    }\n    //if no required before and not required after then insert relative to\n    //required item after in actions definition\n    if (!insertionIndex && indexRequiredAfter !== -1) {\n        insertionIndex = indexRequiredAfter + 1;\n        // unless the just after is smaller then override and insert relative to it\n        if (indexAfter < indexRequiredAfter) { insertionIndex = indexAfter + 1; }\n    }\n    //otherwide if have a just before insert relative to it\n    if (!insertionIndex && indexBefore !== -1) {\n        insertionIndex = indexBefore + 2;\n    }\n    //otherwise if have a just after insert relative to it\n    if (!insertionIndex && indexAfter !== -1) {\n        insertionIndex = indexAfter + 1;\n    }\n    //otherwise put at end of phase\n    if (!insertionIndex) {\n        insertionIndex = phaseObjects.length + 2;\n    }\n    insertInPhaseInOrder(phaseNames, phases, object, insertionIndex);\n\n};\n\nconst determineHLcolor = (lowerColor, higherColor) => {\n    let newColor = higherColor\n    if (lowerColor === \"red\") {\n        newColor = \"red\"\n    }\n    if (lowerColor === \"yellow\" && newColor !== \"red\") {\n        newColor = \"yellow\"\n    }\n    return newColor\n}\n\n//to display the log using the phase structures accumulated\n// i.e. puts the phases data together in the order in which\n// should be displayed in debriefing log\nconst organizeLogDisplay = (phaseNames, phases) => {\n    let displayObjects = [];\n    let entryIndex = 1;\n    let headerIndex = 1;\n    let problemHeaderColor = \"green\"\n    let subPhaseColor = \"green\"\n    let subPhaseStatuses = []\n    let phaseStatuses = []\n    let newPhaseObjects = []\n    let headerObj = {\n        \"id\": \"assessmentHeader\",\n        \"status\": \"\",\n        \"phaseOrderStatus\": \"good\",\n        \"type\": \"header\",\n        \"numericalID\": 1,\n        \"displayColor\": \"\",\n        \"why\": \"\",\n        \"label\": \"\",\n        \"labelID\": \"\",\n        \"protocol\": \"\"\n    };\n    let subHeaderObj = {\n        \"id\": \"assessmentSubHeader\",\n        \"status\": \"\",\n        \"phaseOrderStatus\": \"good\",\n        \"type\": \"header\",\n        \"numericalID\": 1,\n        \"displayColor\": \"\",\n        \"why\": \"\",\n        \"label\": \"\",\n        \"labelID\": \"\",\n        \"phaseID\": \"\",\n        \"protocol\": \"\"\n    };\n    \n    let priorHLPhaseItem = \"\"\n    let endEntry = false\n    for (let phaseIndex = 0; phaseIndex < phaseNames.length; phaseIndex++) {\n        let iPhaseObjects = phases[phaseIndex];\n        let phaseName = phaseNames[phaseIndex];\n        let process = true\n        \n        if (requiredPhaseNames.includes(phaseName) && hasSubPhases(phaseName)) {\n            process = false}\n\n        if (iPhaseObjects.length > 0 && process) {\n                //for this set of objects, find the worst scoring item\n            let phaseObjects = phases[phaseIndex];\n            subPhaseColor = \"green\"\n            for (let phaseObject of phaseObjects) {\n                if (phaseObject.type !== \"intervention\"){\n                    subPhaseStatuses.push(phaseObject.status)}\n                //else {hierProblemResults.push(phaseObject)} \n                if (problemStates.includes(phaseObject.status)) {\n                    subPhaseColor = \"red\";     \n                }\n                // Red has a higher priority than yellow so will allow to override it\n                if (cautionStates.includes(phaseObject.status) && subPhaseColor !== \"red\") {\n                    subPhaseColor = \"yellow\";    \n                }               \n                phaseObject.numericalID = entryIndex++;\n                //entryIndex++;\n            };\n\n            let subheader = Object.assign({}, subHeaderObj)\n            let localPhaseName = phaseNames[phaseIndex]\n            let localPhaseItem = getItem(localPhaseName)\n            subheader.label = localPhaseItem.label\n            subheader.labelID = localPhaseItem.id\n            subheader.status = getPhaseStatus(subPhaseStatuses)\n            subheader.displayColor = subPhaseColor\n            let highLevelPhase = subPhases[localPhaseName]\n            let highLevelPhaseItem = getItem(highLevelPhase)\n            subheader.phaseID = highLevelPhaseItem.id\n\n            //Note that the inserted headers will have their own numerical id and\n            //am dividing by 1000 for headers so their numerical id will be unique\n            //to headers.  Am assuming we would never have more than 1000 events\n            //observed.  Will use the numerical ids for testing before and after\n            //constraints.       \n            \n            if (priorHLPhaseItem === \"\") {\n                priorHLPhaseItem = highLevelPhaseItem\n                problemHeaderColor = determineHLcolor(subPhaseColor, problemHeaderColor)\n            }\n            \n            if (phaseIndex === phaseNames.length - 1) {\n                //this closes out the prior phase and the new subphase \n                let header = Object.assign({}, headerObj)\n                if (highLevelPhase !== priorHLPhaseItem.label){    //ending with start of a new phase\n                    header.label = priorHLPhaseItem.label\n                    header.labelID = priorHLPhaseItem.id\n                    header.status = getPhaseStatus(phaseStatuses)\n                    header.displayColor = problemHeaderColor;\n                    header.numericalID = headerIndex++ / 1000\n                    displayObjects.push(header)\n                    displayObjects.push(...newPhaseObjects)\n                    newPhaseObjects = []}\n\n                header = Object.assign({}, subheader)\n                header.label = highLevelPhaseItem.label\n                header.labelID = highLevelPhaseItem.id\n                header.id = \"assessmentHeader\"\n                header.numericalID = headerIndex++ / 1000 \n                displayObjects.push(header)\n                      \n                if (highLevelPhase === subheader.label) { \n                    displayObjects.push(...newPhaseObjects)\n                    displayObjects.push(...phaseObjects)}\n                else {\n                    subheader.numericalID = headerIndex++ / 1000 \n                    displayObjects.push(...newPhaseObjects)\n                    displayObjects.push(subheader)\n                    displayObjects.push(...phaseObjects)}          \n                endEntry = true;\n            }\n\n            //save the accumulated high-level phase if the phase changes \n            if (!endEntry) {\n                if (highLevelPhase !== priorHLPhaseItem.label) {\n                    let header = Object.assign({}, headerObj)\n                    header.label = priorHLPhaseItem.label\n                    header.labelID = priorHLPhaseItem.id\n                    header.status = getPhaseStatus(phaseStatuses)\n                    phaseStatuses = []\n                    header.displayColor = problemHeaderColor;\n                    header.numericalID = headerIndex++ / 1000\n                    displayObjects.push(header)\n                    displayObjects.push(...newPhaseObjects)\n                    //reinitialize for the new phase   \n                    phaseStatuses.push(...subPhaseStatuses)\n                    subPhaseStatuses = []\n                    if (highLevelPhase === subheader.label) {\n                        newPhaseObjects = [...phaseObjects]\n                    }\n                    else {\n                        subheader.numericalID = headerIndex++ / 1000\n                        newPhaseObjects = [subheader]\n                        newPhaseObjects.push(...phaseObjects)\n                    }\n                    priorHLPhaseItem = highLevelPhaseItem\n                    problemHeaderColor = determineHLcolor(subPhaseColor, \"green\")\n                }\n                else {\n                    problemHeaderColor = determineHLcolor(subPhaseColor, problemHeaderColor)\n                    phaseStatuses.push(...subPhaseStatuses)\n                    subPhaseStatuses = []\n                    if (highLevelPhase === subheader.label) {\n                        newPhaseObjects.push(...phaseObjects)\n                    }\n                    else {\n                        subheader.numericalID = headerIndex++ / 1000\n                        newPhaseObjects.push(subheader)\n                        newPhaseObjects.push(...phaseObjects)\n                    }\n                }\n            }\n        \n        }\n    }\n    return displayObjects;\n}\n\n\n\n\nconst evalForIncorrectAnswer = (promptID, answerID, isIntervention) => {\n    //check each prompt and if is the appropriate one then\n    let answers = undefined\n    if (isIntervention) {\n        answers = scenario.associations[promptID];\n    }\n    else { answers = scenario.checkListCorrectness[promptID]; }\n\n    if (answers === undefined) { console.log(\"didn't find answers for \", promptID); return (false) }  //can't grade if answers not found in spec\n\n    if (Array.isArray(answers)) {\n        //returns bool regarding whether answerID NOT in answers\n        return !(answers.find(ansId => ansId === answerID));\n\n    }\n    else {\n        return !(answers === answerID);\n    }\n};\n\n\nconst getCorrectAnswerLabel = (promptID, isIntervention) => {\n    let answers\n    let metaData\n    if (isIntervention){\n        answers = scenario.associations[promptID];\n        metaData = scenario.intvMetaData}\n    else {answers = scenario.checkListCorrectness[promptID];\n        metaData = scenario.checkListMetaData}\n    let answerLabels = false;\n    if (Array.isArray(answers)) {\n        answers.forEach((answer, j) => {\n            metaData.forEach((entry, i) => {\n                if (entry.id === answer) {\n                    if (answerLabels === false) {\n                        answerLabels = entry.label;\n                    }\n                    else { answerLabels = answerLabels + \", \"; }\n                    return;\n                }\n            });\n        });\n    }\n\n    else {\n\n        metaData.forEach((entry, i) => {\n            /* //needed to find out what the types are for debugging\n            let answertypes = []\n            if (!answertypes.find(type => type === entry.type)){\n                answertypes.push(entry.type)} */\n\n            if (entry.id === answers) {\n                answerLabels = entry.label;\n            }\n        });\n    }\n    //answerLabels = answerLabels.charAt(0).toLowerCase() + answerLabels.slice(1);\n    /* if (answerLabels){\n        answerLabels = \"'\" + answerLabels + \"'\";} */\n    return answerLabels\n};\n\nconst getAnswerLabel = (answerID, isIntervention) => {\n    let answerLabel = \"\";\n    switch (version) {\n        case \"pre 5/1/22\":\n            let metaData\n            if (isIntervention) {\n                metaData = scenario.intvMetaData\n            }\n            else { metaData = scenario.checkListMetaData }\n            metaData.forEach((entry, i) => {\n                if (entry.id === answerID) {\n                    answerLabel = entry.label;\n                }\n            })\n            break\n        case \"post 5/1/22\":\n            answerLabel = answerIDs[answerID]\n            break\n        default:\n            break\n    }\n    return (answerLabel || false);\n}\n\n// create structure for tracking whether interventions are checked\nconst insertMissingIntvChecks = (events, statusTracking) => {\n    let toUpdate\n    for (const [key, entry] of Object.entries(statusTracking)) {\n        if (Array.isArray(entry)){\n            for (let obj of entry) {\n                let newObj = {\"label\": key, \"foundCk\": obj[\"foundCk\"]}\n                toUpdate = getEventsByIdTime(events,obj[\"intervention\"],obj[\"timestamp\"])\n                for (let intv of toUpdate) {\n                    if (!intv[\"intvStatus\"].includes(newObj)){\n                       intv[\"intvStatus\"].push(newObj)}\n                }}}\n        else {\n            let newObj = {\"label\": \"intervention status\", \"foundCk\": entry[\"foundCk\"]}\n            toUpdate = getEventsByIdTime(events,key,entry[\"timestamp\"])\n            toUpdate.forEach(intv => {\n                if (!intv[\"intvStatus\"].includes(newObj)){\n                    intv[\"intvStatus\"].push(newObj)}})}\n    }\n    return events\n}\n\nfunction findBestSolMatch (prob, confirmedEvents){\n    prob.bestFittingSol = []\n        let bestIndex = -1\n        let finalIndex = -1\n        let bestVal = -1 \n        let bestLen = -1  \n        const solutions = prob.solutions\n        solutions.forEach((sol, j) => {\n            let solVal\n            sol.found = []\n            sol.notFound = []\n            sol.actions.forEach((action, f) => {\n                if (confirmedEvents.includes(action.id + \"+\" + prob.probLabel)){\n                    (sol.found).push(action.id)}\n                else {(sol.notFound).push(action)}\n                })\n            let solLen = (sol.actions).length\n            let solLenFound = (sol.found).length\n            if (solLenFound === 0){\n                solVal = 0}\n            else {solVal = solLenFound/solLen}\n            if (solVal === 1 && solLenFound > bestLen){  //prefer the longest solution match\n                bestLen = solLenFound\n                bestIndex = j\n                finalIndex = j} //finalIndex represents a perfect match\n            else {\n                if (solVal >= bestVal && solLenFound > bestLen) {\n                    bestLen = solLenFound\n                    bestIndex = j\n                    bestVal = solVal}}\n            \n        })\n\n        if (finalIndex === -1){finalIndex = bestIndex}\n    \n        return solutions[finalIndex]\n}\n\nconst insertMissingInterventions = (problems,confirmedEvents,indexCounter,phaseNames,phases) => {\n    problems.forEach(prob => {\n        //find the best fitting solution based on one with the max number of actions found\n        let sol = findBestSolMatch(prob, confirmedEvents)\n        prob.bestFittingSol = sol \n        \n        // now we just have to insert actions not found\n        let actions = sol.notFound\n        actions.forEach((action, k) => {\n                confirmedEvents.push(action.id + \"+\" + prob.probLabel);\n                let phaseObject = {\n                    \"comment\": \"\",\n                    \"numericalID\": indexCounter,\n                    \"status\": \"\",\n                    \"intvStatus\": [], //will be an array what patient status checks were and weren't done\n                    \"required\": true,\n                    \"when\": \"\",\n                    \"suggestedPhase\": \"\",\n                    \"expertPhase\": \"\",\n                    \"probLabel\": \"\",\n                    \"minimalWhy\": \"\",\n                    \"assessmentsNeeded\": \"\",\n                    \"protocol\": \"\",\n                    \"protocolRelationship\": \"\",\n                    \"actionDescription\": \"\",\n                    \"type\": \"intervention\",\n                    \"timestamp\": -1\n                };\n\n                //copy over the step fields that exist (type dependent)\n                const ACTION_FIELDS = [\"id\", \"phase\", \"why\", \"protocolRelationship\"];\n                ACTION_FIELDS.forEach(fldName => {\n                    if (!!action[fldName]) {\n                        phaseObject[fldName] = action[fldName];\n                    }\n                });\n\n                const SOLUTION_FIELDS = [\"minimalWhy\", \"protocols\", \"strictActionOrdering\"];\n                SOLUTION_FIELDS.forEach(fldName => {\n                    if (!!sol[fldName]) {\n                        phaseObject[fldName] = sol[fldName];\n                    }\n                });\n\n                //copy over the step fields that exist (type dependent)\n                const PROBLEM_FIELDS = [\"probLabel\"];\n                PROBLEM_FIELDS.forEach(fldName => {\n                    if (!!prob[fldName]) {\n                        phaseObject[fldName] = prob[fldName];\n                    }\n                });\n\n                //initialize some fields above that come from problem and action if they are defined\n                if (!!prob.assessments) { phaseObject.assessmentsNeeded = prob.assessments }\n                if (!!prob.protocols) { phaseObject.protocol = prob.protocols }\n                if (!!action[\"id-label\"]) { phaseObject.label = action[\"id-label\"]; }\n                if (!!action[\"id-label\"]) { phaseObject.actionDescription = action[\"id-label\"]; }\n                let phaseVal\n                if (!!action.subPhase) { phaseVal = action.subPhase }\n                if (!!action.phase && !phaseVal) { phaseVal = action.phase }\n                if (phaseVal) {\n                    phaseObject.when = phaseVal;\n                    phaseObject.expertPhase = phaseVal;\n                    phaseObject.suggestedPhase = phaseVal;\n                }\n\n                phaseObject.status = \"missing\" + capitalizeFirstLetter(phaseObject.protocolRelationship)\n                //assume actions are in the suggested order to solve a problem\n                if (![\"optional\", \"unnecessary\", \"irrelevant\"].includes(phaseObject.protocolRelationship)) {\n                    insertInPhaseRelativeToSuggestedOrder(phaseNames, phases, phaseObject, actions, k);\n                    indexCounter++;\n                }\n            \n\n\n        })\n    });\nreturn [indexCounter,phaseNames,phases]}\n\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n\n//the main function for analyzing the observation log\nfunction analyzeEvents(scen, log) {\n    let events = log.events;\n    console.log(\"in analyzeEvents\")\n    // sts 1/23/22 moved the setting of the following into initGlobals()\n    // setScenario(scenario)\n    // setupSubphasePhaseLookup()\n    // findSubphases();\n    initGlobals(scen)\n\n    //preprocess some of data from problems/solutions\n    //and for now just flatten it some to set it up to\n    //look more like the original problem actions in scenario\n    // assumes there is just one solution per problem for now.\n    let problemDefs = scenario.problems;\n    let problemActions = scenario.actions;\n    let problemSolutions = scenario.solutions;\n    let problems = setupProblems(problemDefs, problemSolutions, problemActions);\n    \n    //In the remainder, just dealing with the first solution for each problem\n    //so if we ever have more than one solution for a problem this code needs to\n    //be updated.  Would need to consider the additional solutions to decide which\n    //solution is the best fit for the observer student\n\n\n    let formattedActions = [];\n    let annotatedResults = annotateInputEvents(events,problems)\n    //phaseNames and phases are two arrays synchronized be array indices\n    //phases contains just the steps under the phase (thus could be a phase or subphase in observer interface)\n    //phaseNames contains the label for each phase in phases.  Makes it a bit easier to search phaseNames to get the\n    //indice for last instance of a phase label and access its objects\n    let phases = annotatedResults[0];  \n    let phaseNames = annotatedResults[1]; \n    let confirmedEvents = annotatedResults[2]\n    let intvsTracking = annotatedResults[3]\n    \n\n    /* //now create some similar structures for the parents of the above phases\n    //so have all the associated event objects in parents and parentNames\n    //for easy lookup\n    let parentResults = collectParentPh(phaseNames)\n    let parents = parentResults[0]  //events under this parent\n    let parentNames = parentResults[1] */\n\n    //update relative to constraints and comprises definitions\n    //for now it just compares two constraint args of the same type\n    //for what currently exists\n    let kbUpdates = checkAgainstKB(phases,phaseNames)\n    phases = kbUpdates[0]\n    phaseNames = kbUpdates[1]\n    \n    //add missing phase names to phaseNames\n    //as do insertions should consider the temporal ordering constraints\n    \n    let updatedPhases = insertMissingSubphases(phases, phaseNames)\n    phases = updatedPhases[0]\n    phaseNames = updatedPhases[1]\n\n\n    // check for missing checklist steps\n    //as do insertions should consider the temporal ordering constraints\n    let postAssessmentReview = checkForMissingAssessments(problems,events,confirmedEvents,phaseNames,phases)\n    confirmedEvents = postAssessmentReview[0]\n    phaseNames = postAssessmentReview[1]\n    phases = postAssessmentReview[2]\n    let indexCounter = postAssessmentReview[3]\n\n\n\n    // this section could be moved into a separate function so that\n    // the parts of the main analysis are clearer\n\n    // start insert missing interventions\n\n    let postInterventionReview = insertMissingInterventions(problems,confirmedEvents,indexCounter,phaseNames,phases)\n    indexCounter = postInterventionReview[0]\n    phaseNames = postInterventionReview[1]\n    phases = postInterventionReview[2]\n    // search for missing interventions for each action\n    // Doing this separately from the earlier actions loop because\n    // we wanted to add in missing assessment steps first\n    // since interventions depend on appropriate assessments having \n    // been done\n\n\n\n   // end insert missing interventions\n    \n    \n    // put together the phases into a single array ordered as directed by phases\n    \n    formattedActions = organizeLogDisplay(phaseNames, phases);\n    //console.log(\"formattedActions after organizeLogDisplay = \", formattedActions)\n\n    // Now that it is all rejoined into a single list, do some updating with additional\n    // analysis results\n\n    formattedActions = insertMissingIntvChecks(formattedActions, intvsTracking)\n    \n    \n    let priorProb = \"N/A\";\n\n    let finalActions = [];\n    //console.log(\"formattedActions = \", formattedActions)\n\n    formattedActions.forEach((eventObj, j) => {\n        let intvHeaderIndex = 1\n\n        if (insertInterventionHeader && eventObj.type === \"intervention\" && eventObj.probLabel && !(priorProb === eventObj.probLabel)) {\n            priorProb = eventObj.probLabel;\n            let headerObject = {\n                \"id\": \"interventionHeader\",\n                \"status\": \"good\",\n                \"phaseOrderStatus\": \"good\",\n                \"labelID\": eventObj.probLabel,\n                \"type\": \"header\",\n                \"numericalID\": intvHeaderIndex++/3000,\n                \"displayColor\": \"green\",\n            //    \"why\": \"\",\n                \"probLabel\": eventObj.probLabel,\n                \"protocol\": \"\"\n            };\n            finalActions.push(headerObject);\n        }\n        finalActions.push(eventObj);\n    });\n\n    // start overall analysis to determine if all actions to solve a problem are present\n\n    // now we analyze all that we've found in the log to see whether\n    // all the actions were done for each problem and reset\n    // the status if not all are there but should be counted\n    // as minimal for the feedback.\n    let pActions = []; //here we will store the actual problem actions that student did\n    let pNames = []; //here we will store the problem names for the above with same order\n    let pIndex = 0;\n    let pActIndex = -1;\n\n    //console.log(\"finalActions before minimal check = \", finalActions)\n\n    finalActions.forEach((action, j) => {\n        if (action.type === \"intervention\") {\n            //good interventions can have these status values\n            if (!!action.status && action.status.includes(\"goodintv\", \"incorrect-answers\", \"minimal\", \"misOrdered-goodintv\", \n            \"misOrdered-incorrect-answers\", \"misOrdered-incorrect-answers\", \"minimal\", \"misOrdered-minimal\", \n            \"misOrdered-minimal-incorrect-answers\",\n            \"misOrdered-phase-incorrect-answers\", \"misOrdered-phase-minimal-incorrect-answers\", \"misOrdered-phase-minimal\")) {\n                if (!pNames.includes(action.probLabel)) {\n                    pActIndex = pIndex;\n                    pNames[pActIndex] = action.probLabel;\n                    pIndex++;}\n                else { pActIndex = pNames.indexOf(action.probLabel); }\n                let actions = pActions[pActIndex];\n                if (!actions) { actions = []; }\n                actions.push(action);\n                pActions[pActIndex] = actions;\n            }\n        }\n    });\n\n    // If all the minimal were found but not all the action were, then we\n    // need to re-mark the action objects created for the minimal events\n    // to be minimal instead of goodintv.  It isn't\n    // appropriate to give this feedback if all actions are present.\n    // Waited until now so that all the events are in one list instead of\n    // a list per phase,\n    let processedIds = formattedActions.map(event => event.id);\n    let pIds = problems.map(a => a.probLabel);\n    pNames.forEach((pEntry, j) => {\n        //get the action definition for this problem\n        let pIndex = pIds.indexOf(pEntry);\n        let prob = problems[pIndex];\n        let actionNeeded = prob.actions.filter(obj => obj.protocolRelationship === \"required\").map(obj => obj.id);\n        //collect statuses for these actions\n\n        let minimalNeeded = prob.actions.filter(obj => obj.protocolRelationship === \"minimal\").map(obj => obj.id);\n        if (minimalNeeded) { //no point in doing anything else if no minimals were defined\n            let foundActions = pActions[j];\n            let found = foundActions.map(a => a.id);\n            let allActionFound = true;\n            let allMinimalFound = true;\n            for (let item of actionNeeded) {\n                if (!found.includes(item)) {\n                    allActionFound = false;\n                    break;\n                }\n            }\n            for (let item of minimalNeeded) {\n                if (!found.includes(item)) {\n                    allMinimalFound = false;\n                    break;\n                }\n            }\n            let numericalIDsChanged = [];\n            if (!allActionFound && allMinimalFound) {\n                minimalNeeded.forEach((foundId, j) => {\n                    let pIndex = processedIds.indexOf(foundId);\n                    let object = formattedActions[pIndex];\n\n                    //find object to modify\n                    object.minimalWhy = prob.minimalWhy;\n                    switch (object.status){\n                        case \"incorrect-answers\":\n                            object.status = \"minimal-incorrect-answers\"\n                            break\n                        case \"goodintv\":\n                            object.status = \"minimal\"\n                            break\n                        case \"misOrdered-goodintv\":\n                            object.status = \"misOrdered-minimal\"\n                            break\n                        case \"misOrdered-incorrect-answers\":\n                            object.status = \"misOrdered-minimal-incorrect-answers\"\n                            break\n                        case \"misOrdered-phase-goodintv\":\n                            object.status = \"misOrdered-phase-minimal\"\n                            break\n                        case \"misOrdered-phase-incorrect-answers\":\n                            object.status = \"misOrdered-phase-minimal-incorrect-answers\"\n                            break\n                        default: \n                            break}\n\n                    numericalIDsChanged.push(object.numericalID);\n                    formattedActions[pIndex] = object;\n                });\n                //redo color for header if needed\n                let header = {};\n                numericalIDsChanged.forEach((numericalID, z) => {\n                    header = findHeaderFor(numericalID, formattedActions);\n                    if (header && header.displayColor === \"green\") { header.displayColor = \"yellow\"; }\n                });\n\n            }\n        }\n        prob.actions = []  //clear out this working field from problems definitions\n\n    });\n\n    // end of overall analysis\n\n    //create summaries for condition 2\n    let summaryResults = summarizeAnalysis(finalActions, problems, requiredPhaseAndSubPhases, requiredPhaseNames, constraintsViolated)\n    hierAssessResults = summaryResults[0]\n    hierProblemResults = summaryResults[1]\n    topLevelSummary = summaryResults[2]\n\n    \n    //save analysis and summaries for condition 2 to db\n\n    console.log(\"Phase Assessment Status Results\", hierAssessResults)\n    console.log(\"Intervention Status Results\", hierProblemResults)\n    console.log(\"Constraint Violation Results\", constraintsViolated)\n    //console.log(\"Final Analysis:\", finalActions);\n\n\n    // save final analysis in a file\n    saveAnalysisLog(log, finalActions, hierAssessResults, hierProblemResults, topLevelSummary, constraintsViolated);\n\n    //else {checkOnOverwriting(log, finalActions)}\n\n\n    return (finalActions);\n\n}\n\n\nexport {analyzeEvents}","export const formatAsMinSecs = (seconds) => {\n    return new Date(seconds * 1000).toISOString().substr(14, 5)\n}","import { MDB_TYPES, CHECKLIST_STEP_TYPES, OPTION_TYPES } from \"@meddbriefer/scenario-data/constants\";\n\n// input: list of objects and a fieldName\n// returns: an object who's attributes are the distinct values for that fieldName mapped to the subset\n// of list items which share that field value\nexport const groupByKey = (listOfObjs, fldName) => listOfObjs.reduce(\n    (hash, obj) => ({ ...hash, [obj[fldName]]: (hash[obj[fldName]] || []).concat(obj) }),\n    {}\n)\n\nexport const getChecklistItemsByType = (scenario, itemType) => {\n    return scenario.checkListMetaData.filter(e => e.type === itemType)\n}\n\nexport const getChecklistItems = (scenario) => {\n  return scenario.checkListMetaData.filter(e => CHECKLIST_STEP_TYPES.includes(MDB_TYPES.PHASE, MDB_TYPES.SUB_PHASE))  \n}\n\nexport const getChecklistHierarchy = (scenario) => {\n    const phases = getChecklistItemsByType(scenario, MDB_TYPES.PHASE)\n    const subPhases = getChecklistItemsByType(scenario, MDB_TYPES.SUB_PHASE)\n    // filters out items which are display only\n    const clSteps = scenario.checkListMetaData.filter(e => CHECKLIST_STEP_TYPES.includes(e.type))\n    // get the options which are associated with some certain types of steps (decisions, assess w/options)\n    const options = scenario.checkListMetaData.filter(e => OPTION_TYPES.includes(e.type))\n    // map the options to their stepId\n    const stepOptions = groupByKey(options, \"parentID\")\n    // if a step has options, add them to that step\n    clSteps.forEach(step => {\n        if (step.id in stepOptions) {\n            step.options = stepOptions[step.id]\n        }\n    })\n    // figure out which checklist items belong to phases or subphases and group them by\n    // the their corresponding phase/subphase ids\n    const phChecklistSteps = groupByKey(clSteps.filter(e => undefined === e.subPhase), \"phase\")\n    const spChecklistSteps = groupByKey(clSteps.filter(e => !!e.subPhase), \"subPhase\")\n    // assign subphase steps to the appropriate subphase\n    subPhases.forEach(sp => {\n        sp.items = spChecklistSteps[sp.id]\n    })\n    // map subphases to their phase\n    const phSubphases = groupByKey(subPhases, \"phase\")\n    // phases have either items or subphases -not both. assign the appropriate stuff\n    // to each phase\n    phases.forEach(ph => {\n        if (ph.id in phChecklistSteps) {\n            ph.items = phChecklistSteps[ph.id]\n        } else {\n            ph.subPhases = phSubphases[ph.id]\n        }\n    })\n    return phases\n}","import React, { useContext } from 'react';\n\nimport {\n    Button,\n    Nav,\n    Navbar,\n    NavbarBrand,\n    NavbarText,\n} from \"reactstrap\";\n\nimport { AuthContext } from \"@meddbriefer/mdb-auth\"\n\n// {/* <Button color=\"primary\" onClick={prefsToggler}>\n//     Preferences\n// </Button> */}\n\n\nconst MDBNavBar = ({title, leftNav = null, rightNav = null }) => {\n\n    const { isAuthenticated, userName, signOutUser } = useContext(AuthContext)\n\n    return (\n        <Navbar color=\"dark\" dark>\n\n            <NavbarBrand href=\"#\">\n                MedDBriefer\n            </NavbarBrand>\n\n            {!!leftNav &&\n                <Nav>\n                {leftNav}\n                </Nav>\n            }\n\n            {!!title &&\n                <NavbarText tag=\"h3\">{title}</NavbarText>\n            }\n\n            <Nav>\n                {isAuthenticated &&\n                <>\n                    <NavbarText>\n                        Welcome, {userName} &nbsp;\n                    </NavbarText>\n                    <Button\n                        color=\"danger\"\n                        onClick={signOutUser}\n                    >\n                        Sign Out\n                    </Button>\n                </>\n                }\n                {!!rightNav &&\n                    rightNav\n                }\n            </Nav>\n\n        </Navbar>\n    )\n}\n\nexport default MDBNavBar;\n","import React, { useState, useEffect } from 'react';\nimport { Button, Table } from 'reactstrap';\nimport MDBNavBar from \"./MDBNavBar\"\nimport { getAssessmentIcon, getColor, getFeedback, getTimestamp, saveAnalysisLog} from \"./debriefingUtils\"\n\n\n\nconst DisplayBaseDebriefing = ({log, actions, scenario, context}) => {\n    const [showCommentColumn, setShowCommentColumn] = useState(false);\n    // eslint-disable-next-line\n    //const [events, setEvents] = useState(log.events);\n    const [formattedActions, setFormattedActions] = useState(undefined);\n\n// const Debriefing = ({ log, metaData, criticalActions, associations }) => {\n    /* const toggleCommentColumn = () => {\n        setShowCommentColumn(!showCommentColumn);\n    } */\n    \n\n    const saveAnalysisLogLocally = () => {\n        saveAnalysisLog(log,formattedActions)\n    }\n\n    const toggleComments = () => {\n        setShowCommentColumn(!showCommentColumn)\n    }\n\n    const dispHeaderRow = (entry) => {\n        return (\n            <>\n                {entry.id ===  \"assessmentHeader\"  || entry.id === \"assessmentSubHeader\"\n                    ? <td colSpan=\"4\" className={getColor(entry)}>\n                        <b>{entry.label}</b>\n                    </td>\n                    : <td colSpan=\"10\" className={\"black\"} >\n                        <div><em>\n                        &nbsp;&nbsp;&nbsp;Intervention Group: {entry.probLabel}</em></div>\n                    </td>}\n            </>\n        )\n    }\n    \n    function getLabel(entry) {\n        return(\n            <>\n            {entry.type === \"obtain-vital-sign\"\n                ? vitalLabel(entry)\n                : regularLabel(entry)\n            }\n            </>\n    \n        )\n    }\n    \n    function getStatusLabel(entry){\n        let metaData = scenario.intvMetaData\n        let metaEntry = metaData.find(me => (entry.vital === me.id))\n        return(<>{metaEntry.label}</>)\n    }\n    \n    function vitalLabel(entry){\n        return(\n            <>\n            {entry.vitalType === \"intervention-status\"\n                ? <>Requested intervention status for: {getStatusLabel(entry)}, <p>Found: <i>{entry.value}</i></p></>\n                : <>Requested vital: {entry.vital}, <p>Found: <i>{entry.value}</i></p></>\n            }\n            </>\n        )\n    }\n    \n    function regularLabel(entry) {\n        return(\n            <>\n            {entry.subPhase && entry.type !== \"intervention\"\n                ? <><b>{entry.subPhase}:</b> {entry.actionDescription}.  {findingsData(entry)}</>\n                : <>{phaseLabel(entry)}</>\n        }\n            </>\n        )\n    }\n    \n    function phaseLabel(entry){\n        return(\n            <>\n            {entry.type === \"intervention\"\n                ? <><b>Intervention:</b> {entry.actionDescription}. {findingsData(entry)} </>\n                : <>{entry.actionDescription}.  {findingsData(entry)}</>\n                }\n            </>\n        )\n    }\n        \n    function findingsData(entry){\n        return(\n            <>\n            {entry.finding\n            ?<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Findings: <i>{entry.finding}</i></p>\n            :<></>\n        }\n            </>\n        )\n    \n    }\n    \n    \n     function saveComment(val) {\n        let orig = val.target.defaultValue;\n        let comment = val.target.value;\n        let entryID = val.target.id;\n        if (orig !== comment){\n            let entry = formattedActions.find(entry => (entry.id === entryID))\n            // if (entry) { entry.comment = comment }}\n            const newEntry = Object.assign({}, entry, {comment: comment})\n            updateFormattedAction(newEntry)\n        }\n    }\n    \n    const dispDataRow = (entry) => {\n        return (\n            <>\n                <td>{entry.numericalID}</td>\n                <td>{getTimestamp(entry)}</td>\n                <td className={getColor(entry)}>\n                    <span className=\"material-icons-outlined\">{getAssessmentIcon(entry)}</span>\n                    {getLabel(entry)}\n                </td>\n                <td>{getFeedback(entry)}</td>\n\n                {showCommentColumn && <td><textarea rows=\"2\" cols=\"50\" defaultValue={entry.comment} onBlur={saveComment} id={`${entry.id}`}/></td>}\n            </>\n        )\n    }\n\n    \n    const updateFormattedAction = (record) => {\n        const index = formattedActions.findIndex(rec => rec.id === record.id)\n        setFormattedActions([\n            ...formattedActions.slice(0, index),\n            record,\n            ...formattedActions.slice(index+1)\n        ])\n    }    \n\n\n    async function displayIt () {\n        \n        \n        if (context === \"review\"){\n            //console.log(\"displaying for review\")\n            //setFormattedActions(actions)\n            setShowCommentColumn(true)        \n        }\n        else {\n            //console.log(\"displaying for non-review\")\n            //setFormattedActions(actions)\n            setShowCommentColumn(false)\n              }\n\n        setFormattedActions(actions)\n    \n        \n    }\n\n    \n   \n\n\n// eslint-disable-next-line\nuseEffect(\n    () => {\n        displayIt()\n        // eslint-disable-next-line\n    }, [] // empty list means this code will only be run on initial render\n)\n\n\n\nif (undefined === formattedActions) {\n    return (<h3>processing</h3>)\n}\n\nreturn (\n        <>\n            {context === \"review\"\n                ? <><MDBNavBar\n                    title={`Review of: ${log.label}`}\n                    leftNav={\n                        <Button\n                            color=\"primary\"\n                            onClick={saveAnalysisLogLocally}>Save Debriefing Log\n                        </Button>}\n                    rightNav={\n                        <Button\n                            color=\"primary\"\n                            onClick={toggleComments}>Toggle Comments\n                        </Button>}\n                     /></>\n                : <><MDBNavBar\n                    title={`Analysis for: ${log.label}`}\n                    /></>\n            }\n            <form>\n            <div style={{ overflowY: \"auto\", maxHeight: \"700px\" }}>\n                <Table borderless size=\"sm\">\n                    <thead>\n                        <tr>\n                            <th className=\"table-header\"> ID </th>\n                            <th className=\"table-header\"> Timestamp </th>\n                            <th className=\"table-header\"> Action Description </th>\n                            <th className=\"table-header\"> Feedback </th>\n                            {showCommentColumn && <th className=\"table-header\"> Comments </th>}\n                        </tr>\n                    </thead>\n                    <tbody className=\"scrolling\">\n                        {formattedActions.map((currentEntry, index) => (\n                            <tr key={index}>\n                                {currentEntry.type === \"header\"\n                                    ? dispHeaderRow(currentEntry)\n                                    : dispDataRow(currentEntry)\n                                }\n                            </tr>\n                        ))}\n                    </tbody>\n                </Table>\n            </div>\n        </form>\n        </>\n\n    )\n}\n\nexport {saveAnalysisLog}  \nexport default DisplayBaseDebriefing\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom'\nimport { db } from \"@meddbriefer/mdb-firebase\"\nimport { getDebriefLog, getLog, verifyDocument, getPublishedScenarioByID } from '@meddbriefer/scenario-data/index'\nimport {analyzeEvents} from './analyzeEvents'\nimport DisplayBaseDebriefing from './DisplayBaseDebriefing';\n\n\n\nfunction AnalyzeDebriefing ()  {\n    const { logID } = useParams()\n    const [observerLog, setObserverLog] = useState (undefined)\n    const [log, setLog] = useState(undefined)\n    const [scenario, setScenario] = useState(undefined)\n    const [analyzed, setAnalyzed] = useState(false)\n    const [loaded, setLoaded] = useState(false)\n\n    // eslint-disable-next-line\n    \n    // Set to true once all performed actions have been displayed in the log\n    // const [finishedPerformedActions, setFinishedPerformedActions] = useState(false);\n\n    //console.log (\"logID:\", logID)\n\n    function checkOnOverwriting() {\n        if (window.confirm (\"Are you sure you want to overwrite the existing analysis?  Any prior comments previously added will be lost.\")){\n            analyzeEventsHook(scenario, observerLog) \n            \n        }\n\n    }\n\n    async function analyzeEventsHook(scenario, log) {\n      analyzeEvents(scenario, log)}\n\n    \n    async function processEvents ()  {\n        //console.log(\"in processEvents to process a new observer file\")\n        if (! await verifyDocument(db, \"debriefing-feedback-logs\", logID))\n            {analyzeEventsHook(scenario, observerLog)\n            setAnalyzed(true)} \n        else {checkOnOverwriting()} \n        setAnalyzed(true)\n        return (true)    \n    }\n\n    useEffect(\n        () => {\n          getLog(db,logID)\n            .then(observerLogData => {  \n              //console.log(\"retrieve observerLogData\", observerLogData) \n              setObserverLog(observerLogData)    \n            })\n            .catch(error => alert('error fetching observer log', error))   \n        // eslint-disable-next-line\n    }, []\n      )\n    \n      useEffect(\n        () => {\n          !!observerLog && getPublishedScenarioByID(db, observerLog.scenarioID, \"V2\")\n            .then(scenData => {\n              console.log(\"retrieve scenario:\", scenData)\n              setScenario(scenData)\n            })\n    \n        }, [observerLog]\n      )\n    \n      useEffect(\n        () => {\n          !!scenario && processEvents()\n          //console.log(\"check on existing analysis\")\n        // eslint-disable-next-line\n        }, [scenario]\n      )\n    \n      useEffect(\n        () => {\n          !!analyzed && getDebriefLog(db, logID)\n            .then(logData => {\n              //console.log(\"retrieve Debriefing result:\", logData)\n              setLog(logData)  \n            })\n            .catch(error => alert('error fetching debriefing log', error))\n        // eslint-disable-next-line\n        }, [analyzed]\n      )\n    \n      useEffect(\n        () => {\n          !!log && setLoaded(true) \n        }, [log]\n      )\n    \n      if (!loaded) {\n        return (<h3>Loading</h3>)\n      }\n    \n\n\n    return (\n        <DisplayBaseDebriefing\n        log={log}\n        actions={log.events}\n        scenario={scenario}\n        context={\"initial-analysis\"}\n        />\n    )\n}\n\nexport default AnalyzeDebriefing","import { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { db } from \"@meddbriefer/mdb-firebase\"\nimport { getLog , getPublishedScenarioByID } from \"@meddbriefer/scenario-data/index\"\nimport AnalyzeDebriefing from '../components/AnalyzeDebriefing'\n\nconst Log = () => {\n\n  const { logID } = useParams()\n  const [ log, setLog ] = useState(null)\n  const [ scenario, setScenario] = useState(null)\n  const [loaded, setLoaded] = useState(false)\n\n  useEffect(\n    () => {\n      getLog(db,logID)\n        .then(logData => {\n          setLog(logData)\n        })\n    }, [logID]\n  )\n\n  useEffect(\n    () => {\n      //!!log && getScenarioByName(db, log.scenarioName, \"V2\")\n      !!log && getPublishedScenarioByID(db, log.scenarioID)\n        .then(scenData => {\n          setScenario(scenData)\n          console.log(\"scenario\", scenData)\n        })\n\n    }, [log]\n  )\n\n  useEffect(\n    () => {\n      !!scenario && setLoaded(true)\n    }, [scenario]\n  )\n\n  if (!loaded) {\n    return (<h3>Loading</h3>)\n  }\n  return ( \n      <AnalyzeDebriefing \n        log={logID} \n      /> \n    )\n\n\n}\n\nexport default Log;\n","import { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { db } from \"@meddbriefer/mdb-firebase\"\nimport { analyzeEvents } from '../components/analyzeEvents'\nimport { getDebriefLog, getLog, verifyDocument, getPublishedScenarioByID} from \"@meddbriefer/scenario-data/index\"\nimport DisplayBaseDebriefing from '../components/DisplayBaseDebriefing'\n\n\n\nfunction DisplayDebriefing () {\n\n  const { logID } = useParams()\n  const [observerLog, setObserverLog] = useState(undefined)\n  const [log, setLog] = useState(undefined)\n  const [scenario, setScenario] = useState(undefined)\n  const [analyzed, setAnalyzed] = useState(false)\n  const [loaded, setLoaded] = useState(false)\n\n  \n  \n  async function processLog () {\n    //console.log(\"in processLog to display existing analysis\")\n    if (! await verifyDocument(db, \"debriefing-feedback-logs\", logID))\n          {analyzeEvents(scenario, observerLog) \n          }\n    setAnalyzed(true)\n    return (true)\n  }\n  \n\n  //get observer log first\n\n  useEffect(\n    () => {\n      getLog(db, logID)\n        .then(observerLogData => {  \n          //console.log(\"retrieve observerLogData\", observerLogData) \n          setObserverLog(observerLogData)    \n        })\n        .catch(error => alert('error fetching observer log', error))   \n    }, [logID]\n  )\n\n  useEffect(\n    () => {\n      !!observerLog && getPublishedScenarioByID(db, observerLog.scenarioID, \"V2\")\n        .then(scenData => {\n          console.log(\"scenario:\", scenData)\n          setScenario(scenData)\n        })\n\n    }, [observerLog]\n  )\n\n  useEffect(\n    () => {\n      !!scenario && processLog()\n      //console.log(\"check on existing analysis\")\n        // eslint-disable-next-line\n        }, [scenario]\n      )\n      \n  useEffect(\n      () => {\n        !!analyzed && getDebriefLog(db,logID)\n          .then(logData => {\n            //console.log(\"retrieve Debriefing result:\", logData)\n            setLog(logData)  \n          })\n          .catch(error => alert('error fetching debriefing log', error))\n        // eslint-disable-next-line\n        }, [analyzed]\n      )\n\n  useEffect(\n    () => {\n      !!log && setLoaded(true) \n    }, [log]\n  )\n\n  if (!loaded) {\n    return (<h3>Loading</h3>)\n  }\n\n\n  return (\n    <DisplayBaseDebriefing\n      log={log}\n      actions={log.events}\n      scenario={scenario}\n      context={\"review\"} />\n  )\n\n\n}\n\nexport default DisplayDebriefing;\n","import React from \"react\"\n\nimport MDBNavBar from \"./MDBNavBar\"\n\nconst UnauthedLayout = (props) => {\n\n    return (\n        <>\n            <MDBNavBar\n                title=\"MedDBriefer Authentication\"\n            />\n            { props.children }\n        </>\n    )\n}\n\nexport default UnauthedLayout","import React from \"react\"\n\nimport {\n    HashRouter as Router,\n    Switch,\n} from \"react-router-dom\"\n\nimport { AuthProvider, PrivateRoute } from \"@meddbriefer/mdb-auth\"\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport \"./styles.css\";\n\nimport LogList from \"./routes/LogList\"\nimport Log from \"./routes/Log\"\nimport DisplayDebriefing from \"./routes/DisplayDebriefing\"\n\n\nimport UnauthedLayout from \"./components/UnauthedLayout\"\n\nconst App = (props) => {\n\n    return (\n        <AuthProvider>\n            <Router>\n\n                <Switch>\n                    <PrivateRoute\n                        exact path=\"/logs/:logID\"\n                        authFlowLayout={UnauthedLayout}\n                        component={Log}\n                    />\n                    <PrivateRoute\n                        exact path=\"/debriefing-feedback-logs/:logID\"\n                        authFlowLayout={UnauthedLayout}\n                        component={DisplayDebriefing}\n                    />\n                    {/*default (catchall) route*/}\n                    <PrivateRoute\n                        exact match=\"/\"\n                        authFlowLayout={UnauthedLayout}\n                        component={LogList}\n                    />\n                </Switch>\n            </Router>\n        </AuthProvider>\n    )\n}\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}